projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(x)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));timeout
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.log(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127timeout
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);doublestandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);DoublestandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);StandardDeviationstandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);longstandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0,dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev-dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev/dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));timeout
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);doublestandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);DoublestandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);intstandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);longstandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2.0,dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(standardDeviation,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;doublestandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;DoublestandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;StandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);doublestandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);DoublestandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);intstandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);longstandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);StandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(v)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);doublestandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);DoublestandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);StandardDeviationstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);longstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(2.0);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(1.0);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI/DEFAULT_INVERSE_ABSOLUTE_ACCURACY));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev-1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(x)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);StandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0),dev));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev-dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(0.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);intstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI/DEFAULT_INVERSE_ABSOLUTE));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);standardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);x=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev)/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0-dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;longstandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(4))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.pow(10,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI),dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(d)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127longstandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,x);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127longstandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127longstandardDeviation=Math.abs(dev)/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127intstandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(mean,dev-1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev*1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev-1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(dev<DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY||dev>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI),DEFAULT_INVERSE_ABSOLUTE_ACCURACY,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI),dev,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI),DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(1.0),standardDeviation));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2.0),dev));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x==DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(standardDeviation)/(mean*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(mean*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));(standardDeviation)/(dev*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY||dev>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(dev<DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev,dev,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev,dev,x);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev,dev,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY||dev>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(dev<DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev/dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev*dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev*dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127StandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127standardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127StandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127standardDeviation=Math.abs(dev)/dev;StandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127standardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127StandardDeviationstandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.sqrt(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.sqrt(dev,x);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127StandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127standardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0)))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0)))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/DEFAULT_INVERSE_ABSOLUTE_ACCURACY/SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127longstandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127intstandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);doublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);DoublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);longstandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);StandardDeviationstandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);x=Math.sqrt(dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);x=Math.min(dev,dev);doublestandardDeviation=Math.min(dev,dev);x=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);x=Math.min(dev,dev);DoublestandardDeviation=Math.min(dev,dev);x=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);x=Math.min(dev,dev);doublestandardDeviation=Math.max(dev,dev);x=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);x=Math.min(dev,dev);x=Math.min(dev,dev);x=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0-mean)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0/dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(1.0-standardDeviation)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2.0,mean)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(0.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127StandardDeviationstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127standardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<DEFAULT_INVERSE_ABSOLUTE_ACCURACY||x>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);doublestandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);DoublestandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);StandardDeviationstandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);longstandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));(standardDeviation)/(mean*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1)));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(standardDeviation)/(dev*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(dev*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(v);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.rint(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127x=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);x=Math.max(dev,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127finaldoublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev)/SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127longstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127intstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(3)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(3)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;doublestandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;DoublestandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;StandardDeviationstandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;longstandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1)));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE/DEFAULT_INVERSE_ABSOLUTE));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE/SQRT2PI));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(1.0,standardDeviation)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0,mean)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(4))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(4))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(4))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1)));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127standardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127StandardDeviationstandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(2.0*dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(2.0-dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev/dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(mean,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.pow(10,dev-1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.pow(10,dev-10);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.pow(10,dev-20);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.pow(10,dev-2);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY||dev>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sin(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI/DEFAULT_INVERSE_ABSOLUTE_ACCURACY,dev));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI/DEFAULT_INVERSE_ABSOLUTE_ACCURACY),dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(d)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(1.0,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(1.0/dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/SQRT2PI/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY,dev));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation/FastMath.sqrt(dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(v)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,x);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127standardDeviation=Math.max(standardDeviation,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127StandardDeviationstandardDeviation=Math.max(standardDeviation,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);x=Math.max(dev,dev);doublestandardDeviation=Math.max(dev,dev);x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);x=Math.max(dev,dev);DoublestandardDeviation=Math.max(dev,dev);x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);x=Math.max(dev,dev);doublestandardDeviation=Math.min(dev,dev);x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);x=Math.max(dev,dev);x=Math.max(dev,dev);x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);StandardDeviationstandardDeviation=Math.abs(standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127longstandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY||x>DEFAULT_INVERSE_ABSOLUTE_ACC
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);standardDeviation=Math.min(dev,dev);doublestandardDeviation=Math.min(dev,dev);standardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);standardDeviation=Math.min(dev,dev);DoublestandardDeviation=Math.min(dev,dev);standardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);standardDeviation=Math.min(dev,dev);doublestandardDeviation=Math.max(dev,dev);standardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);standardDeviation=Math.min(dev,dev);longstandardDeviation=Math.min(dev,dev);standardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/FastMath.sqrt(x)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev)/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0,x)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(0.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(d*FastMath.sqrt(standardDeviation)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY/SQRT2PI));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,mean);x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev,dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127if(dev<0.0){return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.floor(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127intstandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(1.0-dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.log(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(0.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x==DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127standardDeviation=Math.max(dev,dev);StandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(2.0+dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(1)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev,x,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.sqrt(dev);StandardDeviationstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);doublestandardDeviation=Math.abs(dev);StandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(3))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x==DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI),dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI),dev-mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(x);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0)))
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI)==if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE/DEFAULT_DEFAULT_INVERSE_ABSOLUTE));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127intstandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);StandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(2.0,standardDeviation)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.pow(10,dev-mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.pow(10,dev+1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(standardDeviation)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY||x>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(2.0,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;StandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0,dev/2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI)<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(4)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(4)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(4)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(4)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127standardDeviation=Math.min(dev,dev);StandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x*dev)/(dev*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((dev)/(dev*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev-DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(x);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI),dev,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI),dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(1.0,dev);x=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);x=Math.ceil(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);intstandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((dev*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((dev*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x*standardDeviation)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2.0-dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(x+dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation/FastMath.sqrt(v)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);x=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE/DEFAULT_2PI));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(x/dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(mean/dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x*dev)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.pow(10,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(0.0,dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(3)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(3)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev-DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(x-dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY||x>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY||x>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev,dev,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(dev*dev);
