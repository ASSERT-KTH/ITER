bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	return  0.5  *  (1.0  +  Erf.erf((dev)  /    (standardDeviation  *  FastMath.sqrt(2.0))));  	compilable	  [FE]  ConvergenceException  	3	5	replace
2	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	return  0.5  *  (1.0  +  Erf.erf((dev)  /    (standardDeviation  *  FastMath.sqrt(2.0))));  	compilable	  [FE]  ConvergenceException  	3	5	replace
3	[BUG]  [BUGGY]  timeout  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));	return  0.5  *  (1.0  +  Erf.erf((dev)  /    (standardDeviation  *  FastMath.sqrt(2.0))));  	compilable	timeout	3	1	replace
4	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  timeout  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));	return  0.5  *  (1.0  +  Erf.erf((dev)  /    (standardDeviation  *  FastMath.sqrt(2.0))));  	compilable	timeout	3	1	replace
5	[BUG]  [BUGGY]    [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	  	return  0.5  *  (1.0  +  Erf.erf((dev)  /    (standardDeviation  *  FastMath.sqrt(2.0))));  	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	3	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.abs(dev);  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	    double  standardDeviation  =  Math.abs(dev);		compilable	  [FE]  AssertionFailedError  	4	6	add
7	[BUG]  [BUGGY]    double  standardDeviation  =  Math.abs(dev);  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.abs(dev);  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    double  standardDeviation  =  Math.abs(dev);		compilable	  [FE]  AssertionFailedError  	4	6	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	    double  standardDeviation  =  Math.max(dev,  dev);		compilable	  [FE]  AssertionFailedError  	4	6	add
9	[BUG]  [BUGGY]    double  standardDeviation  =  Math.max(dev,  dev);  [FE]  AssertionFailedError  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    double  standardDeviation  =  Math.max(dev,  dev);		compilable	  [FE]  AssertionFailedError  	4	6	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	    double  standardDeviation  =  Math.min(dev,  dev);		compilable	  [FE]  AssertionFailedError  	4	6	add
11	[BUG]  [BUGGY]    double  standardDeviation  =  Math.min(dev,  dev);  [FE]  AssertionFailedError  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    double  standardDeviation  =  Math.min(dev,  dev);		compilable	  [FE]  AssertionFailedError  	4	6	add
12	[BUG]  [BUGGY]    (dev  *  SQRT2PI));  [CE]  not  a  statement  [FE]          ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    (dev  *  SQRT2PI));  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    (dev  *  SQRT2PI));		non-compiled	[CE]  not  a  statement	4	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	    double  standardDeviation  =  Math.abs(dev)/  dev;		compilable	  [FE]  AssertionFailedError  	4	6	add
14	[BUG]  [BUGGY]    double  standardDeviation  =  Math.abs(dev)/  dev;  [FE]  AssertionFailedError  [FE]            ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    double  standardDeviation  =  Math.abs(dev)/  dev;		compilable	  [FE]  AssertionFailedError  	4	6	add
15	[BUG]  [BUGGY]    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }		non-compiled	[CE]  not  a  statement	4	None	add
16	[BUG]  [BUGGY]    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }		non-compiled	[CE]  not  a  statement	4	None	add
17	[BUG]  [BUGGY]    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }		non-compiled	[CE]  not  a  statement	4	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.sqrt(dev);  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	    double  standardDeviation  =  Math.sqrt(dev);		compilable	  [FE]  AssertionFailedError  	4	7	add
19	[BUG]  [BUGGY]    double  standardDeviation  =  Math.sqrt(dev);  [FE]  AssertionFailedError  [FE]          ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    double  standardDeviation  =  Math.sqrt(dev);  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    double  standardDeviation  =  Math.sqrt(dev);		compilable	  [FE]  AssertionFailedError  	4	7	add
20	[BUG]  [BUGGY]    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]            ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    (dev  *  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }		non-compiled	[CE]  not  a  statement	4	None	add
21	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	return  0.5  *  (1.0  +  Erf.erf((dev)  /    (standardDeviation  *  FastMath.sqrt(2.0))));  	compilable	  [FE]  ConvergenceException  	3	5	replace
22	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	return  0.5  *  (1.0  +  Erf.erf((dev)  /    (standardDeviation  *  FastMath.sqrt(2.0))));  	compilable	  [FE]  ConvergenceException  	3	5	replace
23	[BUG]  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    (standardDeviation  *  FastMath.sqrt(2.0)));		non-compiled	[CE]  not  a  statement	4	None	add
24	[BUG]  [BUGGY]    (standardDeviation  *  FastMath.sqrt(1.0)));  [CE]  not  a  statement  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    (standardDeviation  *  FastMath.sqrt(1.0)));  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    (standardDeviation  *  FastMath.sqrt(1.0)));		non-compiled	[CE]  not  a  statement	4	None	add
25	[BUG]  [BUGGY]    (standardDeviation  *  FastMath.sqrt(x)));  [CE]  not  a  statement  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]    (standardDeviation  *  FastMath.sqrt(x)));  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	    (standardDeviation  *  FastMath.sqrt(x)));		non-compiled	[CE]  not  a  statement	4	None	add
26	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));	return  0.5  *  (1.0  +  Erf.erf((dev)  /    (standardDeviation  *  FastMath.sqrt(2.0))));  	compilable	timeout	3	1	replace
27	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  timeout  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));	return  0.5  *  (1.0  +  Erf.erf((dev)  /    (standardDeviation  *  FastMath.sqrt(2.0))));  	compilable	timeout	3	1	replace
