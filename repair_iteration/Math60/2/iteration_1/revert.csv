projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(x)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return3;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));timeout
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.log(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127timeout
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));(standardDeviation)/(x*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);doublestandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);DoublestandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);StandardDeviationstandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);longstandardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0,dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev-dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev/dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));timeout
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<DEFAULT_INVERSE_ABSOLUTE_ACCURACY){returndev;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);doublestandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);DoublestandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);intstandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);longstandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(2.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.5*Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(dev*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(mean*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return1;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(2.0,dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(standardDeviation,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY){if(x<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(x<DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;doublestandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;DoublestandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;StandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;standardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);doublestandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);DoublestandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);intstandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);longstandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);StandardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(v)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);doublestandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);DoublestandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);StandardDeviationstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);longstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(2.0);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(1.0);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE_ACCURACY));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev/SQRT2PI));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI/DEFAULT_INVERSE_ABSOLUTE_ACCURACY));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev);standardDeviation=Math.abs(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI){if(dev<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){return2;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev-1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*FastMath.sqrt(x)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);StandardDeviation=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.max(dev,dev);x=Math.max(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0),dev));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127DoublestandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev-dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(0.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));return0.5*(1.0+Erf.erf((standardDeviation)/(x*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);intstandardDeviation=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev);x=Math.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI/DEFAULT_INVERSE_ABSOLUTE));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*DEFAULT_INVERSE_ABSOLUTE));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5+Erf.erf((x)/(dev*FastMath.sqrt(2.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(0.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(1))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=FastMath.sqrt(dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);standardDeviation=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.min(dev,dev);x=Math.min(dev,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.sqrt(dev)/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(1.0-dev)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2.0))));(standardDeviation*FastMath.sqrt(1.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.abs(dev)/dev;longstandardDeviation=Math.abs(dev)/dev;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(2)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(3))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((x)/(standardDeviation*FastMath.sqrt(2))));(standardDeviation*FastMath.sqrt(4))));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127doublestandardDeviation=Math.pow(10,dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0))));return0.5*(1.0+Erf.erf((dev)/(x*FastMath.sqrt(2.0)));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(dev*SQRT2PI),dev);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java127(standardDeviation*FastMath.sqrt(d)));
