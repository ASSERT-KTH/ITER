bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  standardDeviation  =  Math.abs(dev);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  long  standardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	long  standardDeviation  =  Math.abs(dev);	          double    standardDeviation    =    Math.abs(dev);    long    standardDeviation    =    Math.abs(dev);    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
2	[BUG]  [BUGGY]  double  standardDeviation  =  Math.max(dev,  x);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.max(dev,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.max(dev,  x);	          double    standardDeviation    =    Math.max(dev,    dev);    double    standardDeviation    =    Math.max(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	33	None	replace
3	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	  (dev    *    SQRT2PI)    {    if(x    <    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
4	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(1.0))));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  not  a  statement	13	None	replace
5	[BUG]  [BUGGY]  long  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  long  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	long  standardDeviation  =  Math.abs(dev)/  dev;	          double    standardDeviation    =    Math.abs(dev)/    dev;    long    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
6	[BUG]  [BUGGY]  long  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  long  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	long  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	          double    standardDeviation    =    Math.abs(dev)/    dev;    long    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
7	[BUG]  [BUGGY]  x  =  Math.max(dev,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  x  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	x  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.max(dev,    dev);    x    =    Math.max(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	89	None	replace
8	[BUG]  [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.max(dev,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.max(dev,    dev);    x    =    Math.max(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	89	None	replace
9	[BUG]  [BUGGY]  int  standardDeviation  =  Math.min(dev,  dev);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  int  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	int  standardDeviation  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    int    standardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  possible  loss  of  precision	64	None	replace
10	[BUG]  [BUGGY]  double  standardDeviation  =  Math.min(mean,  dev  -  1);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.min(mean,  dev  -  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.min(mean,  dev  -  1);	  double    standardDeviation    =    Math.min(dev,    dev    -    1);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	84	None	replace
11	[BUG]  [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev  *  1);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev  *  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.min(dev,  dev  *  1);	  double    standardDeviation    =    Math.min(dev,    dev    -    1);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	84	None	replace
12	[BUG]  [BUGGY]  double  standardDeviation  =  Math.max(dev,  dev  -  1);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.max(dev,  dev  -  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.max(dev,  dev  -  1);	  double    standardDeviation    =    Math.min(dev,    dev    -    1);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	84	None	replace
13	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
14	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(dev  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
15	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
16	[BUG]  [BUGGY]  (dev  *  SQRT2PI),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  dev);  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  dev);	  (dev    *    SQRT2PI),    dev);    	non-compiled	[CE]  not  a  statement	124	None	replace
17	[BUG]  [BUGGY]  (dev  *  SQRT2PI),  dev,  mean);  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI),  dev,  mean);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI),  dev,  mean);	  (dev    *    SQRT2PI),    dev);    	non-compiled	[CE]  not  a  statement	124	None	replace
18	[BUG]  [BUGGY]  (dev  *  SQRT2PI),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  not  a  statement  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  (dev    *    SQRT2PI),    dev);    	non-compiled	[CE]  not  a  statement	124	None	replace
19	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(1.0),  standardDeviation));  [CE]  ')'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  FastMath.sqrt(1.0),  standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(1.0),  standardDeviation));	  (standardDeviation    *    FastMath.sqrt(1.0),    dev));    	non-compiled	[CE]  ')'  expected	92	None	replace
20	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0),  dev));  [CE]  ')'  expected  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0),  dev));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(2.0),  dev));	  (standardDeviation    *    FastMath.sqrt(1.0),    dev));    	non-compiled	[CE]  ')'  expected	92	None	replace
21	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2.0)));    	non-compiled	[CE]  not  a  statement	118	None	replace
22	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2.0)));    	non-compiled	[CE]  not  a  statement	118	None	replace
23	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
24	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
25	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2))));    (standardDeviation  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	44	None	add
26	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation)/  (mean  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation)/  (mean  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2))));    (standardDeviation)/  (mean  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	44	None	add
27	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2))));    (standardDeviation  *  FastMath.sqrt(3))));	  	non-compiled	[CE]  not  a  statement	44	None	add
28	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (mean  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (mean  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2))));    (mean  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	44	None	add
29	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(2.0))));	  	non-compiled	[CE]  not  a  statement	4	None	add
30	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(1.0))));	  	non-compiled	[CE]  not  a  statement	4	None	add
31	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(2.0)));	  	non-compiled	[CE]  not  a  statement	4	None	add
32	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (dev  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (dev  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    (standardDeviation)/  (dev  *  FastMath.sqrt(2.0))));	  	non-compiled	[CE]  not  a  statement	4	None	add
33	[BUG]  [BUGGY]  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	104	None	replace
34	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	104	None	replace
35	[BUG]  [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	104	None	replace
36	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
37	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
38	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(dev  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
39	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev,  dev,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    standardDeviation    =    Math.sqrt(dev,    dev);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
40	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev,  x);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev,  dev,  x);	  double    standardDeviation    =    Math.sqrt(dev,    dev);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
41	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev,  mean);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev,  mean);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev,  dev,  mean);	  double    standardDeviation    =    Math.sqrt(dev,    dev);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
42	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));	  return    0.5    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	80	None	replace
43	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));	  return    0.5    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	80	None	replace
44	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.min(dev,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  Double  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	Double  standardDeviation  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    Double    standardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	63	None	replace
45	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
46	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
47	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(dev  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
48	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0)));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (standardDeviation    *    FastMath.sqrt(1.0)));    	non-compiled	[CE]  not  a  statement	116	None	replace
49	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	14	None	replace
50	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	14	None	replace
51	[BUG]  [BUGGY]  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	14	None	replace
52	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  Double  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	Double  standardDeviation  =  Math.abs(dev)/  dev;	          double    standardDeviation    =    Math.abs(dev)/    dev;    Double    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	58	None	replace
53	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev  /  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev  /  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev  /  dev);	  double    standardDeviation    =    Math.sqrt(dev    -    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	94	None	replace
54	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev  *  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev  *  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev  *  dev);	  double    standardDeviation    =    Math.sqrt(dev    -    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	94	None	replace
55	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev  *  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(dev  *  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev  *  dev);	  double    standardDeviation    =    Math.abs(dev    -    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	23	None	replace
56	[BUG]  [BUGGY]  StandardDeviation  =  Math.max(dev,  dev);  [CE]  cannot  find  symbol  StandardDeviation  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  StandardDeviation  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	StandardDeviation  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.max(dev,    dev);    StandardDeviation    =    Math.max(dev,    dev);    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	87	None	replace
57	[BUG]  [BUGGY]  standardDeviation  =  Math.max(dev,  dev);  [CE]  cannot  assign  a  value  to  final  variable  standardDeviation  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	standardDeviation  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.max(dev,    dev);    StandardDeviation    =    Math.max(dev,    dev);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  standardDeviation	87	None	replace
58	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))  [CE]  ')'  expected  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ')'  expected	29	None	replace
59	[BUG]  [BUGGY]  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	29	None	replace
60	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [CE]  ')'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ')'  expected	29	None	replace
61	[BUG]  [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	29	None	replace
62	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
63	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
64	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.max(dev,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  Double  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	Double  standardDeviation  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.max(dev,    dev);    Double    standardDeviation    =    Math.max(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	34	None	replace
65	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	15	None	replace
66	[BUG]  [BUGGY]  StandardDeviation  =  Math.abs(dev)/  dev;  [CE]  cannot  find  symbol  StandardDeviation  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  StandardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	StandardDeviation  =  Math.abs(dev)/  dev;	          double    standardDeviation    =    Math.abs(dev)/    dev;    StandardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	59	None	replace
67	[BUG]  [BUGGY]  standardDeviation  =  Math.abs(dev)/  dev;  StandardDeviation  =  Math.abs(dev)/  dev;  [CE]  cannot  assign  a  value  to  final  variable  standardDeviation  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  standardDeviation  =  Math.abs(dev)/  dev;  StandardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	standardDeviation  =  Math.abs(dev)/  dev;  StandardDeviation  =  Math.abs(dev)/  dev;	          double    standardDeviation    =    Math.abs(dev)/    dev;    StandardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  standardDeviation	59	None	replace
68	[BUG]  [BUGGY]  (dev  /  FastMath.sqrt(1.0)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  FastMath.sqrt(1.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  FastMath.sqrt(1.0)));	  (dev    *    FastMath.sqrt(1.0)));    	non-compiled	[CE]  not  a  statement	21	None	replace
69	[BUG]  [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	30	None	replace
70	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))  [CE]  ')'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ')'  expected	30	None	replace
71	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [CE]  ')'  expected  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ')'  expected	30	None	replace
72	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	30	None	replace
73	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2)));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(2)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(2)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2)));    	non-compiled	[CE]  not  a  statement	119	None	replace
74	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2)));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2)));    	non-compiled	[CE]  not  a  statement	119	None	replace
75	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2)));    	non-compiled	[CE]  not  a  statement	119	None	replace
76	[BUG]  [BUGGY]  standardDeviation  =  Math.abs(dev);  [CE]  cannot  assign  a  value  to  final  variable  standardDeviation  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  standardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	standardDeviation  =  Math.abs(dev);	          double    standardDeviation    =    Math.abs(dev);    standardDeviation    =    Math.abs(dev);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  standardDeviation	82	None	replace
77	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  Math.abs(dev);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  StandardDeviation  standardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	StandardDeviation  standardDeviation  =  Math.abs(dev);	          double    standardDeviation    =    Math.abs(dev);    standardDeviation    =    Math.abs(dev);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
78	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.sqrt(dev,  dev);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  Double  standardDeviation  =  Math.sqrt(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	Double  standardDeviation  =  Math.sqrt(dev,  dev);	  Double    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	93	None	replace
79	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.sqrt(dev,  x);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  Double  standardDeviation  =  Math.sqrt(dev,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	Double  standardDeviation  =  Math.sqrt(dev,  x);	  Double    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	93	None	replace
80	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  not  a  statement	41	None	replace
81	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  not  a  statement	41	None	replace
82	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  ';'  expected  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  ';'  expected	41	None	replace
83	[BUG]  [BUGGY]  StandardDeviation  =  Math.min(dev,  dev);  [CE]  cannot  find  symbol  StandardDeviation  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  StandardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	StandardDeviation  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    StandardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	66	None	replace
84	[BUG]  [BUGGY]  standardDeviation  =  Math.min(dev,  dev);  [CE]  cannot  assign  a  value  to  final  variable  standardDeviation  [FE]                  AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	standardDeviation  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    StandardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  standardDeviation	66	None	replace
85	[BUG]  [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  not  a  statement	32	None	replace
86	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  not  a  statement	32	None	replace
87	[BUG]  [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0)))  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0)))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0)))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  not  a  statement	32	None	replace
88	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0)))  [CE]  ';'  expected  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0)))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0)))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  ';'  expected	32	None	replace
89	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  dev;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  dev;	  double    standardDeviation    =    Math.abs(dev)/    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	55	None	replace
90	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI;	  double    standardDeviation    =    Math.abs(dev)/    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	55	None	replace
91	[BUG]  [BUGGY]  long  standardDeviation  =  Math.max(dev,  dev);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  long  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	long  standardDeviation  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.max(dev,    dev);    long    standardDeviation    =    Math.max(dev,    dev);    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
92	[BUG]  [BUGGY]  int  standardDeviation  =  Math.max(dev,  dev);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  int  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	int  standardDeviation  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.max(dev,    dev);    long    standardDeviation    =    Math.max(dev,    dev);    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
93	[BUG]  [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.sqrt(dev);        x    =    Math.sqrt(dev);    double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	98	None	add
94	[BUG]  [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  Double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  Double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.sqrt(dev);        x    =    Math.sqrt(dev);    Double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	98	None	add
95	[BUG]  [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  long  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  long  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.sqrt(dev);        x    =    Math.sqrt(dev);    long  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	98	None	add
96	[BUG]  [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  StandardDeviation  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  StandardDeviation  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.sqrt(dev);        x    =    Math.sqrt(dev);    StandardDeviation  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);	  	non-compiled	[CE]  cannot  find  symbol	98	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	                double        standardDeviation        =        Math.sqrt(dev);        x    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);	  	compilable	  [FE]  AssertionFailedError  	98	7	add
98	[BUG]  [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.sqrt(dev);        x    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);	  	compilable	  [FE]  AssertionFailedError  	98	7	add
99	[BUG]  [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.min(dev,        dev);        x    =    Math.min(dev,    dev);    double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	109	None	add
100	[BUG]  [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  Double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  Double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.min(dev,        dev);        x    =    Math.min(dev,    dev);    Double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	109	None	add
101	[BUG]  [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.min(dev,        dev);        x    =    Math.min(dev,    dev);    double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	109	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	                double        standardDeviation        =        Math.min(dev,        dev);        x    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	109	6	add
103	[BUG]  [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.min(dev,        dev);        x    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	109	6	add
104	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0  -  mean)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0  -  mean)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(1.0  -  mean)));	  (standardDeviation    *    FastMath.sqrt(1.0    -    dev)));    	non-compiled	[CE]  not  a  statement	114	None	replace
105	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0  /  dev)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0  /  dev)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(1.0  /  dev)));	  (standardDeviation    *    FastMath.sqrt(1.0    -    dev)));    	non-compiled	[CE]  not  a  statement	114	None	replace
106	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(1.0  -  standardDeviation)));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  FastMath.sqrt(1.0  -  standardDeviation)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(1.0  -  standardDeviation)));	  (standardDeviation    *    FastMath.sqrt(1.0    -    dev)));    	non-compiled	[CE]  not  a  statement	114	None	replace
107	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0,  mean)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0,  mean)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(2.0,  mean)));	  (standardDeviation    *    FastMath.sqrt(2.0,    dev)));    	non-compiled	[CE]  not  a  statement	50	None	replace
108	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.abs(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  Double  standardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	Double  standardDeviation  =  Math.abs(dev);	  double    standardDeviation    =    Math.abs(standardDeviation);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	111	None	replace
109	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(0.0)));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  FastMath.sqrt(0.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(0.0)));	  (standardDeviation    *    FastMath.sqrt(0.0)));    	non-compiled	[CE]  not  a  statement	95	None	replace
110	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  Math.sqrt(dev);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  StandardDeviation  standardDeviation  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	StandardDeviation  standardDeviation  =  Math.sqrt(dev);	          double    standardDeviation    =    Math.sqrt(dev);    StandardDeviation    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
111	[BUG]  [BUGGY]  standardDeviation  =  Math.sqrt(dev);  [CE]  cannot  assign  a  value  to  final  variable  standardDeviation  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  standardDeviation  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	standardDeviation  =  Math.sqrt(dev);	          double    standardDeviation    =    Math.sqrt(dev);    StandardDeviation    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  standardDeviation	71	None	replace
112	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    SQRT2PI)    {    if(x    <    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
113	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    SQRT2PI)    {    if(x    <    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
114	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  double  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  double  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev);        standardDeviation    =    Math.abs(dev);    double  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	81	None	add
115	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  Double  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  Double  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev);        standardDeviation    =    Math.abs(dev);    Double  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	81	None	add
116	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  StandardDeviation  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  StandardDeviation  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev);        standardDeviation    =    Math.abs(dev);    StandardDeviation  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);	  	non-compiled	[CE]  cannot  find  symbol	81	None	add
117	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  long  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  long  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev);        standardDeviation    =    Math.abs(dev);    long  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	81	None	add
118	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(2.0))));	  	non-compiled	[CE]  not  a  statement	6	None	add
119	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(1.0))));	  	non-compiled	[CE]  not  a  statement	6	None	add
120	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (mean  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (mean  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2.0))));    (standardDeviation)/  (mean  *  FastMath.sqrt(2.0))));	  	non-compiled	[CE]  not  a  statement	6	None	add
121	[BUG]  [BUGGY]  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	78	None	replace
122	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	78	None	replace
123	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))  [CE]  ')'  expected  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ')'  expected	78	None	replace
124	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	78	None	replace
125	[BUG]  [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	38	None	replace
126	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ';'  expected	38	None	replace
127	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1)));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ')'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1)));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1)));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ')'  expected	38	None	replace
128	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	40	None	replace
129	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	40	None	replace
130	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2))));    (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	42	None	add
131	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation)/  (dev  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation)/  (dev  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2))));    (standardDeviation)/  (dev  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	42	None	add
132	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2))));    (standardDeviation  *  FastMath.sqrt(3))));	  	non-compiled	[CE]  not  a  statement	42	None	add
133	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));  [CE]  ')'  expected  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0)));    	non-compiled	[CE]  ')'  expected	102	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0)));    	compilable	  [FE]  AssertionFailedError  	102	6	replace
135	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));  [FE]  AssertionFailedError  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0)));    	compilable	  [FE]  AssertionFailedError  	102	6	replace
136	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE));  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE));	  (dev    *    DEFAULT_INVERSE_ABSOLUTE));    	non-compiled	[CE]  not  a  statement	101	None	replace
137	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(dev,  dev);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(dev,  dev);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(dev,  dev);	  double    standardDeviation    =    FastMath.sqrt(dev);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	106	None	replace
138	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(v);  [CE]  cannot  find  symbol  v  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(v);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(v);	  double    standardDeviation    =    FastMath.sqrt(dev);    	non-compiled	[CE]  cannot  find  symbol  v	106	None	replace
139	[BUG]  [BUGGY]  double  standardDeviation  =  Math.rint(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.rint(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.rint(dev);	  double    standardDeviation    =    Math.log(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	9	None	replace
140	[BUG]  [BUGGY]  x  =  Math.min(dev,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  x  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	x  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    x    =    Math.min(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	110	None	replace
141	[BUG]  [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.max(dev,  standardDeviation);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.max(dev,  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.max(dev,  standardDeviation);	          double    standardDeviation    =    Math.min(dev,    dev);    x    =    Math.min(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	110	None	replace
142	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.min(dev,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    x    =    Math.min(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	110	None	replace
143	[BUG]  [BUGGY]  final  double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  final  double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	final  double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);	          double    standardDeviation    =    Math.sqrt(dev);    x    =    Math.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	99	None	replace
144	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev)/  SQRT2PI;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev)/  SQRT2PI;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev)/  SQRT2PI;	  double    standardDeviation    =    Math.sqrt(dev)/    dev;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	85	None	replace
145	[BUG]  [BUGGY]  long  standardDeviation  =  Math.sqrt(dev);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  long  standardDeviation  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	long  standardDeviation  =  Math.sqrt(dev);	          double    standardDeviation    =    Math.sqrt(dev);    long    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
146	[BUG]  [BUGGY]  int  standardDeviation  =  Math.sqrt(dev);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  int  standardDeviation  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	int  standardDeviation  =  Math.sqrt(dev);	          double    standardDeviation    =    Math.sqrt(dev);    long    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
147	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	31	None	replace
148	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(3))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  not  a  statement	120	None	replace
149	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  not  a  statement	120	None	replace
150	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  not  a  statement	120	None	replace
151	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  double  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  double  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev)/        dev;        standardDeviation    =    Math.abs(dev)/    dev;    double  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	60	None	add
152	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  Double  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  Double  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev)/        dev;        standardDeviation    =    Math.abs(dev)/    dev;    Double  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	60	None	add
153	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  StandardDeviation  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  StandardDeviation  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev)/        dev;        standardDeviation    =    Math.abs(dev)/    dev;    StandardDeviation  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
154	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  long  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  long  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev)/        dev;        standardDeviation    =    Math.abs(dev)/    dev;    long  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	60	None	add
155	[BUG]  [BUGGY]  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	39	None	replace
156	[BUG]  [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	39	None	replace
157	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1)));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ')'  expected  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1)));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1)));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ')'  expected	39	None	replace
158	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE  /  DEFAULT_INVERSE_ABSOLUTE));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE  /  DEFAULT_INVERSE_ABSOLUTE));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE  /  DEFAULT_INVERSE_ABSOLUTE));	  (dev    *    SQRT2PI    /    DEFAULT_INVERSE_ABSOLUTE));    	non-compiled	[CE]  not  a  statement	100	None	replace
159	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE  /  SQRT2PI));  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE  /  SQRT2PI));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE  /  SQRT2PI));	  (dev    *    SQRT2PI    /    DEFAULT_INVERSE_ABSOLUTE));    	non-compiled	[CE]  not  a  statement	100	None	replace
160	[BUG]  [BUGGY]  return  2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	103	None	replace
161	[BUG]  [BUGGY]  return  0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	103	None	replace
162	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(1.0,  standardDeviation)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  FastMath.sqrt(1.0,  standardDeviation)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(1.0,  standardDeviation)));	  (standardDeviation    *    FastMath.sqrt(1.0,    dev)));    	non-compiled	[CE]  not  a  statement	22	None	replace
163	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0,  mean)));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0,  mean)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(1.0,  mean)));	  (standardDeviation    *    FastMath.sqrt(1.0,    dev)));    	non-compiled	[CE]  not  a  statement	22	None	replace
164	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ';'  expected	43	None	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2))));    	compilable	  [FE]  AssertionFailedError  	43	6	replace
166	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2))));    	compilable	  [FE]  AssertionFailedError  	43	6	replace
167	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(4))));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(4))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(4))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(4))));    	non-compiled	[CE]  not  a  statement	121	None	replace
168	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(4))));    	non-compiled	[CE]  not  a  statement	121	None	replace
169	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4))));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(4))));    	non-compiled	[CE]  not  a  statement	121	None	replace
170	[BUG]  [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	37	None	replace
171	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1)));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ')'  expected  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1)));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1)));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ')'  expected	37	None	replace
172	[BUG]  [BUGGY]  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  cannot  assign  a  value  to  final  variable  standardDeviation  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	standardDeviation  =  Math.abs(dev)/  dev;	          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  standardDeviation	61	None	replace
173	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  StandardDeviation  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	StandardDeviation  standardDeviation  =  Math.abs(dev)/  dev;	          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
174	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0)));    	compilable	timeout	123	1	replace
175	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));  timeout  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0)));    	compilable	timeout	123	1	replace
176	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));  [CE]  ')'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0)));    	non-compiled	[CE]  ')'  expected	123	None	replace
177	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0  *  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0  *  dev);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(2.0  *  dev);	  double    standardDeviation    =    FastMath.sqrt(2.0);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	73	None	replace
178	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0  -  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0  -  dev);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(2.0  -  dev);	  double    standardDeviation    =    FastMath.sqrt(2.0);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	73	None	replace
179	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev  /  dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(dev  /  dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev  /  dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    standardDeviation    =    Math.abs(dev    /    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	24	None	replace
180	[BUG]  [BUGGY]  double  standardDeviation  =  Math.max(dev,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.max(dev,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.max(dev,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    standardDeviation    =    Math.max(standardDeviation,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	51	None	replace
181	[BUG]  [BUGGY]  double  standardDeviation  =  Math.max(mean,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.max(mean,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.max(mean,  dev);	  double    standardDeviation    =    Math.max(standardDeviation,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	51	None	replace
182	[BUG]  [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  1);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.pow(10,  dev  -  1);	  double    standardDeviation    =    Math.pow(10,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	122	None	replace
183	[BUG]  [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  10);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  10);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.pow(10,  dev  -  10);	  double    standardDeviation    =    Math.pow(10,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	122	None	replace
184	[BUG]  [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  20);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  20);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.pow(10,  dev  -  20);	  double    standardDeviation    =    Math.pow(10,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	122	None	replace
185	[BUG]  [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  2);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  2);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.pow(10,  dev  -  2);	  double    standardDeviation    =    Math.pow(10,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	122	None	replace
186	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	compilable	  [FE]  ConvergenceException  	96	6	replace
187	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	compilable	  [FE]  ConvergenceException  	96	6	replace
188	[BUG]  [BUGGY]  timeout  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	compilable	timeout	96	1	replace
189	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  timeout  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	compilable	timeout	96	1	replace
190	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	3	None	replace
191	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  dev  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	3	None	replace
192	[BUG]  [BUGGY]  (dev  /  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  FastMath.sqrt(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  FastMath.sqrt(2.0)));	  (dev    *    FastMath.sqrt(2.0)));    	non-compiled	[CE]  not  a  statement	49	None	replace
193	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(1.0)));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(1.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(1.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/    (x    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  not  a  statement	16	None	replace
194	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(1.0)));  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(1.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(1.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/    (x    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  not  a  statement	16	None	replace
195	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sin(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sin(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sin(dev);	  double    standardDeviation    =    Math.abs(mean);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	112	None	replace
196	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [CE]  not  a  statement  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));	  (dev    *    SQRT2PI    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY));    	non-compiled	[CE]  not  a  statement	77	None	replace
197	[BUG]  [BUGGY]  (dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  dev));  [CE]  ')'  expected  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  dev));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  dev));	  (dev    *    SQRT2PI    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY));    	non-compiled	[CE]  ')'  expected	77	None	replace
198	[BUG]  [BUGGY]  (dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY),  dev);  [CE]  not  a  statement  [FE]                          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY),  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY),  dev);	  (dev    *    SQRT2PI    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY));    	non-compiled	[CE]  not  a  statement	77	None	replace
199	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(d)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  FastMath.sqrt(d)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(d)));	  (standardDeviation    *    FastMath.sqrt(d)));    	non-compiled	[CE]  not  a  statement	125	None	replace
200	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0,  dev);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0,  dev);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(1.0,  dev);	  double    standardDeviation    =    FastMath.sqrt(1.0);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	74	None	replace
201	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0  /  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0  /  dev);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(1.0  /  dev);	  double    standardDeviation    =    FastMath.sqrt(1.0);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	74	None	replace
202	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev)/  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    standardDeviation    =    Math.abs(dev)/    SQRT2PI;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	56	None	replace
203	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY));    	non-compiled	[CE]  not  a  statement	75	None	replace
204	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY));    	non-compiled	[CE]  not  a  statement	75	None	replace
205	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  dev));  [CE]  ')'  expected  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  dev));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  dev));	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY));    	non-compiled	[CE]  ')'  expected	75	None	replace
206	[BUG]  [BUGGY]  (standardDeviation  /  FastMath.sqrt(dev)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  /  FastMath.sqrt(dev)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  /  FastMath.sqrt(dev)));	  (standardDeviation    *    FastMath.sqrt(dev)));    	non-compiled	[CE]  not  a  statement	67	None	replace
207	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    	compilable	timeout	5	1	replace
208	[BUG]  [BUGGY]  return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    	compilable	timeout	5	1	replace
209	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(v)));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  FastMath.sqrt(v)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(v)));	  (standardDeviation    *    FastMath.sqrt(v)));    	non-compiled	[CE]  not  a  statement	68	None	replace
210	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    /    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	52	None	replace
211	[BUG]  [BUGGY]  double  standardDeviation  =  Math.min(dev,  x);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.min(dev,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.min(dev,  x);	          double    standardDeviation    =    Math.min(dev,    dev);    double    standardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	62	None	replace
212	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [CE]  not  a  statement  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	28	None	replace
213	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))  [CE]  ')'  expected  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ')'  expected	28	None	replace
214	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [CE]  ')'  expected  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ')'  expected	28	None	replace
215	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	28	None	replace
216	[BUG]  [BUGGY]  standardDeviation  =  Math.max(standardDeviation,  dev);  [CE]  cannot  assign  a  value  to  final  variable  standardDeviation  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  standardDeviation  =  Math.max(standardDeviation,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	standardDeviation  =  Math.max(standardDeviation,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  standardDeviation	108	None	replace
217	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  Math.max(standardDeviation,  dev);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  StandardDeviation  standardDeviation  =  Math.max(standardDeviation,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	StandardDeviation  standardDeviation  =  Math.max(standardDeviation,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
218	[BUG]  [BUGGY]          double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.max(dev,        dev);        x    =    Math.max(dev,    dev);    double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	88	None	add
219	[BUG]  [BUGGY]          double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  Double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  Double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.max(dev,        dev);        x    =    Math.max(dev,    dev);    Double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	88	None	add
220	[BUG]  [BUGGY]          double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.max(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.max(dev,        dev);        x    =    Math.max(dev,    dev);    double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.max(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	88	None	add
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	                double        standardDeviation        =        Math.max(dev,        dev);        x    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	88	6	add
222	[BUG]  [BUGGY]          double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.max(dev,        dev);        x    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	88	6	add
223	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev);  StandardDeviation  standardDeviation  =  Math.abs(standardDeviation);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(dev);  StandardDeviation  standardDeviation  =  Math.abs(standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev);  StandardDeviation  standardDeviation  =  Math.abs(standardDeviation);	          double    standardDeviation    =    Math.abs(dev);    StandardDeviation    standardDeviation    =    Math.abs(dev);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
224	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1))));    	non-compiled	[CE]  not  a  statement	105	None	replace
225	[BUG]  [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1))));    	non-compiled	[CE]  not  a  statement	105	None	replace
226	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1))));    	non-compiled	[CE]  not  a  statement	105	None	replace
227	[BUG]  [BUGGY]  long  standardDeviation  =  Math.min(dev,  dev);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  long  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	long  standardDeviation  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    long    standardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
228	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACC  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACC  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACC	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
229	[BUG]  [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.min(dev,        dev);        standardDeviation    =    Math.min(dev,    dev);    double  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	107	None	add
230	[BUG]  [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);  Double  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);  Double  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.min(dev,        dev);        standardDeviation    =    Math.min(dev,    dev);    Double  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	107	None	add
231	[BUG]  [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.max(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.max(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.min(dev,        dev);        standardDeviation    =    Math.min(dev,    dev);    double  standardDeviation  =  Math.max(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	107	None	add
232	[BUG]  [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);  long  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);  long  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.min(dev,        dev);        standardDeviation    =    Math.min(dev,    dev);    long  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	107	None	add
233	[BUG]  [BUGGY]  (dev  /  FastMath.sqrt(x)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  FastMath.sqrt(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  FastMath.sqrt(x)));	  (dev    *    FastMath.sqrt(x)));    	non-compiled	[CE]  not  a  statement	86	None	replace
234	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  dev;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  dev;	  double    standardDeviation    =    Math.sqrt(dev)/    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	113	None	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    	compilable	  [FE]  AssertionFailedError  	90	6	replace
236	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));  [FE]  AssertionFailedError  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    	compilable	  [FE]  AssertionFailedError  	90	6	replace
237	[BUG]  [BUGGY]  (dev  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	  (dev    /    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	1	None	replace
238	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	37	None	replace
239	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ';'  expected	37	None	replace
240	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	37	None	replace
241	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0,  x)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0,  x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(1.0,  x)));	  (standardDeviation    *    FastMath.sqrt(1.0,    dev)));    	non-compiled	[CE]  not  a  statement	22	None	replace
242	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
243	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0)));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(1.0)));	  	non-compiled	[CE]  not  a  statement	6	None	add
244	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(0.0))));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(0.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(0.0))));	  	non-compiled	[CE]  not  a  statement	6	None	add
245	[BUG]  [BUGGY]  (d  *  FastMath.sqrt(standardDeviation)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (d  *  FastMath.sqrt(standardDeviation)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(d  *  FastMath.sqrt(standardDeviation)));	  (standardDeviation    *    FastMath.sqrt(d)));    	non-compiled	[CE]  not  a  statement	125	None	replace
246	[BUG]  [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	29	None	replace
247	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	29	None	replace
248	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI));  [CE]  not  a  statement  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI));	  (dev    *    SQRT2PI    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY));    	non-compiled	[CE]  not  a  statement	77	None	replace
249	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	38	None	replace
250	[BUG]  [BUGGY]  (dev  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    /    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	52	None	replace
251	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI)  {  if(x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	  (dev    *    SQRT2PI)    {    if(x    <    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
252	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0)));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ')'  expected	45	None	replace
253	[BUG]  [BUGGY]  double  standardDeviation  =  Math.min(dev,  mean);  x  =  Math.max(dev,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.min(dev,  mean);  x  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.min(dev,  mean);  x  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    x    =    Math.min(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	110	None	replace
254	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	78	None	replace
255	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [CE]  ')'  expected  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ')'  expected	78	None	replace
256	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	78	None	replace
257	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev);  x  =  Math.sqrt(dev);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev);  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev,  dev);  x  =  Math.sqrt(dev);	          double    standardDeviation    =    Math.sqrt(dev);    x    =    Math.sqrt(dev);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	99	None	replace
258	[BUG]  [BUGGY]  timeout  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	compilable	timeout	96	1	replace
259	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0))));  timeout  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	compilable	timeout	96	1	replace
260	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.max(dev,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.max(dev,    dev);    x    =    Math.max(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	89	None	replace
261	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	  (dev    /    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	25	None	replace
262	[BUG]  [BUGGY]  if(dev  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  }  [CE]  not  a  statement  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  if(dev  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  }  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	if(dev  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	104	None	replace
263	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	104	None	replace
264	[BUG]  [BUGGY]  double  standardDeviation  =  Math.floor(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.floor(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.floor(dev);	  double    standardDeviation    =    Math.log(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	9	None	replace
265	[BUG]  [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	39	None	replace
266	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ';'  expected	39	None	replace
267	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	39	None	replace
268	[BUG]  [BUGGY]  int  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  int  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	int  standardDeviation  =  Math.abs(dev)/  dev;	          double    standardDeviation    =    Math.abs(dev)/    dev;    long    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
269	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0  -  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0  -  dev);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(1.0  -  dev);	  double    standardDeviation    =    FastMath.sqrt(1.0);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	74	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.log(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (standardDeviation    *    FastMath.sqrt(2.0))));    	compilable	  [FE]  AssertionFailedError  	31	6	replace
271	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.log(2.0))));  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.log(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (standardDeviation    *    FastMath.sqrt(2.0))));    	compilable	  [FE]  AssertionFailedError  	31	6	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0)));    	compilable	  [FE]  AssertionFailedError  	102	6	replace
273	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  [FE]  AssertionFailedError  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0)));    	compilable	  [FE]  AssertionFailedError  	102	6	replace
274	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2))));    	compilable	  [FE]  AssertionFailedError  	40	7	replace
276	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(0))));  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2))));    	compilable	  [FE]  AssertionFailedError  	40	7	replace
277	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(0.0))));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(0.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(0.0))));	  	non-compiled	[CE]  not  a  statement	4	None	add
278	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
279	[BUG]  [BUGGY]  standardDeviation  =  Math.max(dev,  dev);  StandardDeviation  =  Math.max(dev,  dev);  [CE]  cannot  assign  a  value  to  final  variable  standardDeviation  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  standardDeviation  =  Math.max(dev,  dev);  StandardDeviation  =  Math.max(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	standardDeviation  =  Math.max(dev,  dev);  StandardDeviation  =  Math.max(dev,  dev);	          double    standardDeviation    =    Math.max(dev,    dev);    StandardDeviation    =    Math.max(dev,    dev);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  standardDeviation	87	None	replace
280	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	30	None	replace
281	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0  +  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0  +  dev);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(2.0  +  dev);	  double    standardDeviation    =    FastMath.sqrt(2.0);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	73	None	replace
282	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(1)));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(1)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (mean    *    FastMath.sqrt(2))));    (standardDeviation  *  FastMath.sqrt(1)));	  	non-compiled	[CE]  not  a  statement	44	None	add
283	[BUG]  [BUGGY]  (dev  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	  (dev    /    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	46	None	replace
284	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  x,  dev);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  x,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev,  x,  dev);	  double    standardDeviation    =    Math.sqrt(dev,    dev);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
285	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	28	None	replace
286	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	28	None	replace
287	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.sqrt(dev);  StandardDeviation  standardDeviation  =  Math.sqrt(dev);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  Double  standardDeviation  =  Math.sqrt(dev);  StandardDeviation  standardDeviation  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	Double  standardDeviation  =  Math.sqrt(dev);  StandardDeviation  standardDeviation  =  Math.sqrt(dev);	          double    standardDeviation    =    Math.sqrt(dev);    StandardDeviation    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
288	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  double  standardDeviation  =  Math.abs(dev);  StandardDeviation  =  Math.abs(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);  double  standardDeviation  =  Math.abs(dev);  StandardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev);        standardDeviation    =    Math.abs(dev);    double  standardDeviation  =  Math.abs(dev);  StandardDeviation  =  Math.abs(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	81	None	add
289	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  not  a  statement	41	None	replace
290	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1))));    	non-compiled	[CE]  ';'  expected	105	None	replace
291	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1))));    	non-compiled	[CE]  not  a  statement	105	None	replace
292	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
293	[BUG]  [BUGGY]  (dev  /  SQRT2PI),  dev);  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI),  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI),  dev);	  (dev    *    SQRT2PI),    dev);    	non-compiled	[CE]  not  a  statement	124	None	replace
294	[BUG]  [BUGGY]  (dev  *  SQRT2PI),  dev  -  mean);  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI),  dev  -  mean);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI),  dev  -  mean);	  (dev    *    SQRT2PI),    dev);    	non-compiled	[CE]  not  a  statement	124	None	replace
295	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(x);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(x);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(x);	  double    standardDeviation    =    FastMath.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	106	None	replace
296	[BUG]  [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  not  a  statement	32	None	replace
297	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0)))  [CE]  ')'  expected  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0)))  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0)))	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  ')'  expected	32	None	replace
298	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  ==  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI)  ==  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  ==  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
299	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE  /  DEFAULT_DEFAULT_INVERSE_ABSOLUTE));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE  /  DEFAULT_DEFAULT_INVERSE_ABSOLUTE));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE  /  DEFAULT_DEFAULT_INVERSE_ABSOLUTE));	  (dev    *    SQRT2PI    /    DEFAULT_INVERSE_ABSOLUTE));    	non-compiled	[CE]  not  a  statement	100	None	replace
300	[BUG]  [BUGGY]  int  standardDeviation  =  Math.abs(dev);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  int  standardDeviation  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	int  standardDeviation  =  Math.abs(dev);	          double    standardDeviation    =    Math.abs(dev);    long    standardDeviation    =    Math.abs(dev);    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
301	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI)  {  if(x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    SQRT2PI)    {    if(x    <    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
302	[BUG]  [BUGGY]  double  standardDeviation  =  Math.max(dev,  dev);  StandardDeviation  =  Math.min(dev,  dev);  [CE]  cannot  find  symbol  StandardDeviation  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.max(dev,  dev);  StandardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.max(dev,  dev);  StandardDeviation  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    StandardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	66	None	replace
303	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(2.0,  standardDeviation)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  FastMath.sqrt(2.0,  standardDeviation)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(2.0,  standardDeviation)));	  (standardDeviation    *    FastMath.sqrt(2.0,    dev)));    	non-compiled	[CE]  not  a  statement	50	None	replace
304	[BUG]  [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  mean);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  -  mean);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.pow(10,  dev  -  mean);	  double    standardDeviation    =    Math.pow(10,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	122	None	replace
305	[BUG]  [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  +  1);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev  +  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.pow(10,  dev  +  1);	  double    standardDeviation    =    Math.pow(10,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	122	None	replace
306	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(dev)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  FastMath.sqrt(dev)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(dev)));	  (standardDeviation    *    FastMath.sqrt(dev)));    	non-compiled	[CE]  not  a  statement	67	None	replace
307	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(standardDeviation)));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  FastMath.sqrt(standardDeviation)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(standardDeviation)));	  (standardDeviation    *    FastMath.sqrt(dev)));    	non-compiled	[CE]  not  a  statement	67	None	replace
308	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  ';'  expected	41	None	replace
309	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ';'  expected	104	None	replace
310	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  ')'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  (standardDeviation  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ')'  expected	40	None	replace
311	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	                double        standardDeviation        =        Math.abs(dev)/        dev;        standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;	  	compilable	  [FE]  AssertionFailedError  	60	6	add
313	[BUG]  [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.abs(dev)/        dev;        standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;	  	compilable	  [FE]  AssertionFailedError  	60	6	add
314	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0,  dev);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0,  dev);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(2.0,  dev);	  double    standardDeviation    =    FastMath.sqrt(2.0);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	73	None	replace
315	[BUG]  [BUGGY]  (standardDeviation  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/    (x    *    FastMath.sqrt(2.0)));    	non-compiled	[CE]  not  a  statement	12	None	replace
316	[BUG]  [BUGGY]  timeout  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	compilable	timeout	96	1	replace
317	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0)));  timeout  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	compilable	timeout	96	1	replace
318	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0)));  [CE]  ')'  expected  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (x  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ')'  expected	96	None	replace
319	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
320	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  StandardDeviation  =  Math.abs(dev)/  dev;  [CE]  cannot  find  symbol  StandardDeviation  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  StandardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  StandardDeviation  =  Math.abs(dev)/  dev;	          double    standardDeviation    =    Math.abs(dev)/    dev;    StandardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	59	None	replace
321	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0,  dev  /  2.0)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0,  dev  /  2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(1.0,  dev  /  2.0)));	  (standardDeviation    *    FastMath.sqrt(1.0,    dev)));    	non-compiled	[CE]  not  a  statement	22	None	replace
322	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	  (dev    /    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	25	None	replace
323	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  SQRT2PI)  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	  (dev    /    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
324	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
325	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(4)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(4)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(4)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(4))));    	non-compiled	[CE]  not  a  statement	121	None	replace
326	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(4))));    	non-compiled	[CE]  not  a  statement	121	None	replace
327	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4)));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(4))));    	non-compiled	[CE]  not  a  statement	121	None	replace
328	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4)));  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(4))));    	non-compiled	[CE]  not  a  statement	121	None	replace
329	[BUG]  [BUGGY]  standardDeviation  =  Math.min(dev,  dev);  StandardDeviation  =  Math.min(dev,  dev);  [CE]  cannot  assign  a  value  to  final  variable  standardDeviation  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  standardDeviation  =  Math.min(dev,  dev);  StandardDeviation  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	standardDeviation  =  Math.min(dev,  dev);  StandardDeviation  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    StandardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  standardDeviation	66	None	replace
330	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x  *  dev)/  (dev  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x  *  dev)/  (dev  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x  *  dev)/  (dev  *  FastMath.sqrt(2.0))));	  return    0.5    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	103	None	replace
331	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  dev)/  (dev  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  dev)/  (dev  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  dev)/  (dev  *  FastMath.sqrt(2.0))));	  return    0.5    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	103	None	replace
332	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    standardDeviation    =    Math.sqrt(dev    -    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	94	None	replace
333	[BUG]  [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	78	None	replace
334	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(x);	  double    standardDeviation    =    Math.abs(mean);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	112	None	replace
335	[BUG]  [BUGGY]  (dev  *  SQRT2PI),  dev,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI),  dev,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI),  dev,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  (dev    *    SQRT2PI),    dev);    	non-compiled	[CE]  not  a  statement	124	None	replace
336	[BUG]  [BUGGY]  (dev  *  SQRT2PI),  dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  SQRT2PI),  dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI),  dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  (dev    *    SQRT2PI),    dev);    	non-compiled	[CE]  not  a  statement	124	None	replace
337	[BUG]  [BUGGY]  double  standardDeviation  =  Math.max(1.0,  dev);  x  =  Math.min(dev,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.max(1.0,  dev);  x  =  Math.min(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.max(1.0,  dev);  x  =  Math.min(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    x    =    Math.min(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	110	None	replace
338	[BUG]  [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.ceil(dev,  dev);  [CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.ceil(dev,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.ceil(dev,  dev);	          double    standardDeviation    =    Math.min(dev,    dev);    x    =    Math.min(dev,    dev);    	non-compiled	[CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;	110	None	replace
339	[BUG]  [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  int  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]          double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);  int  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	                double        standardDeviation        =        Math.sqrt(dev);        x    =    Math.sqrt(dev);    int  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	98	None	add
340	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  1.0  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0)));    	compilable	timeout	123	1	replace
341	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));  timeout  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0)));    	compilable	timeout	123	1	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0)));    	compilable	  [FE]  AssertionFailedError  	123	6	replace
343	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  dev  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0)));    	compilable	  [FE]  AssertionFailedError  	123	6	replace
344	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x  *  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x  *  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x  *  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	15	None	replace
345	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0  -  dev)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0  -  dev)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(2.0  -  dev)));	  (standardDeviation    *    FastMath.sqrt(1.0    -    dev)));    	non-compiled	[CE]  not  a  statement	114	None	replace
346	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ';'  expected	38	None	replace
347	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (2.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	30	None	replace
348	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(x  +  dev)));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(x  +  dev)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(x  +  dev)));	  (standardDeviation    *    FastMath.sqrt(dev)));    	non-compiled	[CE]  not  a  statement	67	None	replace
349	[BUG]  [BUGGY]  (standardDeviation  /  FastMath.sqrt(v)));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  /  FastMath.sqrt(v)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  /  FastMath.sqrt(v)));	  (standardDeviation    *    FastMath.sqrt(v)));    	non-compiled	[CE]  not  a  statement	68	None	replace
350	[BUG]  [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	39	None	replace
351	[BUG]  [BUGGY]  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  not  a  statement	39	None	replace
352	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ';'  expected	37	None	replace
353	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev);  x  =  Math.abs(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(dev);  x  =  Math.abs(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev);  x  =  Math.abs(dev);	          double    standardDeviation    =    Math.sqrt(dev);    x    =    Math.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	99	None	replace
354	[BUG]  [BUGGY]  x  =  Math.sqrt(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  x  =  Math.sqrt(dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	x  =  Math.sqrt(dev);	          double    standardDeviation    =    Math.sqrt(dev);    x    =    Math.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	99	None	replace
355	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE  /  DEFAULT_2PI));  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE  /  DEFAULT_2PI));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE  /  DEFAULT_2PI));	  (dev    *    SQRT2PI    /    DEFAULT_INVERSE_ABSOLUTE));    	non-compiled	[CE]  not  a  statement	100	None	replace
356	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  /  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  /  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(x  /  dev);	  double    standardDeviation    =    Math.abs(dev    /    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	24	None	replace
357	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(mean  /  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(mean  /  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(mean  /  dev);	  double    standardDeviation    =    Math.abs(dev    /    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	24	None	replace
358	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x  *  dev)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  +  Erf.erf((  x  *  dev)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x  *  dev)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	80	None	replace
359	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.pow(10,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  Double  standardDeviation  =  Math.pow(10,  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	Double  standardDeviation  =  Math.pow(10,  dev);	  Double    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	93	None	replace
360	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(0.0,  dev)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(0.0,  dev)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(0.0,  dev)));	  (standardDeviation    *    FastMath.sqrt(2.0,    dev)));    	non-compiled	[CE]  not  a  statement	50	None	replace
361	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(3)));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (standardDeviation  *  FastMath.sqrt(3)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(3)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  not  a  statement	120	None	replace
362	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3)));  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3)));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation    *    FastMath.sqrt(3))));    	non-compiled	[CE]  not  a  statement	120	None	replace
363	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(dev  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    standardDeviation    =    Math.abs(dev    -    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	23	None	replace
364	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  dev);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(x  -  dev);	  double    standardDeviation    =    Math.abs(dev    -    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	23	None	replace
365	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2))));    	compilable	timeout	43	1	replace
366	[BUG]  [BUGGY]  return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (dev    *    FastMath.sqrt(2))));    	compilable	timeout	43	1	replace
367	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  not  a  statement	32	None	replace
368	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1.0))));    	non-compiled	[CE]  ';'  expected	32	None	replace
369	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
370	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(1))));    	non-compiled	[CE]  ';'  expected	105	None	replace
371	[BUG]  [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	  (dev    *    SQRT2PI)    {    if(dev    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	3	None	replace
372	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	  (dev    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
373	[BUG]  [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	29	None	replace
374	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  not  a  statement	29	None	replace
375	[BUG]  [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5    *    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    	non-compiled	[CE]  ';'  expected	29	None	replace
376	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev,  solverAbsoluteAccuracy);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev,  solverAbsoluteAccuracy);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev,  dev,  solverAbsoluteAccuracy);	  double    standardDeviation    =    Math.sqrt(dev,    dev);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	8	None	replace
377	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    standardDeviation    =    FastMath.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	106	None	replace
378	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(dev  *  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(dev  *  dev);  [BUGGY]      (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(dev  *  dev);	  double    standardDeviation    =    FastMath.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	106	None	replace
