bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
2	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                  ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
3	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [CE]  not  a  statement  [FE]                    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  3;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    3;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    timeout    	compilable	  [FE]  AssertionFailedError  	27	6	replace
5	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  [FE]  AssertionFailedError  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    timeout    	compilable	  [FE]  AssertionFailedError  	27	6	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    timeout    	compilable	  [FE]  AssertionFailedError  	27	6	replace
7	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  [FE]  AssertionFailedError  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    timeout    	compilable	  [FE]  AssertionFailedError  	27	6	replace
8	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.sqrt(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev,  dev);	      double    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	19	None	replace
9	[BUG]  [BUGGY]  double  standardDeviation  =  Math.log(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.log(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.log(dev);	      double    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	19	None	replace
10	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/  (x  *  FastMath.sqrt(2.0))));	  timeout    	non-compiled	[CE]  not  a  statement	26	None	add
11	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(2.0))));	  timeout    	non-compiled	[CE]  not  a  statement	26	None	add
12	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/  (x  *  FastMath.sqrt(2.0)));	  timeout    	non-compiled	[CE]  not  a  statement	26	None	add
13	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(1.0))));	  timeout    	non-compiled	[CE]  not  a  statement	26	None	add
14	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/  (x  *  FastMath.sqrt(2.0))));	  timeout    	non-compiled	[CE]  not  a  statement	3	None	add
15	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(2.0))));	  timeout    	non-compiled	[CE]  not  a  statement	3	None	add
16	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation)/  (x  *  FastMath.sqrt(1.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation)/  (x  *  FastMath.sqrt(1.0))));	  timeout    	non-compiled	[CE]  not  a  statement	3	None	add
17	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev);  double  standardDeviation  =  Math.abs(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev);  double  standardDeviation  =  Math.abs(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev);    double  standardDeviation  =  Math.abs(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	6	None	add
18	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev);  Double  standardDeviation  =  Math.abs(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev);  Double  standardDeviation  =  Math.abs(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev);    Double  standardDeviation  =  Math.abs(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	6	None	add
19	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev);  StandardDeviation  standardDeviation  =  Math.abs(dev);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev);  StandardDeviation  standardDeviation  =  Math.abs(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev);    StandardDeviation  standardDeviation  =  Math.abs(dev);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
20	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev);  long  standardDeviation  =  Math.abs(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev);  long  standardDeviation  =  Math.abs(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev);    long  standardDeviation  =  Math.abs(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	6	None	add
21	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(1.0)));  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  FastMath.sqrt(1.0)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(1.0)));	      (standardDeviation    *    FastMath.sqrt(1.0)));    	non-compiled	[CE]  not  a  statement	24	None	replace
22	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0,  dev)));  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0,  dev)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(1.0,  dev)));	      (standardDeviation    *    FastMath.sqrt(1.0)));    	non-compiled	[CE]  not  a  statement	24	None	replace
23	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev  -  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.abs(dev  -  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev  -  dev);	      double    standardDeviation    =    Math.abs(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	7	None	replace
24	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev  /  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.abs(dev  /  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev  /  dev);	      double    standardDeviation    =    Math.abs(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	7	None	replace
25	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
26	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
27	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [CE]  not  a  statement  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  dev;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
28	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  	non-compiled	[CE]  not  a  statement	1	None	add
29	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  	non-compiled	[CE]  not  a  statement	1	None	add
30	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  	non-compiled	[CE]  not  a  statement	1	None	add
31	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(2.0))));	  	non-compiled	[CE]  not  a  statement	1	None	add
32	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1.0))));	  	non-compiled	[CE]  not  a  statement	1	None	add
33	[BUG]  [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  double  standardDeviation  =  Math.max(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  double  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.max(dev,    dev);    double  standardDeviation  =  Math.max(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	8	None	add
34	[BUG]  [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  Double  standardDeviation  =  Math.max(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  Double  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.max(dev,    dev);    Double  standardDeviation  =  Math.max(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	8	None	add
35	[BUG]  [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  int  standardDeviation  =  Math.max(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  int  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.max(dev,    dev);    int  standardDeviation  =  Math.max(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	8	None	add
36	[BUG]  [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  long  standardDeviation  =  Math.max(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  long  standardDeviation  =  Math.max(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.max(dev,    dev);    long  standardDeviation  =  Math.max(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	8	None	add
37	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	21	None	add
38	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (2.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	21	None	add
39	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.5  *  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	21	None	add
40	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	21	None	add
41	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(3))));	  	non-compiled	[CE]  not  a  statement	21	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	compilable	  [FE]  AssertionFailedError  	22	6	replace
43	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	compilable	  [FE]  AssertionFailedError  	22	6	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	compilable	  [FE]  AssertionFailedError  	22	6	replace
45	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (mean  *  FastMath.sqrt(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	compilable	  [FE]  AssertionFailedError  	22	6	replace
46	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
47	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
48	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  1;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    1;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
49	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  FastMath.sqrt(2.0)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(2.0)));	      (standardDeviation    *    FastMath.sqrt(2.0)));    	non-compiled	[CE]  not  a  statement	23	None	replace
50	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0,  dev)));  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (standardDeviation  *  FastMath.sqrt(2.0,  dev)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(2.0,  dev)));	      (standardDeviation    *    FastMath.sqrt(2.0)));    	non-compiled	[CE]  not  a  statement	23	None	replace
51	[BUG]  [BUGGY]  double  standardDeviation  =  Math.max(standardDeviation,  dev);  [CE]  variable  standardDeviation  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.max(standardDeviation,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.max(standardDeviation,  dev);	      double    standardDeviation    =    Math.max(dev,    dev);    	non-compiled	[CE]  variable  standardDeviation  might  not  have  been  initialized	9	None	replace
52	[BUG]  [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
53	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if(x  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
54	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(x  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
55	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      double    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	14	None	replace
56	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  SQRT2PI;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.abs(dev)/  SQRT2PI;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(dev)/  SQRT2PI;	      double    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	14	None	replace
57	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  double  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  double  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev)/    dev;    double  standardDeviation  =  Math.abs(dev)/  dev;	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	13	None	add
58	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  Double  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  Double  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev)/    dev;    Double  standardDeviation  =  Math.abs(dev)/  dev;	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	13	None	add
59	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  StandardDeviation  =  Math.abs(dev)/  dev;  [CE]  cannot  find  symbol  StandardDeviation  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  StandardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev)/    dev;    StandardDeviation  =  Math.abs(dev)/  dev;	  	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	13	None	add
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	        double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;	  	compilable	  [FE]  AssertionFailedError  	13	6	add
61	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev)/    dev;    standardDeviation  =  Math.abs(dev)/  dev;	  	compilable	  [FE]  AssertionFailedError  	13	6	add
62	[BUG]  [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  double  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.min(dev,    dev);    double  standardDeviation  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	10	None	add
63	[BUG]  [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  Double  standardDeviation  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  Double  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.min(dev,    dev);    Double  standardDeviation  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	10	None	add
64	[BUG]  [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  int  standardDeviation  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  int  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.min(dev,    dev);    int  standardDeviation  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	10	None	add
65	[BUG]  [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  long  standardDeviation  =  Math.min(dev,  dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  long  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.min(dev,    dev);    long  standardDeviation  =  Math.min(dev,  dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	10	None	add
66	[BUG]  [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  StandardDeviation  =  Math.min(dev,  dev);  [CE]  cannot  find  symbol  StandardDeviation  [FE]            AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  StandardDeviation  =  Math.min(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.min(dev,    dev);    StandardDeviation  =  Math.min(dev,  dev);	  	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	10	None	add
67	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(dev)));  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (standardDeviation  *  FastMath.sqrt(dev)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(dev)));	      (standardDeviation    *    FastMath.sqrt(x)));    	non-compiled	[CE]  not  a  statement	25	None	replace
68	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(v)));  [CE]  not  a  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (standardDeviation  *  FastMath.sqrt(v)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(v)));	      (standardDeviation    *    FastMath.sqrt(x)));    	non-compiled	[CE]  not  a  statement	25	None	replace
69	[BUG]  [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  double  standardDeviation  =  Math.sqrt(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  double  standardDeviation  =  Math.sqrt(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.sqrt(dev);    double  standardDeviation  =  Math.sqrt(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	18	None	add
70	[BUG]  [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  Double  standardDeviation  =  Math.sqrt(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  Double  standardDeviation  =  Math.sqrt(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.sqrt(dev);    Double  standardDeviation  =  Math.sqrt(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	18	None	add
71	[BUG]  [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  StandardDeviation  standardDeviation  =  Math.sqrt(dev);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  StandardDeviation  standardDeviation  =  Math.sqrt(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.sqrt(dev);    StandardDeviation  standardDeviation  =  Math.sqrt(dev);	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
72	[BUG]  [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  long  standardDeviation  =  Math.sqrt(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  long  standardDeviation  =  Math.sqrt(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.sqrt(dev);    long  standardDeviation  =  Math.sqrt(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	18	None	add
73	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0);  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(2.0);	      	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	5	None	replace
74	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0);  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(1.0);	      	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	5	None	replace
75	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [CE]  not  a  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));	      (dev    *    SQRT2PI));    	non-compiled	[CE]  not  a  statement	12	None	replace
76	[BUG]  [BUGGY]  (dev  /  SQRT2PI));  [CE]  not  a  statement  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  /  SQRT2PI));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  /  SQRT2PI));	      (dev    *    SQRT2PI));    	non-compiled	[CE]  not  a  statement	12	None	replace
77	[BUG]  [BUGGY]  (dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [CE]  not  a  statement  [FE]                  ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY));	      (dev    *    SQRT2PI));    	non-compiled	[CE]  not  a  statement	12	None	replace
78	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  not  a  statement  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  	non-compiled	[CE]  not  a  statement	1	None	add
79	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(2.0)));	  	non-compiled	[CE]  not  a  statement	1	None	add
80	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    timeout    	non-compiled	[CE]  ';'  expected	4	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	        double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);	  	compilable	  [FE]  AssertionFailedError  	6	6	add
82	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev);  standardDeviation  =  Math.abs(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev);    standardDeviation  =  Math.abs(dev);	  	compilable	  [FE]  AssertionFailedError  	6	6	add
83	[BUG]  [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI)  {  if(dev  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  2;  }	      (dev    *    SQRT2PI)    {    if(x    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    return    2;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
84	[BUG]  [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev  -  1);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.min(dev,  dev  -  1);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.min(dev,  dev  -  1);	      double    standardDeviation    =    Math.min(dev,    dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	11	None	replace
85	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev)/  dev;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.sqrt(dev)/  dev;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev)/  dev;	      double    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	14	None	replace
86	[BUG]  [BUGGY]  (dev  *  FastMath.sqrt(x)));  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  FastMath.sqrt(x)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  FastMath.sqrt(x)));	      (standardDeviation    *    FastMath.sqrt(x)));    	non-compiled	[CE]  not  a  statement	25	None	replace
87	[BUG]  [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  StandardDeviation  =  Math.max(dev,  dev);  [CE]  cannot  find  symbol  StandardDeviation  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  StandardDeviation  =  Math.max(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.max(dev,    dev);    StandardDeviation  =  Math.max(dev,  dev);	  	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	8	None	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	        double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	8	6	add
89	[BUG]  [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.max(dev,  dev);  x  =  Math.max(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.max(dev,    dev);    x  =  Math.max(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	8	6	add
90	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  [CE]  unreachable  statement  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));	  timeout    	non-compiled	[CE]  unreachable  statement	26	None	add
91	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(2.0)));	  timeout    	non-compiled	[CE]  not  a  statement	26	None	add
92	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0),  dev));  [CE]  ')'  expected  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0),  dev));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(1.0),  dev));	      (standardDeviation    *    FastMath.sqrt(1.0)));    	non-compiled	[CE]  ')'  expected	24	None	replace
93	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.sqrt(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  Double  standardDeviation  =  Math.sqrt(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	Double  standardDeviation  =  Math.sqrt(dev);	      double    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	19	None	replace
94	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev  -  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.sqrt(dev  -  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev  -  dev);	      double    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	19	None	replace
95	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(0.0)));  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (standardDeviation  *  FastMath.sqrt(0.0)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(0.0)));	      (standardDeviation    *    FastMath.sqrt(2.0)));    	non-compiled	[CE]  not  a  statement	23	None	replace
96	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [CE]  unreachable  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    standardDeviation)/    (x    *    FastMath.sqrt(2.0))));    return  0.5  *  (1.0  +  Erf.erf((  standardDeviation)/  (x  *  FastMath.sqrt(2.0))));	  timeout    	non-compiled	[CE]  unreachable  statement	3	None	add
97	[BUG]  [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  int  standardDeviation  =  Math.sqrt(dev);  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  int  standardDeviation  =  Math.sqrt(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.sqrt(dev);    int  standardDeviation  =  Math.sqrt(dev);	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	18	None	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	        double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);	  	compilable	  [FE]  AssertionFailedError  	18	7	add
99	[BUG]  [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.sqrt(dev);  x  =  Math.sqrt(dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.sqrt(dev);    x  =  Math.sqrt(dev);	  	compilable	  [FE]  AssertionFailedError  	18	7	add
100	[BUG]  [BUGGY]  (dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE));  [CE]  not  a  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE));	      (dev    *    SQRT2PI));    	non-compiled	[CE]  not  a  statement	12	None	replace
101	[BUG]  [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE));  [CE]  not  a  statement  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  DEFAULT_INVERSE_ABSOLUTE));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  DEFAULT_INVERSE_ABSOLUTE));	      (dev    *    SQRT2PI));    	non-compiled	[CE]  not  a  statement	12	None	replace
102	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  ')'  expected  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    	non-compiled	[CE]  ')'  expected	22	None	replace
103	[BUG]  [BUGGY]  return  0.5  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return  0.5  +  Erf.erf((  x)/  (dev  *  FastMath.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    timeout    	non-compiled	[CE]  ';'  expected	27	None	replace
104	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [CE]  not  a  statement  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (0.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));	  	non-compiled	[CE]  not  a  statement	21	None	add
105	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(1))));	  	non-compiled	[CE]  not  a  statement	21	None	add
106	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  FastMath.sqrt(dev);  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  FastMath.sqrt(dev);	      	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	5	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	        double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	10	6	add
108	[BUG]  [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  standardDeviation  =  Math.min(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.min(dev,    dev);    standardDeviation  =  Math.min(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	10	6	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	        double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	10	6	add
110	[BUG]  [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.min(dev,  dev);  x  =  Math.min(dev,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.min(dev,    dev);    x  =  Math.min(dev,  dev);	  	compilable	  [FE]  AssertionFailedError  	10	6	add
111	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(standardDeviation);  [CE]  variable  standardDeviation  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.abs(standardDeviation);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(standardDeviation);	      double    standardDeviation    =    Math.abs(dev);    	non-compiled	[CE]  variable  standardDeviation  might  not  have  been  initialized	7	None	replace
112	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(mean);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.abs(mean);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.abs(mean);	      double    standardDeviation    =    Math.abs(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	7	None	replace
113	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.sqrt(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.sqrt(dev)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      double    standardDeviation    =    Math.abs(dev)/    dev;    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	14	None	replace
114	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0  -  dev)));  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (standardDeviation  *  FastMath.sqrt(1.0  -  dev)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(1.0  -  dev)));	      (standardDeviation    *    FastMath.sqrt(1.0)));    	non-compiled	[CE]  not  a  statement	24	None	replace
115	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0))));  [CE]  not  a  statement  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(1.0))));	  	non-compiled	[CE]  not  a  statement	1	None	add
116	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0)));  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(1.0)));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2.0))));    (standardDeviation  *  FastMath.sqrt(1.0)));	  	non-compiled	[CE]  not  a  statement	1	None	add
117	[BUG]  [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  long  standardDeviation  =  Math.abs(dev)/  dev;  [CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]      double  standardDeviation  =  Math.abs(dev)/  dev;  long  standardDeviation  =  Math.abs(dev)/  dev;  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	        double    standardDeviation    =    Math.abs(dev)/    dev;    long  standardDeviation  =  Math.abs(dev)/  dev;	  	non-compiled	[CE]  variable  standardDeviation  is  already  defined  in  method  cumulativeProbability(double)	13	None	add
118	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [CE]  not  a  statement  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2.0)));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation  *  FastMath.sqrt(2.0)));	  	non-compiled	[CE]  not  a  statement	21	None	add
119	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2)));  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(2)));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation  *  FastMath.sqrt(2)));	  	non-compiled	[CE]  not  a  statement	21	None	add
120	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3))));  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(3))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation  *  FastMath.sqrt(3))));	  	non-compiled	[CE]  not  a  statement	21	None	add
121	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4))));  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x)/  (standardDeviation  *  FastMath.sqrt(2))));  (standardDeviation  *  FastMath.sqrt(4))));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    x)/    (standardDeviation    *    FastMath.sqrt(2))));    (standardDeviation  *  FastMath.sqrt(4))));	  	non-compiled	[CE]  not  a  statement	21	None	add
122	[BUG]  [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev);  [CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  double  standardDeviation  =  Math.pow(10,  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	double  standardDeviation  =  Math.pow(10,  dev);	      double    standardDeviation    =    Math.sqrt(dev);    	non-compiled	[CE]  exception  MaxIterationsExceededException  is  never  thrown  in  body  of  corresponding  try  statement	19	None	replace
123	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));  [CE]  ')'  expected  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0))));  return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));  [BUGGY]    (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	return    0.5    *    (1.0    +    Erf.erf((    dev)/    (x    *    FastMath.sqrt(2.0))));    return  0.5  *  (1.0  +  Erf.erf((  dev)/  (x  *  FastMath.sqrt(2.0)));	  timeout    	non-compiled	[CE]  ')'  expected	26	None	add
124	[BUG]  [BUGGY]  (dev  *  SQRT2PI),  dev);  [CE]  not  a  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (dev  *  SQRT2PI),  dev);  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(dev  *  SQRT2PI),  dev);	      (dev    *    SQRT2PI));    	non-compiled	[CE]  not  a  statement	12	None	replace
125	[BUG]  [BUGGY]  (standardDeviation  *  FastMath.sqrt(d)));  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {  final  double  dev  =  x  -  mean;  try  {    [BUGGY]  (standardDeviation  *  FastMath.sqrt(d)));  [BUGGY]    return  0.5  *  (1.0  +  Erf.erf((dev)  /      (standardDeviation  *  FastMath.sqrt(2.0))));  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  }  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	(standardDeviation  *  FastMath.sqrt(d)));	      (standardDeviation    *    FastMath.sqrt(x)));    	non-compiled	[CE]  not  a  statement	25	None	replace
