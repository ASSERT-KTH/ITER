bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final double dev = x - mean; [FE] ConvergenceException [CONTEXT] public double cumulativeProbability(double x) throws MathException { [BUGGY] final double dev = x - mean; [BUGGY] try { return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0)))); } catch (MaxIterationsExceededException ex) { if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 return 0; } else if (x > (mean + 20 * standardDeviation)) { return 1; } else { throw ex; [CLASS] NormalDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] MaxIterationsExceededException ex boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI dev inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation x x0 x1 long serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	
2	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] public double cumulativeProbability(double x) throws MathException { [BUGGY] [BUGGY] final double dev = x - mean; try { return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0)))); } catch (MaxIterationsExceededException ex) { if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 return 0; } else if (x > (mean + 20 * standardDeviation)) { return 1; } else { throw ex; [CLASS] NormalDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] MaxIterationsExceededException ex boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI dev inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation x x0 x1 long serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	
3	[BUG] [BUGGY] return 0.5 * (1.0 + Erf.erf((dev) /  (standardDeviation * FastMath.sqrt(2.0)))); [FE] ConvergenceException [CONTEXT] public double cumulativeProbability(double x) throws MathException { final double dev = x - mean; try { [BUGGY] return 0.5 * (1.0 + Erf.erf((dev) /     (standardDeviation * FastMath.sqrt(2.0)))); [BUGGY] (standardDeviation * FastMath.sqrt(2.0)))); } catch (MaxIterationsExceededException ex) { if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 return 0; } else if (x > (mean + 20 * standardDeviation)) { return 1; } else { throw ex; } } [CLASS] NormalDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] MaxIterationsExceededException ex boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI dev inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation x x0 x1 long serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	replace	
4	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] public double cumulativeProbability(double x) throws MathException { final double dev = x - mean; try { [BUGGY] [BUGGY] return 0.5 * (1.0 + Erf.erf((dev) /     (standardDeviation * FastMath.sqrt(2.0)))); (standardDeviation * FastMath.sqrt(2.0)))); } catch (MaxIterationsExceededException ex) { if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 return 0; } else if (x > (mean + 20 * standardDeviation)) { return 1; } else { throw ex; } } [CLASS] NormalDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] MaxIterationsExceededException ex boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI dev inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation x x0 x1 long serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	127	128	1	add	
5	[BUG] [BUGGY] this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd){ [BUGGY] this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double)  double mean double sd [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	60	60	1	replace	
6	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd){ [BUGGY] [BUGGY] this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double)  double mean double sd [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	60	60	1	add	
7	[BUG] [BUGGY] } [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd){ this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] } [BUGGY]  [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double)  double mean double sd [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	61	61	1	replace	
8	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd){ this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] [BUGGY] } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double)  double mean double sd [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	61	61	1	add	
9	[BUG] [BUGGY] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { [FE] ConvergenceException [CONTEXT] [BUGGY] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { [BUGGY] if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	
10	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] [BUGGY] [BUGGY] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	add	
11	[BUG] [BUGGY] if (sd <= 0) { [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { [BUGGY] if (sd <= 0) { [BUGGY] throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	
12	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { [BUGGY] [BUGGY] if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	
13	[BUG] [BUGGY] this.mean = mean; [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } [BUGGY] this.mean = mean; [BUGGY] standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	
14	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } [BUGGY] [BUGGY] this.mean = mean; standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	
15	[BUG] [BUGGY] standardDeviation = sd; [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; [BUGGY] standardDeviation = sd; [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	
16	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; [BUGGY] [BUGGY] standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	add	
17	[BUG] [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; [BUGGY] } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	
18	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; [BUGGY] [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	add	
19	[BUG] [BUGGY] } [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; [BUGGY] } [BUGGY]  [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	
20	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; [BUGGY] [BUGGY] } [CLASS] NormalDistributionImpl [METHOD] <init> [RETURN_TYPE] NormalDistributionImpl(double,double,double)  double mean double sd double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY SQRT2PI inverseCumAccuracy mean sd solverAbsoluteAccuracy standardDeviation long serialVersionUID boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	add	
21	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] private static final long serialVersionUID = 8589540077390120676L; [CLASS] NormalDistributionImpl  [VARIABLES] 	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	45	45	1	replace	
22	[BUG] [BUGGY] [FE] ConvergenceException [CONTEXT] private static final long serialVersionUID = 8589540077390120676L; [CLASS] NormalDistributionImpl  [VARIABLES] 	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	45	45	1	add	
