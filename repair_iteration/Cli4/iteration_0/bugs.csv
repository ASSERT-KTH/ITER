bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
2	[BUG] [BUGGY] return parse(options, arguments, null, false); [FE] ComparisonFailure [CONTEXT] public CommandLine parse(Options options, String[] arguments) throws ParseException { [BUGGY] return parse(options, arguments, null, false); [BUGGY] } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments [VARIABLES] Options options opts CommandLine cmd List requiredOptions String[] arguments boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	
3	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public CommandLine parse(Options options, String[] arguments) throws ParseException { [BUGGY] [BUGGY] return parse(options, arguments, null, false); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments [VARIABLES] Options options opts CommandLine cmd List requiredOptions String[] arguments boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	add	
4	[BUG] [BUGGY] this.options = options; [FE] ComparisonFailure [CONTEXT] {  [BUGGY] this.options = options; [BUGGY]   for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	
5	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] {  [BUGGY] [BUGGY] this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	add	
6	[BUG] [BUGGY] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { [FE] ComparisonFailure [CONTEXT] {  this.options = options;  [BUGGY] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { [BUGGY] Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	
7	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] {  this.options = options;  [BUGGY] [BUGGY] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	
8	[BUG] [BUGGY] Option opt = (Option) it.next(); [FE] ComparisonFailure [CONTEXT] {  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { [BUGGY] Option opt = (Option) it.next(); [BUGGY] opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	
9	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] {  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { [BUGGY] [BUGGY] Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	add	
10	[BUG] [BUGGY] opt.clearValues(); [FE] ComparisonFailure [CONTEXT] {  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); [BUGGY] opt.clearValues(); [BUGGY] } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	
11	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] {  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); [BUGGY] [BUGGY] opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	
12	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] {  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); [BUGGY] } [BUGGY]  requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	
13	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] {  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); [BUGGY] [BUGGY] } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	add	
14	[BUG] [BUGGY] requiredOptions = options.getRequiredOptions(); [FE] ComparisonFailure [CONTEXT] {  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } [BUGGY] requiredOptions = options.getRequiredOptions(); [BUGGY] cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	
15	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] {  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } [BUGGY] [BUGGY] requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	add	
16	[BUG] [BUGGY] cmd = new CommandLine(); [FE] ComparisonFailure [CONTEXT]  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); [BUGGY] cmd = new CommandLine(); [BUGGY]  boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	
17	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  this.options = options;  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); [BUGGY] [BUGGY] cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	add	
18	[BUG] [BUGGY] boolean eatTheRest = false; [FE] ComparisonFailure [CONTEXT]  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); [BUGGY] boolean eatTheRest = false; [BUGGY]  if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption));  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	
19	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); [BUGGY] [BUGGY] boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption));  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	add	
20	[BUG] [BUGGY] if (arguments == null) { [FE] ComparisonFailure [CONTEXT] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; [BUGGY] if (arguments == null)  { [BUGGY] { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	
21	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; [BUGGY] [BUGGY] if (arguments == null)  { { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	
22	[BUG] [BUGGY] List tokenList = Arrays.asList(flatten(this.options,   arguments,      stopAtNonOption)); [FE] ComparisonFailure [CONTEXT] requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } [BUGGY] List tokenList = Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption)); [BUGGY] arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	
23	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } [BUGGY] [BUGGY] List tokenList = Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption)); arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	
24	[BUG] [BUGGY] ListIterator iterator = tokenList.listIterator(); [FE] ComparisonFailure [CONTEXT] if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); [BUGGY] ListIterator iterator = tokenList.listIterator(); [BUGGY]   while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	157	157	2	replace	
25	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); [BUGGY] [BUGGY] ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	157	157	2	add	
26	[BUG] [BUGGY] while (iterator.hasNext()) { [FE] ComparisonFailure [CONTEXT] arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [BUGGY] while (iterator.hasNext())  { [BUGGY] { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; }   [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	
27	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [BUGGY] [BUGGY] while (iterator.hasNext())  { { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; }   [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	add	
28	[BUG] [BUGGY] processProperties(properties); [FE] ComparisonFailure [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } [BUGGY] processProperties(properties); [BUGGY] checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	224	224	2	replace	
29	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } [BUGGY] [BUGGY] processProperties(properties); checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	224	224	2	add	
30	[BUG] [BUGGY] checkRequiredOptions(); [FE] ComparisonFailure [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); [BUGGY] checkRequiredOptions(); [BUGGY]  return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	
31	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); [BUGGY] [BUGGY] checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	
32	[BUG] [BUGGY] if (properties == null) { [FE] ComparisonFailure [CONTEXT] { [BUGGY] if (properties == null)  { [BUGGY] { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	238	239	2	replace	
33	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { [BUGGY] [BUGGY] if (properties == null)  { { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	238	239	2	add	
34	[BUG] [BUGGY] return; [FE] ComparisonFailure [CONTEXT] { if (properties == null) { [BUGGY] return; [BUGGY] } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = options.getOption(option);  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	
35	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { if (properties == null) { [BUGGY] [BUGGY] return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = options.getOption(option);  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	
36	[BUG] [BUGGY] if (requiredOptions.size() > 0) { [FE] ComparisonFailure [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {   [BUGGY] if (requiredOptions.size() > 0)  { [BUGGY] { Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer();   while (iter.hasNext()) { buff.append(iter.next()); } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	295	296	2	replace	
37	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {   [BUGGY] [BUGGY] if (requiredOptions.size() > 0)  { { Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer();   while (iter.hasNext()) { buff.append(iter.next()); } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	295	296	2	add	
38	[BUG] [BUGGY] Iterator iter = requiredOptions.iterator(); [FE] ComparisonFailure [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {   if (requiredOptions.size() > 0) { [BUGGY] Iterator iter = requiredOptions.iterator(); [BUGGY] StringBuffer buff = new StringBuffer();   while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	297	297	2	replace	
39	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {   if (requiredOptions.size() > 0) { [BUGGY] [BUGGY] Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer();   while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	297	297	2	add	
40	[BUG] [BUGGY] StringBuffer buff = new StringBuffer(); [FE] ComparisonFailure [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {   if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); [BUGGY] StringBuffer buff = new StringBuffer(); [BUGGY]   while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	298	298	2	replace	
41	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {   if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); [BUGGY] [BUGGY] StringBuffer buff = new StringBuffer();   while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	298	298	2	add	
42	[BUG] [BUGGY] while (iter.hasNext()) { [FE] ComparisonFailure [CONTEXT] {   if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer();   [BUGGY] while (iter.hasNext())   { [BUGGY] { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	302	303	2	replace	
43	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] {   if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer();   [BUGGY] [BUGGY] while (iter.hasNext())   { { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	302	303	2	add	
44	[BUG] [BUGGY] buff.append(iter.next()); [FE] ComparisonFailure [CONTEXT]  if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer();   while (iter.hasNext()) { [BUGGY] buff.append(iter.next()); [BUGGY] } throw new MissingOptionException(buff.toString()); } } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	304	304	2	replace	
45	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer();   while (iter.hasNext()) { [BUGGY] [BUGGY] buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	304	304	2	add	
46	[BUG] [BUGGY] throw new MissingOptionException(buff.toString()); [FE] ComparisonFailure [CONTEXT] Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer();   while (iter.hasNext()) { buff.append(iter.next()); } [BUGGY] throw new MissingOptionException(buff.toString()); [BUGGY] } } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	307	307	2	replace	
47	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] Iterator iter = requiredOptions.iterator(); StringBuffer buff = new StringBuffer();   while (iter.hasNext()) { buff.append(iter.next()); } [BUGGY] [BUGGY] throw new MissingOptionException(buff.toString()); } } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Iterator iter Options options opts CommandLine cmd List requiredOptions tokenList StringBuffer buff boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	307	307	2	add	
