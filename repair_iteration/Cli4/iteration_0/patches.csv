bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
1	[BUG]  [BUGGY]  if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None
2	[BUG]  [BUGGY]  if(opt.hasArgs())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt.hasArgs())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt.hasArgs())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None
3	[BUG]  [BUGGY]  if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None
4	[BUG]  [BUGGY]  if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(stopAtNonOption)  {  arguments  =  new  String[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(stopAtNonOption)  {  arguments  =  new  String[0];  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(stopAtNonOption)  {  arguments  =  new  String[0];  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	12	None
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	add	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	19	2
12	[BUG]  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	19	2
12	[BUG]  [BUGGY]    Arrays.asList(this.options,  arguments,  stopAtNonOption));  [CE]  ';'  expected  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Arrays.asList(this.options,  arguments,  stopAtNonOption));  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Arrays.asList(this.options,  arguments,  stopAtNonOption));		non-compiled	[CE]  ';'  expected	19	None
13	[BUG]  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.addAll(cmd);  [CE]  no  suitable  method  found  for  addAll(CommandLine)  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.addAll(cmd);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.addAll(cmd);		non-compiled	[CE]  no  suitable  method  found  for  addAll(CommandLine)	19	None
14	[BUG]  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.add(opt);  [CE]  cannot  find  symbol  opt  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.add(opt);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.add(opt);		non-compiled	[CE]  cannot  find  symbol  opt	19	None
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.add(cmd);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	add	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.add(cmd);		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	19	2
16	[BUG]  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.add(cmd);  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.add(cmd);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.add(cmd);		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	19	2
21	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }		non-compiled	[CE]  illegal  start  of  expression	17	None
22	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  }  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  }  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  }  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }		non-compiled	[CE]  illegal  start  of  expression	17	None
23	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }		non-compiled	[CE]  illegal  start  of  expression	17	None
24	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    if(stopAtNonOption)  {  requiredOptions.remove(0);  }  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	add	    if(stopAtNonOption)  {  requiredOptions.remove(0);  }  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	17	2
25	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions.remove(0);  }  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    if(stopAtNonOption)  {  requiredOptions.remove(0);  }  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    if(stopAtNonOption)  {  requiredOptions.remove(0);  }  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	17	2
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  }  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	add	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  }  if(arguments  ==  null)  {  arguments  =  new  String[0];  }		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	17	2
26	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  }  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  }  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  }  if(arguments  ==  null)  {  arguments  =  new  String[0];  }		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	17	2
31	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	7	None
32	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  cmd  =  new  CommandLine();  }		non-compiled	[CE]  illegal  start  of  expression	7	None
33	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null  ||  arguments.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null  ||  arguments.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null  ||  arguments.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	7	None
34	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  cmd.addValue(true);  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  cmd.addValue(true);  }  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  cmd.addValue(true);  }		non-compiled	[CE]  illegal  start  of  expression	7	None
35	[BUG]  [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null  ||  arguments.length  >  0)  {  cmd  =  new  CommandLine();  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null  ||  arguments.length  >  0)  {  cmd  =  new  CommandLine();  }  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    if(stopAtNonOption)  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null  ||  arguments.length  >  0)  {  cmd  =  new  CommandLine();  }		non-compiled	[CE]  illegal  start  of  expression	7	None
42	[BUG]  [BUGGY]  this.options  =  options.getOptions();  [CE]  incompatible  types  [CONTEXT]  {    [BUGGY]  this.options  =  options.getOptions();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	this.options  =  options.getOptions();	this.options  =  options;  	non-compiled	[CE]  incompatible  types	4	None
43	[BUG]  [BUGGY]  this.options  =  options.next();  [CE]  cannot  find  symbol  [CONTEXT]  {    [BUGGY]  this.options  =  options.next();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	this.options  =  options.next();	this.options  =  options;  	non-compiled	[CE]  cannot  find  symbol	4	None
44	[BUG]  [BUGGY]  this.options  =  options.iterator();  [CE]  cannot  find  symbol  [CONTEXT]  {    [BUGGY]  this.options  =  options.iterator();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	this.options  =  options.iterator();	this.options  =  options;  	non-compiled	[CE]  cannot  find  symbol	4	None
45	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]  {    [BUGGY]    [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	add	  	this.options  =  options;  	compilable	  [FE]  ComparisonFailure  testMissingOptionsException	4	2
46	[BUG]  [BUGGY]    [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]  {    [BUGGY]    [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	  	this.options  =  options;  	compilable	  [FE]  ComparisonFailure  testMissingOptionsException	4	2
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	21	2
52	[BUG]  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	21	2
52	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  it.hasNext();  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    boolean  stopAtNonOption  =  it.hasNext();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    boolean  stopAtNonOption  =  it.hasNext();		non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions  =  options.getRequiredOptions();		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	21	2
54	[BUG]  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions  =  options.getRequiredOptions();  [FE]  ComparisonFailure  testMissingOptionsException  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions  =  options.getRequiredOptions();		compilable	  [FE]  ComparisonFailure  testMissingOptionsException	21	2
54	[BUG]  [BUGGY]    String  str  =(String)it.next();  [CE]  cannot  find  symbol  it  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    String  str  =(String)it.next();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    String  str  =(String)it.next();		non-compiled	[CE]  cannot  find  symbol  it	21	None
55	[BUG]  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.addAll(opt);  [CE]  cannot  find  symbol  opt  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.addAll(opt);  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  requiredOptions.addAll(opt);		non-compiled	[CE]  cannot  find  symbol  opt	21	None
62	[BUG]  [BUGGY]  requiredOptions  =  this.options.getRequiredOptions();  [CE]  cannot  find  symbol  opt  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]  requiredOptions  =  this.options.getRequiredOptions();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  this.options.getRequiredOptions();	requiredOptions  =  options.getRequiredOptions();  	non-compiled	[CE]  cannot  find  symbol  opt	14	None
63	[BUG]  [BUGGY]  requiredOptions  =  options.getDefaultOptions();  [CE]  cannot  find  symbol  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]  requiredOptions  =  options.getDefaultOptions();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  options.getDefaultOptions();	requiredOptions  =  options.getRequiredOptions();  	non-compiled	[CE]  cannot  find  symbol	14	None
64	[BUG]  [BUGGY]  requiredOptions  =  options.getDeclaredOptions();  [CE]  cannot  find  symbol  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]  requiredOptions  =  options.getDeclaredOptions();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  options.getDeclaredOptions();	requiredOptions  =  options.getRequiredOptions();  	non-compiled	[CE]  cannot  find  symbol	14	None
65	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  opt  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	  	requiredOptions  =  options.getRequiredOptions();  	non-compiled	[CE]  cannot  find  symbol  opt	14	None
73	[BUG]  [BUGGY]  Option  opt  =(Option)iterator.next();  [CE]  cannot  find  symbol  iterator  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =(Option)iterator.next();  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =(Option)iterator.next();	Option  opt  =  (Option)  it.next();  	non-compiled	[CE]  cannot  find  symbol  iterator	8	None
74	[BUG]  [BUGGY]  Opt  =(Option)it.next();  [CE]  cannot  find  symbol  Opt  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]  Opt  =(Option)it.next();  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Opt  =(Option)it.next();	Option  opt  =  (Option)  it.next();  	non-compiled	[CE]  cannot  find  symbol  Opt	8	None
75	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  opt  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	  	Option  opt  =  (Option)  it.next();  	non-compiled	[CE]  cannot  find  symbol  opt	8	None
81	[BUG]  [BUGGY]    String  str  =(String)it.next();  [CE]  cannot  find  symbol  opt  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    String  str  =(String)it.next();  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	    String  str  =(String)it.next();		non-compiled	[CE]  cannot  find  symbol  opt	9	None
82	[BUG]  [BUGGY]    String  str  t  =(String)it.next();  [CE]  ';'  expected  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    String  str  t  =(String)it.next();  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	    String  str  t  =(String)it.next();		non-compiled	[CE]  ';'  expected	9	None
83	[BUG]  [BUGGY]    String  str  =(String)it.next();  it.hasNext();  [CE]  cannot  find  symbol  opt  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    String  str  =(String)it.next();  it.hasNext();  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	    String  str  =(String)it.next();  it.hasNext();		non-compiled	[CE]  cannot  find  symbol  opt	9	None
84	[BUG]  [BUGGY]    String  str  =(String[])it.next();  [CE]  incompatible  types  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    String  str  =(String[])it.next();  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	    String  str  =(String[])it.next();		non-compiled	[CE]  incompatible  types	9	None
85	[BUG]  [BUGGY]    String  str  =(String)iterator.next();  [CE]  cannot  find  symbol  iterator  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    String  str  =(String)iterator.next();  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	    String  str  =(String)iterator.next();		non-compiled	[CE]  cannot  find  symbol  iterator	9	None
91	[BUG]  [BUGGY]    String  str  =(String)it.next();  [CE]  cannot  find  symbol  it  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    String  str  =(String)it.next();  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    String  str  =(String)it.next();		non-compiled	[CE]  cannot  find  symbol  it	15	None
92	[BUG]  [BUGGY]    String  str  =(String)it.next();  if(str  ==  null)  {  arguments  =  new  String[0];  }  [CE]  cannot  find  symbol  it  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    String  str  =(String)it.next();  if(str  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    String  str  =(String)it.next();  if(str  ==  null)  {  arguments  =  new  String[0];  }		non-compiled	[CE]  cannot  find  symbol  it	15	None
93	[BUG]  [BUGGY]    String  str  =(String)it.next();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [CE]  cannot  find  symbol  it  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    String  str  =(String)it.next();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    String  str  =(String)it.next();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }		non-compiled	[CE]  cannot  find  symbol  it	15	None
94	[BUG]  [BUGGY]    String  str  =(String)iterator.next();  if(str  ==  null)  {  arguments  =  new  String[0];  }  [CE]  cannot  find  symbol  iterator  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    String  str  =(String)iterator.next();  if(str  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    String  str  =(String)iterator.next();  if(str  ==  null)  {  arguments  =  new  String[0];  }		non-compiled	[CE]  cannot  find  symbol  iterator	15	None
95	[BUG]  [BUGGY]    String  str  =(String)iterator.next();  if(str!=  null)  {  arguments  =  new  String[0];  }  [CE]  cannot  find  symbol  iterator  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    String  str  =(String)iterator.next();  if(str!=  null)  {  arguments  =  new  String[0];  }  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    String  str  =(String)iterator.next();  if(str!=  null)  {  arguments  =  new  String[0];  }		non-compiled	[CE]  cannot  find  symbol  iterator	15	None
102	[BUG]  [BUGGY]  cmd  =  new  CommandLine(this.options);  [CE]  cannot  find  symbol  iterator  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  cmd  =  new  CommandLine(this.options);  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(this.options);	cmd  =  new  CommandLine();  	non-compiled	[CE]  cannot  find  symbol  iterator	16	None
103	[BUG]  [BUGGY]  cmd  =  new  CommandLine(this.options,  requiredOptions);  [CE]  cannot  find  symbol  iterator  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  cmd  =  new  CommandLine(this.options,  requiredOptions);  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(this.options,  requiredOptions);	cmd  =  new  CommandLine();  	non-compiled	[CE]  cannot  find  symbol  iterator	16	None
104	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt.getValues());  [CE]  cannot  find  symbol  iterator  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  cmd  =  new  CommandLine(opt.getValues());  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt.getValues());	cmd  =  new  CommandLine();  	non-compiled	[CE]  cannot  find  symbol  iterator	16	None
111	[BUG]  [BUGGY]    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }		non-compiled	[CE]  illegal  start  of  expression	13	None
112	[BUG]  [BUGGY]    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  str  =  new  String[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  str  =  new  String[0];  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  str  =  new  String[0];  }		non-compiled	[CE]  illegal  start  of  expression	13	None
113	[BUG]  [BUGGY]    while(opt.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    while(opt.hasNext())  {  cmd.addArg(t);  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    while(opt.hasNext())  {  cmd.addArg(t);		non-compiled	[CE]  illegal  start  of  expression	13	None
114	[BUG]  [BUGGY]    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	13	None
115	[BUG]  [BUGGY]    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt.hasArg())  {  cmd  =  new  CommandLine();  if(arguments  ==  null)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	13	None
121	[BUG]  [BUGGY]    cmd.parse(options,  arguments);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments);  [BUGGY]  return  parse(options,  arguments,  null,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	    cmd.parse(options,  arguments);		non-compiled	[CE]  cannot  find  symbol	3	None
122	[BUG]  [BUGGY]    cmd.parse(options,  arguments);  requiredOptions.remove(arguments);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments);  requiredOptions.remove(arguments);  [BUGGY]  return  parse(options,  arguments,  null,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	    cmd.parse(options,  arguments);  requiredOptions.remove(arguments);		non-compiled	[CE]  cannot  find  symbol	3	None
123	[BUG]  [BUGGY]    cmd.parse(options,  arguments);  requiredOptions.clear();  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments);  requiredOptions.clear();  [BUGGY]  return  parse(options,  arguments,  null,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	    cmd.parse(options,  arguments);  requiredOptions.clear();		non-compiled	[CE]  cannot  find  symbol	3	None
124	[BUG]  [BUGGY]    requiredOptions.remove(options);  [CE]  cannot  find  symbol  iterator  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]    requiredOptions.remove(options);  [BUGGY]  return  parse(options,  arguments,  null,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	    requiredOptions.remove(options);		non-compiled	[CE]  cannot  find  symbol  iterator	3	None
125	[BUG]  [BUGGY]    cmd.parse(options);  requiredOptions.remove(arguments);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]    cmd.parse(options);  requiredOptions.remove(arguments);  [BUGGY]  return  parse(options,  arguments,  null,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	    cmd.parse(options);  requiredOptions.remove(arguments);		non-compiled	[CE]  cannot  find  symbol	3	None
131	[BUG]  [BUGGY]  opt.addValue(value);  [CE]  cannot  find  symbol  value  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]  opt.addValue(value);  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(value);	opt.clearValues();  	non-compiled	[CE]  cannot  find  symbol  value	10	None
132	[BUG]  [BUGGY]  opt.addValue(true);  [CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]  opt.addValue(true);  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(true);	opt.clearValues();  	non-compiled	[CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;	10	None
133	[BUG]  [BUGGY]  opt.addValue(false);  [CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]  opt.addValue(false);  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(false);	opt.clearValues();  	non-compiled	[CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;	10	None
134	[BUG]  [BUGGY]  opt.addValue(String[0]);  [CE]  cannot  find  symbol  String  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]  opt.addValue(String[0]);  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(String[0]);	opt.clearValues();  	non-compiled	[CE]  cannot  find  symbol  String	10	None
135	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  iterator  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	  	opt.clearValues();  	non-compiled	[CE]  cannot  find  symbol  iterator	10	None
141	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  cannot  find  symbol	6	None
142	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  iterator  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  cannot  find  symbol  iterator	6	None
143	[BUG]  [BUGGY]  for(Iterator  it  =  options.next().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.next().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.next().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  cannot  find  symbol	6	None
151	[BUG]  [BUGGY]    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }		non-compiled	[CE]  illegal  start  of  expression	11	None
152	[BUG]  [BUGGY]    if(opt.hasArgs())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.hasArgs())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.hasArgs())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  arguments  =  new  String[0];  }		non-compiled	[CE]  illegal  start  of  expression	11	None
153	[BUG]  [BUGGY]    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  str  =  new  String[0];  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  str  =  new  String[0];  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  str  =  new  String[0];  }		non-compiled	[CE]  illegal  start  of  expression	11	None
154	[BUG]  [BUGGY]    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  if(arguments  ==  null)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	11	None
155	[BUG]  [BUGGY]    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  arguments[0]  =  null;  }  [CE]  cannot  find  symbol  iterator  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  arguments[0]  =  null;  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.hasArg())  {  requiredOptions  =  options.getRequiredOptions();  arguments[0]  =  null;  }		non-compiled	[CE]  cannot  find  symbol  iterator	11	None
161	[BUG]  [BUGGY]  boolean  eatTheRest  =  true;  [CE]  cannot  find  symbol  iterator  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]  boolean  eatTheRest  =  true;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eatTheRest  =  true;	boolean  eatTheRest  =  false;  	non-compiled	[CE]  cannot  find  symbol  iterator	18	None
162	[BUG]  [BUGGY]  boolean  eatTheRest  =  stopAtNonOption;  [CE]  cannot  find  symbol  iterator  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]  boolean  eatTheRest  =  stopAtNonOption;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eatTheRest  =  stopAtNonOption;	boolean  eatTheRest  =  false;  	non-compiled	[CE]  cannot  find  symbol  iterator	18	None
164	[BUG]  [BUGGY]  boolean  eattheRest  =  true;  [CE]  cannot  find  symbol  iterator  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]  boolean  eattheRest  =  true;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eattheRest  =  true;	boolean  eatTheRest  =  false;  	non-compiled	[CE]  cannot  find  symbol  iterator	18	None
171	[BUG]  [BUGGY]  return  parse(options,  arguments,  null,  true);  [CE]  cannot  find  symbol  iterator  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  null,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	return  parse(options,  arguments,  null,  true);	return  parse(options,  arguments,  null,  false);  	non-compiled	[CE]  cannot  find  symbol  iterator	2	None
173	[BUG]  [BUGGY]  return  parseOptions(options,  arguments,  null,  true);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]  return  parseOptions(options,  arguments,  null,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	return  parseOptions(options,  arguments,  null,  true);	return  parse(options,  arguments,  null,  false);  	non-compiled	[CE]  cannot  find  symbol	2	None
174	[BUG]  [BUGGY]  return  parseOptions(options,  arguments,  null,  false);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]  return  parseOptions(options,  arguments,  null,  false);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	return  parseOptions(options,  arguments,  null,  false);	return  parse(options,  arguments,  null,  false);  	non-compiled	[CE]  cannot  find  symbol	2	None
181	[BUG]  [BUGGY]    cmd.addArg(t);  [CE]  cannot  find  symbol  t  [CONTEXT]  {    [BUGGY]    cmd.addArg(t);  [BUGGY]  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	    cmd.addArg(t);		non-compiled	[CE]  cannot  find  symbol  t	5	None
182	[BUG]  [BUGGY]    cmd.addArg(String[]);  [CE]  '.class'  expected  [CONTEXT]  {    [BUGGY]    cmd.addArg(String[]);  [BUGGY]  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	    cmd.addArg(String[]);		non-compiled	[CE]  '.class'  expected	5	None
183	[BUG]  [BUGGY]    cmd.addArg(str);  [CE]  '.class'  expected  [CONTEXT]  {    [BUGGY]    cmd.addArg(str);  [BUGGY]  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	    cmd.addArg(str);		non-compiled	[CE]  '.class'  expected	5	None
184	[BUG]  [BUGGY]    cmd.addArg(String[]));  [CE]  '.class'  expected  [CONTEXT]  {    [BUGGY]    cmd.addArg(String[]));  [BUGGY]  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	    cmd.addArg(String[]));		non-compiled	[CE]  '.class'  expected	5	None
185	[BUG]  [BUGGY]    cmd.addArg(String[]  t);  [CE]  '.class'  expected  [CONTEXT]  {    [BUGGY]    cmd.addArg(String[]  t);  [BUGGY]  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	    cmd.addArg(String[]  t);		non-compiled	[CE]  '.class'  expected	5	None
192	[BUG]  [BUGGY]  if(arguments  ==  null  ||  eatTheRest)  {  [CE]  illegal  start  of  expression  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]  if(arguments  ==  null  ||  eatTheRest)  {  [BUGGY]  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  eatTheRest)  {	if  (arguments  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	20	None
193	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  expression  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  0)  {  [BUGGY]  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  >  0)  {	if  (arguments  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	20	None
194	[BUG]  [BUGGY]  if(arguments  ==  null  ||!arguments.isEmpty())  {  [CE]  illegal  start  of  expression  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]  if(arguments  ==  null  ||!arguments.isEmpty())  {  [BUGGY]  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||!arguments.isEmpty())  {	if  (arguments  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	20	None
2	[BUG]  [BUGGY]  this.options  =  Options.WRITE_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL  [CE]  ';'  expected  [CONTEXT]  {    [BUGGY]  this.options  =  Options.WRITE_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	this.options  =  Options.WRITE_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL	this.options  =  options;  	non-compiled	[CE]  ';'  expected	4	None
3	[BUG]  [BUGGY]  this.options  =  Options.WRITE_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPT  [CE]  ';'  expected  [CONTEXT]  {    [BUGGY]  this.options  =  Options.WRITE_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPT  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	this.options  =  Options.WRITE_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPT	this.options  =  options;  	non-compiled	[CE]  ';'  expected	4	None
4	[BUG]  [BUGGY]  this.options  =  Options.WRITE_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPT  [CE]  ';'  expected  [CONTEXT]  {    [BUGGY]  this.options  =  Options.WRITE_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPT  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	this.options  =  Options.WRITE_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPTIONAL_OPT	this.options  =  options;  	non-compiled	[CE]  ';'  expected	4	None
23	[BUG]  [BUGGY]  return  parse(options,  arguments,  this,  null,  false);  [CE]  no  suitable  method  found  for  parse(Options,String[],Parser,<null>,boolean)  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  this,  null,  false);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	return  parse(options,  arguments,  this,  null,  false);	return  parse(options,  arguments,  null,  false);  	non-compiled	[CE]  no  suitable  method  found  for  parse(Options,String[],Parser,<null>,boolean)	2	None
24	[BUG]  [BUGGY]  return  parse(options,  arguments,  true);  [CE]  cannot  find  symbol  iterator  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	return  parse(options,  arguments,  true);	return  parse(options,  arguments,  null,  false);  	non-compiled	[CE]  cannot  find  symbol  iterator	2	None
41	[BUG]  [BUGGY]  if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None
42	[BUG]  [BUGGY]  while(opt.hasArg())  {  cmd.addArg(t);  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  while(opt.hasArg())  {  cmd.addArg(t);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	while(opt.hasArg())  {  cmd.addArg(t);	}  	non-compiled	[CE]  illegal  start  of  expression	12	None
43	[BUG]  [BUGGY]  if(opt.hasArg())  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt.hasArg())  {  return  null;  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt.hasArg())  {  return  null;  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None
44	[BUG]  [BUGGY]  it.remove();  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  it.remove();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	it.remove();	}  	non-compiled	[CE]  illegal  start  of  expression	12	None
63	[BUG]  [BUGGY]    if(opt.hasArg())  {  cmd.addArg(t);  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt.hasArg())  {  cmd.addArg(t);  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt.hasArg())  {  cmd.addArg(t);  }		non-compiled	[CE]  illegal  start  of  expression	13	None
65	[BUG]  [BUGGY]    if(opt.hasArg())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt.hasArg())  {  throw  new  RuntimeException( " ");  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt.hasArg())  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	13	None
82	[BUG]  [BUGGY]  final  boolean  eatTheRest  =  true;  [CE]  illegal  start  of  expression  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]  final  boolean  eatTheRest  =  true;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	final  boolean  eatTheRest  =  true;	boolean  eatTheRest  =  false;  	non-compiled	[CE]  illegal  start  of  expression	18	None
102	[BUG]  [BUGGY]    Arrays.sort(this.arguments);  [CE]  illegal  start  of  expression  [CONTEXT]  {    [BUGGY]    Arrays.sort(this.arguments);  [BUGGY]  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	    Arrays.sort(this.arguments);		non-compiled	[CE]  illegal  start  of  expression	5	None
103	[BUG]  [BUGGY]    if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {    [BUGGY]    if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	    if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	5	None
104	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  options.hasArg();  [CE]  illegal  start  of  expression  [CONTEXT]  {    [BUGGY]    boolean  stopAtNonOption  =  options.hasArg();  [BUGGY]  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	    boolean  stopAtNonOption  =  options.hasArg();		non-compiled	[CE]  illegal  start  of  expression	5	None
105	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  option.hasArg();  [CE]  illegal  start  of  expression  [CONTEXT]  {    [BUGGY]    boolean  stopAtNonOption  =  option.hasArg();  [BUGGY]  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	135	135	2	replace	    boolean  stopAtNonOption  =  option.hasArg();		non-compiled	[CE]  illegal  start  of  expression	5	None
121	[BUG]  [BUGGY]    cmd.addArg(t);  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    cmd.addArg(t);  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    cmd.addArg(t);		non-compiled	[CE]  illegal  start  of  expression	7	None
122	[BUG]  [BUGGY]    Arrays.sort(this.arguments);  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Arrays.sort(this.arguments);  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Arrays.sort(this.arguments);		non-compiled	[CE]  illegal  start  of  expression	7	None
123	[BUG]  [BUGGY]    Arrays.sort(this.options);  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Arrays.sort(this.options);  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Arrays.sort(this.options);		non-compiled	[CE]  illegal  start  of  expression	7	None
124	[BUG]  [BUGGY]    Arrays.sort(this.args);  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Arrays.sort(this.args);  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Arrays.sort(this.args);		non-compiled	[CE]  illegal  start  of  expression	7	None
125	[BUG]  [BUGGY]    Arrays.sort(options);  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Arrays.sort(options);  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Arrays.sort(options);		non-compiled	[CE]  illegal  start  of  expression	7	None
143	[BUG]  [BUGGY]  cmd  =  new  CommandLine(this.opt);  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  cmd  =  new  CommandLine(this.opt);  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(this.opt);	cmd  =  new  CommandLine();  	non-compiled	[CE]  illegal  start  of  expression	16	None
144	[BUG]  [BUGGY]  cmd  =  new  CommandLineAttributes();  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  cmd  =  new  CommandLineAttributes();  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLineAttributes();	cmd  =  new  CommandLine();  	non-compiled	[CE]  illegal  start  of  expression	16	None
161	[BUG]  [BUGGY]    Arrays.sort(opt.getKey());  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    Arrays.sort(opt.getKey());  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    Arrays.sort(opt.getKey());		non-compiled	[CE]  illegal  start  of  expression	15	None
162	[BUG]  [BUGGY]    cmd.addArg(t);  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    cmd.addArg(t);  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    cmd.addArg(t);		non-compiled	[CE]  illegal  start  of  expression	15	None
163	[BUG]  [BUGGY]    cmd.addArg(opt.getKey());  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    cmd.addArg(opt.getKey());  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    cmd.addArg(opt.getKey());		non-compiled	[CE]  illegal  start  of  expression	15	None
164	[BUG]  [BUGGY]    cmd.addArg(opt);  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    cmd.addArg(opt);  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    cmd.addArg(opt);		non-compiled	[CE]  illegal  start  of  expression	15	None
165	[BUG]  [BUGGY]    arguments  =  opt.getArguments();  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]    arguments  =  opt.getArguments();  [BUGGY]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	    arguments  =  opt.getArguments();		non-compiled	[CE]  illegal  start  of  expression	15	None
183	[BUG]  [BUGGY]  Opt  opt  =(Option)it.next();  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]  Opt  opt  =(Option)it.next();  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Opt  opt  =(Option)it.next();	Option  opt  =  (Option)  it.next();  	non-compiled	[CE]  illegal  start  of  expression	8	None
184	[BUG]  [BUGGY]  Options  opt  =(Option)it.next();  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]  Options  opt  =(Option)it.next();  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Options  opt  =(Option)it.next();	Option  opt  =  (Option)  it.next();  	non-compiled	[CE]  illegal  start  of  expression	8	None
201	[BUG]  [BUGGY]    if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	11	None
202	[BUG]  [BUGGY]    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.length()  ==  0)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.length()  ==  0)  {  cmd.addArg(str);  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.length()  ==  0)  {  cmd.addArg(str);  }		non-compiled	[CE]  illegal  start  of  expression	11	None
203	[BUG]  [BUGGY]    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.length()  ==  0)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.length()  ==  0)  {  continue;  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.length()  ==  0)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	11	None
204	[BUG]  [BUGGY]    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.startsWith( "- "))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.startsWith( "- "))  {  cmd.addArg(t);  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.startsWith( "- "))  {  cmd.addArg(t);  }		non-compiled	[CE]  illegal  start  of  expression	11	None
205	[BUG]  [BUGGY]    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.endsWith( "- "))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.endsWith( "- "))  {  cmd.addArg(t);  }  [BUGGY]  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	    if(opt.getKey()  ==  null)  {  String  str  =  opt.getValue();  if(st.endsWith( "- "))  {  cmd.addArg(t);  }		non-compiled	[CE]  illegal  start  of  expression	11	None
221	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  options.hasArg();  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    boolean  stopAtNonOption  =  options.hasArg();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    boolean  stopAtNonOption  =  options.hasArg();		non-compiled	[CE]  illegal  start  of  expression	17	None
222	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  it.hasNext();  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    boolean  stopAtNonOption  =  it.hasNext();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    boolean  stopAtNonOption  =  it.hasNext();		non-compiled	[CE]  illegal  start  of  expression	17	None
223	[BUG]  [BUGGY]    Arrays.sort(this.options);  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    Arrays.sort(this.options);  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    Arrays.sort(this.options);		non-compiled	[CE]  illegal  start  of  expression	17	None
224	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  option.hasArg();  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    boolean  stopAtNonOption  =  option.hasArg();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    boolean  stopAtNonOption  =  option.hasArg();		non-compiled	[CE]  illegal  start  of  expression	17	None
225	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  options.hasArgs();  [CE]  illegal  start  of  expression  [CONTEXT]    this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    boolean  stopAtNonOption  =  options.hasArgs();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	    boolean  stopAtNonOption  =  options.hasArgs();		non-compiled	[CE]  illegal  start  of  expression	17	None
241	[BUG]  [BUGGY]    requiredOptions.remove(options.getKey());  [CE]  illegal  start  of  expression  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]    requiredOptions.remove(options.getKey());  [BUGGY]  return  parse(options,  arguments,  null,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	    requiredOptions.remove(options.getKey());		non-compiled	[CE]  illegal  start  of  expression	3	None
243	[BUG]  [BUGGY]    requiredOptions.remove(options.getRequiredOptions());  [CE]  illegal  start  of  expression  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]    requiredOptions.remove(options.getRequiredOptions());  [BUGGY]  return  parse(options,  arguments,  null,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	    requiredOptions.remove(options.getRequiredOptions());		non-compiled	[CE]  illegal  start  of  expression	3	None
244	[BUG]  [BUGGY]    requiredOptions.remove(arguments);  [CE]  illegal  start  of  expression  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]    requiredOptions.remove(arguments);  [BUGGY]  return  parse(options,  arguments,  null,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	    requiredOptions.remove(arguments);		non-compiled	[CE]  illegal  start  of  expression	3	None
245	[BUG]  [BUGGY]    requiredOptions.clear();  [CE]  illegal  start  of  expression  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments)  throws  ParseException  {  [BUGGY]    requiredOptions.clear();  [BUGGY]  return  parse(options,  arguments,  null,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	71	71	2	replace	    requiredOptions.clear();		non-compiled	[CE]  illegal  start  of  expression	3	None
261	[BUG]  [BUGGY]    cmd.addArg(t);  [CE]  illegal  start  of  expression  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    cmd.addArg(t);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    cmd.addArg(t);		non-compiled	[CE]  illegal  start  of  expression	19	None
262	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  cmd.hasArg();  [CE]  illegal  start  of  expression  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    boolean  stopAtNonOption  =  cmd.hasArg();  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    boolean  stopAtNonOption  =  cmd.hasArg();		non-compiled	[CE]  illegal  start  of  expression	19	None
263	[BUG]  [BUGGY]    Arrays.sort(this.options,  null);  [CE]  illegal  start  of  expression  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Arrays.sort(this.options,  null);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Arrays.sort(this.options,  null);		non-compiled	[CE]  illegal  start  of  expression	19	None
264	[BUG]  [BUGGY]    Arrays.sort(this.options);  [CE]  illegal  start  of  expression  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Arrays.sort(this.options);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Arrays.sort(this.options);		non-compiled	[CE]  illegal  start  of  expression	19	None
265	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  it.hasNext();  [CE]  illegal  start  of  expression  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    boolean  stopAtNonOption  =  it.hasNext();  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    boolean  stopAtNonOption  =  it.hasNext();		non-compiled	[CE]  illegal  start  of  expression	19	None
283	[BUG]  [BUGGY]  for(Iterator  it  =  options.nextOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.nextOptions().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.nextOptions().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  illegal  start  of  expression	6	None
284	[BUG]  [BUGGY]  for(Iterator  it  =  options.hasOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.hasOptions().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.hasOptions().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  illegal  start  of  expression	6	None
303	[BUG]  [BUGGY]  requiredOptions  =  options.getAllRequiredOptions();  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]  requiredOptions  =  options.getAllRequiredOptions();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  options.getAllRequiredOptions();	requiredOptions  =  options.getRequiredOptions();  	non-compiled	[CE]  illegal  start  of  expression	14	None
304	[BUG]  [BUGGY]  requiredOptions  =  opt.getRequiredOptions();  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  [BUGGY]  requiredOptions  =  opt.getRequiredOptions();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  opt.getRequiredOptions();	requiredOptions  =  options.getRequiredOptions();  	non-compiled	[CE]  illegal  start  of  expression	14	None
322	[BUG]  [BUGGY]    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  it.remove();  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  it.remove();  }  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  it.remove();  }		non-compiled	[CE]  illegal  start  of  expression	9	None
323	[BUG]  [BUGGY]    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	9	None
324	[BUG]  [BUGGY]    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  return  null;  }  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  return  null;  }		non-compiled	[CE]  illegal  start  of  expression	9	None
325	[BUG]  [BUGGY]    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  [BUGGY]    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	    if(it.hasNext())  {  String  str  =(String)it.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }		non-compiled	[CE]  illegal  start  of  expression	9	None
341	[BUG]  [BUGGY]  opt.addValue(Util.stripLeadingAndTrailingQuotes(opt));  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]  opt.addValue(Util.stripLeadingAndTrailingQuotes(opt));  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(Util.stripLeadingAndTrailingQuotes(opt));	opt.clearValues();  	non-compiled	[CE]  illegal  start  of  expression	10	None
343	[BUG]  [BUGGY]  opt.addValue(Util.stripLeadingAndTrailingQuotes(opt).trim());  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]  opt.addValue(Util.stripLeadingAndTrailingQuotes(opt).trim());  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(Util.stripLeadingAndTrailingQuotes(opt).trim());	opt.clearValues();  	non-compiled	[CE]  illegal  start  of  expression	10	None
344	[BUG]  [BUGGY]  opt.addValue(Util.stripLeadingAndTrailingQuotes(opt.getKey()));  [CE]  illegal  start  of  expression  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  [BUGGY]  opt.addValue(Util.stripLeadingAndTrailingQuotes(opt.getKey()));  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(Util.stripLeadingAndTrailingQuotes(opt.getKey()));	opt.clearValues();  	non-compiled	[CE]  illegal  start  of  expression	10	None
361	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  options.hasArg();  [CE]  illegal  start  of  expression  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    boolean  stopAtNonOption  =  options.hasArg();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    boolean  stopAtNonOption  =  options.hasArg();		non-compiled	[CE]  illegal  start  of  expression	21	None
