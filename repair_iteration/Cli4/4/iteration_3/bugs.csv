bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  it  =  options.opts().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Iterator  it  =  options.opts().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Iterator  it  =  options.opts().iterator();	  ListIterator    it    =    options.opts().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	17	None	replace
2	[BUG]  [BUGGY]  Option  options  =  options.getOption(str);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  options  =  options.getOption(str);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  options  =  options.getOption(str);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
3	[BUG]  [BUGGY]  Option  options  =  options.getOption(t,  str);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  options  =  options.getOption(t,  str);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  options  =  options.getOption(t,  str);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
4	[BUG]  [BUGGY]  Option  options  =  it.next();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  options  =  it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  options  =  it.next();	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
5	[BUG]  [BUGGY]  Option  options  =  it.getOption(t);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  options  =  it.getOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  options  =  it.getOption(t);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(it);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(it);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(it);	  Option    option    =    it.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.getOption(iterator);  [CE]  cannot  find  symbol  iterator  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(iterator);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(iterator);	  Option    option    =    it.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  iterator	12	None	replace
8	[BUG]  [BUGGY]  Option  option  =  options.opts();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.opts();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.opts();	  Option    option    =    options.options();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
9	[BUG]  [BUGGY]  Option  option  =  it.options();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.options();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.options();	  Option    option    =    options.options();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
10	[BUG]  [BUGGY]  Option  option  =  opts.options();  [CE]  cannot  find  symbol  opts  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  opts.options();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  opts.options();	  Option    option    =    options.options();    	non-compiled	[CE]  cannot  find  symbol  opts	9	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t,  arguments);  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(t,  arguments);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(t,  arguments);	  Option    option    =    options.helpOption(str);    	non-compiled	[CE]  cannot  find  symbol  t	5	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.helpOption(test);  [CE]  cannot  find  symbol  test  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(test);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(test);	  Option    option    =    options.helpOption(str);    	non-compiled	[CE]  cannot  find  symbol  test	5	None	replace
13	[BUG]  [BUGGY]  Iterator  it  =  options.options().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Iterator  it  =  options.options().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Iterator  it  =  options.options().iterator();	  ListIterator    it    =    options.options().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	16	None	replace
14	[BUG]  [BUGGY]  Option  option  =(Option)options.next();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =(Option)options.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =(Option)options.next();	  Option    option    =(Option)iterator.next();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
15	[BUG]  [BUGGY]  Option  opt  =  it.next(),  options.getRequiredOptions();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  it.next(),  options.getRequiredOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  it.next(),  options.getRequiredOptions();	  Option    opt    =    it.next(),    options.helpOptions();    	non-compiled	[CE]  ';'  expected	20	None	replace
16	[BUG]  [BUGGY]  Option  opt  =  it.next(),  options.getOptions();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  it.next(),  options.getOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  it.next(),  options.getOptions();	  Option    opt    =    it.next(),    options.helpOptions();    	non-compiled	[CE]  ';'  expected	20	None	replace
17	[BUG]  [BUGGY]  Option  option  =  it.next(),  options.getRequiredOptions();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.next(),  options.getRequiredOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.next(),  options.getRequiredOptions();	  Option    opt    =    it.next(),    options.helpOptions();    	non-compiled	[CE]  ';'  expected	20	None	replace
18	[BUG]  [BUGGY]  Option  opt  =  it.next(),  arguments.helpOptions();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  it.next(),  arguments.helpOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  it.next(),  arguments.helpOptions();	  Option    opt    =    it.next(),    options.helpOptions();    	non-compiled	[CE]  ';'  expected	20	None	replace
19	[BUG]  [BUGGY]  Option  option  =  it.getOption(TEST_PREFIX);  [CE]  cannot  find  symbol  TEST_PREFIX  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.getOption(TEST_PREFIX);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.getOption(TEST_PREFIX);	  Option    option    =    options.getOption(TEST_PREFIX);    	non-compiled	[CE]  cannot  find  symbol  TEST_PREFIX	22	None	replace
20	[BUG]  [BUGGY]  Option  opt  =  options.opt(it.next());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  options.opt(it.next());  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.opt(it.next());	  Option    opt    =    options.next();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
21	[BUG]  [BUGGY]  Option  opt  =  options.opt();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  options.opt();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.opt();	  Option    opt    =    options.next();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
22	[BUG]  [BUGGY]  Option  opt  =  options.next()?  it.getOptions()  :  null;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  options.next()?  it.getOptions()  :  null;  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.next()?  it.getOptions()  :  null;	  Option    opt    =    it.next()?    options.getOptions()    :    null;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
23	[BUG]  [BUGGY]  Option  opt  =  options.getOptions()?  it.next()  :  null;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  options.getOptions()?  it.next()  :  null;  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.getOptions()?  it.next()  :  null;	  Option    opt    =    it.next()?    options.getOptions()    :    null;    	non-compiled	[CE]  incompatible  types	26	None	replace
24	[BUG]  [BUGGY]  Option  option  =  it.next(),  options.getOptions();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.next(),  options.getOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.next(),  options.getOptions();	  Option    option    =    it.next(),    options.helpOptions();    	non-compiled	[CE]  ';'  expected	11	None	replace
25	[BUG]  [BUGGY]  Option  option  =  it.next(),  options.getRequiredOption(t);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.next(),  options.getRequiredOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.next(),  options.getRequiredOption(t);	  Option    option    =    it.next(),    options.helpOptions();    	non-compiled	[CE]  ';'  expected	11	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.getOption(it.next()):  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(it.next()):  null;  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(it.next()):  null;	  Option    option    =    it.next()?    options.getOption(options):    null;    	non-compiled	[CE]  ';'  expected	28	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.next()?  it.getOption(options):  null;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.next()?  it.getOption(options):  null;  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.next()?  it.getOption(options):  null;	  Option    option    =    it.next()?    options.getOption(options):    null;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
28	[BUG]  [BUGGY]  Option  option  =  it.next()?  options.getOption(t):  null;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.next()?  options.getOption(t):  null;  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.next()?  options.getOption(t):  null;	  Option    option    =    it.next()?    options.getOption(options):    null;    	non-compiled	[CE]  incompatible  types	28	None	replace
29	[BUG]  [BUGGY]  ListIterator  it  =  options.getRequiredOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  ListIterator  it  =  options.getRequiredOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.getRequiredOptions().iterator();	  ListIterator    it    =    options.requiredOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	18	None	replace
30	[BUG]  [BUGGY]  Iterator  it  =  options.findOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Iterator  it  =  options.findOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Iterator  it  =  options.findOptions().iterator();	  ListIterator    it    =    options.findOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	30	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next()));  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next()));  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options.getOption(it.next()));	  Option    option    =    it.helpOption(options.getOption(it.next());    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	23	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next());  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options.getOption(it.next());	  Option    option    =    it.helpOption(options.getOption(it.next());    	non-compiled	[CE]  ')'  expected	23	None	replace
33	[BUG]  [BUGGY]  Option  opt  =  options.opts();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  options.opts();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.opts();	  Option    opt    =    options.helpOptions();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
34	[BUG]  [BUGGY]  Option  opt  =  options.getOptions();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  options.getOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.getOptions();	  Option    opt    =    options.helpOptions();    	non-compiled	[CE]  incompatible  types	29	None	replace
35	[BUG]  [BUGGY]  Option  opt  =  options.helpOption(t);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  options.helpOption(t);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.helpOption(t);	  Option    opt    =    options.helpOptions();    	non-compiled	[CE]  cannot  find  symbol  t	29	None	replace
36	[BUG]  [BUGGY]  Option  option  =  options.helpOption(arguments,  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(arguments,  stopAtNonOption);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(arguments,  stopAtNonOption);	  Option    option    =    options.helpOption(arguments);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
37	[BUG]  [BUGGY]  Option  option  =  it.helpOption(options);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.helpOption(options);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.helpOption(options);	  Option    option    =    options.helpOption(it);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
38	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t,  it);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(t,  it);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(t,  it);	  Option    option    =    options.helpOption(it);    	non-compiled	[CE]  cannot  find  symbol  t	27	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(requiredOptions);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(requiredOptions);	  Option    option    =    options.getOptions();    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	8	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOptions(),  options.helpOptions();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOptions(),  options.helpOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOptions(),  options.helpOptions();	  Option    option    =    options.getOptions();    	non-compiled	[CE]  ';'  expected	8	None	replace
41	[BUG]  [BUGGY]  ListIterator  it  =  options.getOwnerOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  ListIterator  it  =  options.getOwnerOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.getOwnerOptions().iterator();	  ListIterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
42	[BUG]  [BUGGY]  Iterator  it  =  options.getOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Iterator  it  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Iterator  it  =  options.getOptions().iterator();	  ListIterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(t,  arguments);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	1	None	replace
44	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  options);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(t,  options);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(t,  options);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	1	None	replace
45	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str);  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(options,  str);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(options,  str);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  str	1	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.helpOption(str.next());  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(str.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(str.next());	  Option    option    =    options.helpOption(t.next());    	non-compiled	[CE]  cannot  find  symbol  str	24	None	replace
47	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options.next());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(options.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options.next());	  Option    option    =    options.helpOption(t.next());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
48	[BUG]  [BUGGY]  Option  option  =  this.str.getOption(options);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  this.str.getOption(options);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  this.str.getOption(options);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  cannot  find  symbol  str	25	None	replace
49	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(this.options);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(this.options);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	25	None	replace
50	[BUG]  [BUGGY]  Option  option  =  opts.helpOption(it.next());  [CE]  cannot  find  symbol  opts  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  opts.helpOption(it.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  opts.helpOption(it.next());	  Option    option    =    it.helpOption(options.next());    	non-compiled	[CE]  cannot  find  symbol  opts	3	None	replace
51	[BUG]  [BUGGY]  Option  option  =  optionals.helpOption(it.next());  [CE]  cannot  find  symbol  optionals  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  optionals.helpOption(it.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  optionals.helpOption(it.next());	  Option    option    =    it.helpOption(options.next());    	non-compiled	[CE]  cannot  find  symbol  optionals	3	None	replace
52	[BUG]  [BUGGY]  Option  option  =  options.helpOption(requiredOptions);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(requiredOptions);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(requiredOptions);	  Option    option    =    options.helpOption(options);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
53	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t,  options);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(t,  options);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(t,  options);	  Option    option    =    options.helpOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	6	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption(t.next());  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(t.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(t.next());	  Option    option    =    options.getOption(it.next());    	non-compiled	[CE]  cannot  find  symbol  t	2	None	replace
55	[BUG]  [BUGGY]  Option  option  =  options.getOption(it.next(),  str);  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(it.next(),  str);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(it.next(),  str);	  Option    option    =    options.getOption(it.next());    	non-compiled	[CE]  cannot  find  symbol  str	2	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  it.next());  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(t,  it.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(t,  it.next());	  Option    option    =    options.getOption(it.next());    	non-compiled	[CE]  cannot  find  symbol  t	2	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.getOption(it.next(),  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(it.next(),  arguments);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(it.next(),  arguments);	  Option    option    =    options.getOption(it.next());    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	2	None	replace
58	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next()),  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next()),  stopAtNonOption);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options.getOption(it.next()),  stopAtNonOption);	  Option    option    =    it.helpOption(options.getOption(it.next()));    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
59	[BUG]  [BUGGY]  Option  option  =  it.helpOption(options.getOption(t.next()));  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.helpOption(options.getOption(t.next()));  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.helpOption(options.getOption(t.next()));	  Option    option    =    it.helpOption(options.getOption(it.next()));    	non-compiled	[CE]  cannot  find  symbol  t	4	None	replace
60	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options.getOption(t.next()));  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(options.getOption(t.next()));  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options.getOption(t.next()));	  Option    option    =    it.helpOption(options.getOption(it.next()));    	non-compiled	[CE]  cannot  find  symbol  t	4	None	replace
61	[BUG]  [BUGGY]  Options  options  =(Option)it.next();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Options  options  =(Option)it.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Options  options  =(Option)it.next();	  Option    options    =(Option)it.next();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	14	None	replace
62	[BUG]  [BUGGY]  options  =(Option)it.next();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  options  =(Option)it.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	options  =(Option)it.next();	  Option    options    =(Option)it.next();    	non-compiled	[CE]  incompatible  types	14	None	replace
63	[BUG]  [BUGGY]  Option  option  =  options.getOption(it.next()?  options.getOption(options):  null;  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(it.next()?  options.getOption(options):  null;  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(it.next()?  options.getOption(options):  null;	  Option    option    =    it.next()?    options.getOption(options):    null;    	non-compiled	[CE]  ')'  expected	28	None	replace
64	[BUG]  [BUGGY]  Option  opt  =  it.next()?  options.getOptions()  :  options;  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  it.next()?  options.getOptions()  :  options;  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  it.next()?  options.getOptions()  :  options;	  Option    opt    =    it.next()?    options.getOptions()    :    null;    	non-compiled	[CE]  incompatible  types	26	None	replace
65	[BUG]  [BUGGY]  Option  option  =(Option)emptyOptions.next();  [CE]  cannot  find  symbol  emptyOptions  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =(Option)emptyOptions.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =(Option)emptyOptions.next();	  Option    option    =(Option)iterator.next();    	non-compiled	[CE]  cannot  find  symbol  emptyOptions	7	None	replace
66	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  [CE]  cannot  find  symbol  opt  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =(Option)opt.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =(Option)opt.next();	  Option    option    =(Option)iterator.next();    	non-compiled	[CE]  cannot  find  symbol  opt	7	None	replace
67	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	1	None	replace
68	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt.next());  [CE]  cannot  find  symbol  opt  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(opt.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(opt.next());	  Option    option    =    it.helpOption(options.next());    	non-compiled	[CE]  cannot  find  symbol  opt	3	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opts.next());  [CE]  cannot  find  symbol  opts  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(opts.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(opts.next());	  Option    option    =    it.helpOption(options.next());    	non-compiled	[CE]  cannot  find  symbol  opts	3	None	replace
70	[BUG]  [BUGGY]  Option  option  =  arguments.helpOption(options);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  arguments.helpOption(options);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  arguments.helpOption(options);	  Option    option    =    options.helpOption(arguments);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options.getOption(t,  it.next()));  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(options.getOption(t,  it.next()));  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options.getOption(t,  it.next()));	  Option    option    =    it.helpOption(options.getOption(it.next()));    	non-compiled	[CE]  cannot  find  symbol  t	4	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options,  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(options,  stopAtNonOption);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options,  stopAtNonOption);	  Option    option    =    options.helpOption(options);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
73	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opts);  [CE]  cannot  find  symbol  opts  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(opts);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(opts);	  Option    option    =    options.helpOption(options);    	non-compiled	[CE]  cannot  find  symbol  opts	6	None	replace
74	[BUG]  [BUGGY]  Option  opt  =  option.next();  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  option.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  option.next();	  Option    opt    =    options.next();    	non-compiled	[CE]  cannot  find  symbol  option	19	None	replace
75	[BUG]  [BUGGY]  Option  option  =  options.getOptions(t);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOptions(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOptions(t);	  Option    option    =    options.getOptions();    	non-compiled	[CE]  cannot  find  symbol  t	8	None	replace
76	[BUG]  [BUGGY]  Option  option  =  it.helpOption(options.getOption(t.next());  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.helpOption(options.getOption(t.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.helpOption(options.getOption(t.next());	  Option    option    =    it.helpOption(options.getOption(it.next());    	non-compiled	[CE]  ')'  expected	23	None	replace
77	[BUG]  [BUGGY]  Option  options  =  options.getOptions(t,  str);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  options  =  options.getOptions(t,  str);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  options  =  options.getOptions(t,  str);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
78	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(t,  str);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  t	32	None	replace
79	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.t);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(this.t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(this.t);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  cannot  find  symbol  t	25	None	replace
80	[BUG]  [BUGGY]  ListIterator  it  =  options.addOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  ListIterator  it  =  options.addOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.addOptions().iterator();	  ListIterator    it    =    options.opts().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	17	None	replace
81	[BUG]  [BUGGY]  ListIterator  it  =  options.addOptions(options.getOptions());  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  ListIterator  it  =  options.addOptions(options.getOptions());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.addOptions(options.getOptions());	  ListIterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
82	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(opt);	  Option    option    =    it.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  opt	12	None	replace
83	[BUG]  [BUGGY]  Option  option  =  it.helpOption(option);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.helpOption(option);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.helpOption(option);	  Option    option    =    options.helpOption(it);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
84	[BUG]  [BUGGY]  Option  option  =  iterator.helpOption(options);  [CE]  cannot  find  symbol  iterator  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  iterator.helpOption(options);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  iterator.helpOption(options);	  Option    option    =    options.helpOption(it);    	non-compiled	[CE]  cannot  find  symbol  iterator	27	None	replace
85	[BUG]  [BUGGY]  Option  option  =  options.getOption(iteration);  [CE]  cannot  find  symbol  iteration  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(iteration);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(iteration);	  Option    option    =    it.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  iteration	12	None	replace
86	[BUG]  [BUGGY]  ListIterator  it  =  options.options.requiredOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  ListIterator  it  =  options.options.requiredOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.options.requiredOptions().iterator();	  ListIterator    it    =    options.requiredOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	18	None	replace
87	[BUG]  [BUGGY]  ListIterator  it  =  options.options.getOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  ListIterator  it  =  options.options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.options.getOptions().iterator();	  ListIterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
88	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(options.str);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  this.options.getOption(options.str);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  this.options.getOption(options.str);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  cannot  find  symbol  str	25	None	replace
89	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next()),  str);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next()),  str);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options.getOption(it.next()),  str);	  Option    option    =    it.helpOption(options.getOption(it.next()));    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
90	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next()),  t);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.helpOption(options.getOption(it.next()),  t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options.getOption(it.next()),  t);	  Option    option    =    it.helpOption(options.getOption(it.next()));    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
91	[BUG]  [BUGGY]  Option  opt  =  it.next(),  options.getRequiredOption(t);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  it.next(),  options.getRequiredOption(t);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  it.next(),  options.getRequiredOption(t);	  Option    opt    =    it.next(),    options.helpOptions();    	non-compiled	[CE]  ';'  expected	20	None	replace
92	[BUG]  [BUGGY]  Option  option  =  options.addOption(options.getOptions());  [CE]  no  suitable  method  found  for  addOption(Collection)  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.addOption(options.getOptions());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.addOption(options.getOptions());	  Option    option    =    options.getOptions();    	non-compiled	[CE]  no  suitable  method  found  for  addOption(Collection)	8	None	replace
93	[BUG]  [BUGGY]  Option  opt  =  it.next()?  options.getOption(t):  null;  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  it.next()?  options.getOption(t):  null;  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  it.next()?  options.getOption(t):  null;	  Option    opt    =    it.next()?    options.getOptions()    :    null;    	non-compiled	[CE]  incompatible  types	26	None	replace
94	[BUG]  [BUGGY]  Option  option  =  it.next(),  options.getOption(t);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  it.next(),  options.getOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.next(),  options.getOption(t);	  Option    option    =    it.next(),    options.helpOptions();    	non-compiled	[CE]  ';'  expected	11	None	replace
95	[BUG]  [BUGGY]  ListIterator  it  =  options.options.findOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  ListIterator  it  =  options.options.findOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.options.findOptions().iterator();	  ListIterator    it    =    options.findOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	30	None	replace
96	[BUG]  [BUGGY]  Option  opt  =  options.helpOption(it.next());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  opt  =  options.helpOption(it.next());  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.helpOption(it.next());	  Option    option    =    options.helpOption(t.next());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
97	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  arguments);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {      [BUGGY]  Option  option  =  options.getOption(str,  arguments);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(str,  arguments);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  str	1	None	replace
