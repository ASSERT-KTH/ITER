bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(options);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	5	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption(it.next());  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.getOption(it.next());  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(it.next());	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	5	None	replace
3	[BUG]  [BUGGY]  Option  option  =  it.helpOption(options.next());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  it.helpOption(options.next());  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.helpOption(options.next());	      Option    option    =    options.helpOption(it.next());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
4	[BUG]  [BUGGY]  Option  option  =  it.helpOption(options.getOption(it.next()));  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  it.helpOption(options.getOption(it.next()));  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.helpOption(options.getOption(it.next()));	      Option    option    =    options.helpOption(it.next());    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	9	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.helpOption(str);  [CE]  cannot  find  symbol  str  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.helpOption(str);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(str);	      Option    option    =    options.helpOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	11	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.helpOption(options);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(options);	      Option    option    =    options.helpOption(t);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
7	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next();  [CE]  cannot  find  symbol  iterator  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =(Option)iterator.next();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =(Option)iterator.next();	  Option    opt    =(Option)iterator.next();    	non-compiled	[CE]  cannot  find  symbol  iterator	10	None	replace
8	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  incompatible  types  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOptions();	      Option    option    =    options.helpOptions();    	non-compiled	[CE]  incompatible  types	7	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.options();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.options();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.options();	      Option    option    =    options.helpOptions();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
10	[BUG]  [BUGGY]  Option  option  =  options.next();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.next();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.next();	      Option    option    =    it.next();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
11	[BUG]  [BUGGY]  Option  option  =  it.next(),  options.helpOptions();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  it.next(),  options.helpOptions();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.next(),  options.helpOptions();	      Option    option    =    it.next();    	non-compiled	[CE]  ';'  expected	4	None	replace
12	[BUG]  [BUGGY]  Option  option  =  it.getOption(options);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  it.getOption(options);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.getOption(options);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(test);  [CE]  cannot  find  symbol  test  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.getOption(test);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(test);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  cannot  find  symbol  test	6	None	replace
14	[BUG]  [BUGGY]  Option  options  =(Option)it.next();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  options  =(Option)it.next();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  options  =(Option)it.next();	  Option    option    =(Option)it.next();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	1	None	replace
15	[BUG]  [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.getOptions().iterator();	      ListIterator    it    =    options.helpOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
16	[BUG]  [BUGGY]  ListIterator  it  =  options.options().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  ListIterator  it  =  options.options().iterator();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.options().iterator();	      ListIterator    it    =    options.helpOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
17	[BUG]  [BUGGY]  ListIterator  it  =  options.opts().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  ListIterator  it  =  options.opts().iterator();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.opts().iterator();	      ListIterator    it    =    options.helpOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
18	[BUG]  [BUGGY]  ListIterator  it  =  options.requiredOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  ListIterator  it  =  options.requiredOptions().iterator();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.requiredOptions().iterator();	      ListIterator    it    =    options.helpOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
19	[BUG]  [BUGGY]  Option  opt  =  options.next();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  opt  =  options.next();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.next();	  Option    opt    =    it.next();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
20	[BUG]  [BUGGY]  Option  opt  =  it.next(),  options.helpOptions();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  opt  =  it.next(),  options.helpOptions();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  it.next(),  options.helpOptions();	  Option    opt    =    it.next();    	non-compiled	[CE]  ';'  expected	2	None	replace
21	[BUG]  [BUGGY]  Option  opt  =  iterator.next();  [CE]  cannot  find  symbol  iterator  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  opt  =  iterator.next();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  iterator.next();	  Option    opt    =    it.next();    	non-compiled	[CE]  cannot  find  symbol  iterator	2	None	replace
22	[BUG]  [BUGGY]  Option  option  =  options.getOption(TEST_PREFIX);  [CE]  cannot  find  symbol  TEST_PREFIX  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.getOption(TEST_PREFIX);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(TEST_PREFIX);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  cannot  find  symbol  TEST_PREFIX	6	None	replace
23	[BUG]  [BUGGY]  Option  option  =  it.helpOption(options.getOption(it.next());  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  it.helpOption(options.getOption(it.next());  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.helpOption(options.getOption(it.next());	      Option    option    =    options.helpOption(it.next());    	non-compiled	[CE]  ')'  expected	9	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t.next());  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.helpOption(t.next());  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(t.next());	      Option    option    =    options.helpOption(it.next());    	non-compiled	[CE]  cannot  find  symbol  t	9	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str);  [CE]  cannot  find  symbol  str  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.getOption(this.str);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.getOption(this.str);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	5	None	replace
26	[BUG]  [BUGGY]  Option  opt  =  it.next()?  options.getOptions()  :  null;  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  opt  =  it.next()?  options.getOptions()  :  null;  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  it.next()?  options.getOptions()  :  null;	  Option    opt    =    it.next();    	non-compiled	[CE]  incompatible  types	2	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.helpOption(it);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.helpOption(it);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(it);	      Option    option    =    options.helpOption(t);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
28	[BUG]  [BUGGY]  Option  option  =  it.next()?  options.getOption(options):  null;  [CE]  incompatible  types  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  it.next()?  options.getOption(options):  null;  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  it.next()?  options.getOption(options):  null;	      Option    option    =    it.next();    	non-compiled	[CE]  incompatible  types	4	None	replace
29	[BUG]  [BUGGY]  Option  opt  =  options.helpOptions();  [CE]  incompatible  types  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  opt  =  options.helpOptions();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  opt  =  options.helpOptions();	      	non-compiled	[CE]  incompatible  types	3	None	replace
30	[BUG]  [BUGGY]  ListIterator  it  =  options.findOptions().iterator();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  ListIterator  it  =  options.findOptions().iterator();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	ListIterator  it  =  options.findOptions().iterator();	      ListIterator    it    =    options.helpOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
31	[BUG]  [BUGGY]  Option  option  =  iterator.next();  [CE]  cannot  find  symbol  iterator  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  iterator.next();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  iterator.next();	      Option    option    =    it.next();    	non-compiled	[CE]  cannot  find  symbol  iterator	4	None	replace
32	[BUG]  [BUGGY]  Option  options  =  options.getOption(t);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  options  =  options.getOption(t);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  options  =  options.getOption(t);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
33	[BUG]  [BUGGY]  Option  option  =  options.helpOption(arguments);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {    [BUGGY]  Option  option  =  options.helpOption(arguments);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	139	139	2	replace	Option  option  =  options.helpOption(arguments);	      Option    option    =    options.helpOptions();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
