bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Iterator  it  =  options.values().listIterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.values().listIterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.values().listIterator();  it.hasNext();)  {	  for(Iterator    it    =    options.listIterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
2	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;	  	compilable	  [FE]  ComparisonFailure  	45	2	add
3	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;	  	compilable	  [FE]  ComparisonFailure  	45	2	add
4	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options  ==  null)  {  this.options  =  options;  }  this.options  =  options;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options  ==  null)  {  this.options  =  options;  }  this.options  =  options;	  	compilable	  [FE]  ComparisonFailure  	45	2	add
5	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options  ==  null)  {  this.options  =  options;  }  this.options  =  options;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options  ==  null)  {  this.options  =  options;  }  this.options  =  options;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options  ==  null)  {  this.options  =  options;  }  this.options  =  options;	  	compilable	  [FE]  ComparisonFailure  	45	2	add
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	45	2	add
7	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	45	2	add
8	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  option;  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  option;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options!=  null)  {  this.options  =  options;  }  this.options  =  option;	  	non-compiled	[CE]  cannot  find  symbol  option	45	None	add
9	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  Options.EMPTY;  [CE]  cannot  find  symbol  EMPTY  [FE]            ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  Options.EMPTY;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options!=  null)  {  this.options  =  options;  }  this.options  =  Options.EMPTY;	  	non-compiled	[CE]  cannot  find  symbol  EMPTY	45	None	add
10	[BUG]  [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
11	[BUG]  [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	ListIterator  it  =  options.getOptions().iterator();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
12	[BUG]  [BUGGY]  List  <  Option>  options  =  options.getOptions();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  List  <  Option>  options  =  options.getOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	List  <  Option>  options  =  options.getOptions();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
13	[BUG]  [BUGGY]  Options  option  =  options.getOption(str);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Options  option  =  options.getOption(str);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Options  option  =  options.getOption(str);	  Options    option    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(t,  str);	  Options    option    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
15	[BUG]  [BUGGY]  Options  option  =  options.getOption(t,  str);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Options  option  =  options.getOption(t,  str);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Options  option  =  options.getOption(t,  str);	  Options    option    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
16	[BUG]  [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    ListIterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
17	[BUG]  [BUGGY]  Iterator  it  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Iterator  it  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Iterator  it  =  options.getOptions().iterator();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    ListIterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
19	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
21	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
23	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
24	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
25	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  else  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  else  if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
27	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  else  if(options  ==  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  else  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  else  if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
28	[BUG]  [BUGGY]  this.options  =  options.helpOptions();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  options.helpOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  options.helpOptions();	  this.options    =    Options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
29	[BUG]  [BUGGY]  this.options  =  options.getOptions();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  options.getOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  options.getOptions();	  this.options    =    Options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
30	[BUG]  [BUGGY]  this.options  =  Options.getOptions();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  Options.getOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  Options.getOptions();	  this.options    =    Options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
31	[BUG]  [BUGGY]  this.options  =  options.opts();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  options.opts();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  options.opts();	  this.options    =    Options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
32	[BUG]  [BUGGY]  this.options  =  Option.EMPTY;  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  Option.EMPTY;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  Option.EMPTY;	  this.options    =    Options.EMPTY;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
33	[BUG]  [BUGGY]  this.options  =  options.options;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  options.options;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  options.options;	  this.options    =    Options.EMPTY;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
34	[BUG]  [BUGGY]  this.options  =  Options.BinaryOptions;  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  Options.BinaryOptions;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  Options.BinaryOptions;	          if(options!=    null)    {    this.options    =    options;    }    if(options    >=    null)    {    this.options    =    options;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
35	[BUG]  [BUGGY]  Option  option  =  options.opts();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.opts();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.opts();	  Option    option    =    options.options();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
36	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  ||  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  ||  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	55	2	replace
37	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  ||  it.hasNext();)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  ||  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  ||  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	55	2	replace
38	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  option.hasNext();)  {  [CE]  cannot  find  symbol  option  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  option.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  option.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol  option	55	None	replace
39	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    Option  option  =(Option)it.next();	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
40	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    Option[]  requiredOptions  =  options.getRequiredOptions();	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
41	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    Option  option  =  options.getOption(t);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
42	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    Option  option  =(Option)options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
43	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    Option  option  =  options.getOptions();	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
44	[BUG]  [BUGGY]  Option  options  =  options.getOption(str);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  options  =  options.getOption(str);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  options  =  options.getOption(str);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
45	[BUG]  [BUGGY]  Option  options  =  options.getOptions(t);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  options  =  options.getOptions(t);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  options  =  options.getOptions(t);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
46	[BUG]  [BUGGY]  Option  options  =  options.getOption(t,  str);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  options  =  options.getOption(t,  str);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  options  =  options.getOption(t,  str);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
47	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.values().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.values().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  this.options.values().iterator();  it.hasNext();)  {	  for(Iterator    it    =    this.options.keySet().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	compilable	  [FE]  ComparisonFailure  	40	2	replace
49	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  it.next();  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	compilable	  [FE]  ComparisonFailure  	40	2	replace
50	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  this.options.add(it.next());  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  this.options.add(it.next());  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  this.options.add(it.next());  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
51	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getAllOptions().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getAllOptions().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  this.options.getAllOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
52	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.getRequiredOptions());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(options.getRequiredOptions());  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(options.getRequiredOptions());	  Option    option    =    options.getOption(options.getOptions());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
53	[BUG]  [BUGGY]  options  =  options.getOption(options.getOptions());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  options  =  options.getOption(options.getOptions());  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	options  =  options.getOption(options.getOptions());	  Option    option    =    options.getOption(options.getOptions());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.getName());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(options.getName());  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(options.getName());	  Option    option    =    options.getOption(options.getOptions());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
55	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.getOptions(),  arguments);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(options.getOptions(),  arguments);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(options.getOptions(),  arguments);	  Option    option    =    options.getOption(options.getOptions());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
56	[BUG]  [BUGGY]  for(Iterator  it  =  options.options();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.options();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.options();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
57	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
58	[BUG]  [BUGGY]  Option  option  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOptions().iterator();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
59	[BUG]  [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
60	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(arguments,  stopAtNonOption);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
61	[BUG]  [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
62	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
63	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
64	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    Option[]  requiredOptions  =  options.getRequiredOptions();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
65	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    Option  option  =(Option)options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
66	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =  options.getOption(t);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =  options.getOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    Option  option  =  options.getOption(t);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
67	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =  options.getOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    Option  option  =  options.getOptions();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
68	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    Option  option  =(Option)it.next();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
69	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(options);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  this.options.getOption(options);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  this.options.getOption(options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  arguments);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(this.options,  arguments);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(this.options,  arguments);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(this.options,  t);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
72	[BUG]  [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  requiredOptions  =  options.getRequiredOptions();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
73	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
74	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  neededOptions  =  options.getRequiredOptions();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  neededOptions  =  options.getRequiredOptions();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  neededOptions  =  options.getRequiredOptions();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
75	[BUG]  [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {	  for(Iterator    it    =    arguments.keySet().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
76	[BUG]  [BUGGY]  for(Iterator  it  =  arguments.values().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  arguments.values().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  arguments.values().iterator();  it.hasNext();)  {	  for(Iterator    it    =    arguments.keySet().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
77	[BUG]  [BUGGY]  Option  option  =(Option)options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =(Option)options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =(Option)options.getOptions().iterator();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
78	[BUG]  [BUGGY]  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
79	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptionsList().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptionsList().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptionsList().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
80	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.helpOption(t);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.helpOption(t);	  Option    option    =    options.helpOption(arguments);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
81	[BUG]  [BUGGY]  Option  option  =  options.helpOption(options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.helpOption(options);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.helpOption(options);	  Option    option    =    options.helpOption(arguments);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
82	[BUG]  [BUGGY]  for(Iterator  it  =  options.optionsList().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.optionsList().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.optionsList().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptionsList().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
83	[BUG]  [BUGGY]  this.options  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  new  ArrayList  <  Option>();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  new  ArrayList  <  Option>();	  this.options    =    options;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
84	[BUG]  [BUGGY]  this.options  =  Arrays.asList(options);  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  Arrays.asList(options);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  Arrays.asList(options);	  this.options    =    options;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
85	[BUG]  [BUGGY]  Option  options  =  options.findOptions();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  options  =  options.findOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  options  =  options.findOptions();	  Option    options    =    options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
86	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str,  arguments);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(this.str,  arguments);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(this.str,  arguments);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
87	[BUG]  [BUGGY]  if(options!=  null)  {  options  =  options.helpOptions();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(options!=  null)  {  options  =  options.helpOptions();  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(options!=  null)  {  options  =  options.helpOptions();  }	  options    =    options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
88	[BUG]  [BUGGY]  this.options  =  Options;  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  Options;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  Options;	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    Options;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
89	[BUG]  [BUGGY]  this.options  =  Option;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  Option;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  Option;	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    Options;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
90	[BUG]  [BUGGY]  for(Iterator  it  =  properties.iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  properties.iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  properties.iterator();  it.hasNext();)  {	  for(Iterator    it    =    this.options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
91	[BUG]  [BUGGY]  This.options  =  options.options;  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  This.options  =  options.options;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	This.options  =  options.options;	  This.options    =    options;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
92	[BUG]  [BUGGY]  this.options  =  options.opts;  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  options.opts;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  options.opts;	  This.options    =    options;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
93	[BUG]  [BUGGY]  This.options  =  options.opts;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  This.options  =  options.opts;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	This.options  =  options.opts;	  This.options    =    options;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
94	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  it.next();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    ListIterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	37	None	replace
95	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(stopAtNonOption)  {  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(stopAtNonOption)  {  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(arguments,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	27	None	replace
96	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  argument,  stopAtNonOption);  }  [CE]  cannot  find  symbol  argument  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(stopAtNonOption)  {  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  argument,  stopAtNonOption);  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(stopAtNonOption)  {  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  argument,  stopAtNonOption);  }	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(arguments,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  cannot  find  symbol  argument	27	None	replace
97	[BUG]  [BUGGY]  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(arguments,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
98	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
99	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =(Option)it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =(Option)it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
100	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
101	[BUG]  [BUGGY]  Option[]  options  =(Option[])options.clone();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option[]  options  =(Option[])options.clone();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =(Option[])options.clone();	  Option[]    options    =    options.options;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
102	[BUG]  [BUGGY]  Option[]  options  =  options.opts;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option[]  options  =  options.opts;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.opts;	  Option[]    options    =    options.options;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
103	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
104	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
105	[BUG]  [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
106	[BUG]  [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
107	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption,  requiredOptions);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption,  requiredOptions);  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption,  requiredOptions);  }	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(options,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
108	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  }	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(options,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(options,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
110	[BUG]  [BUGGY]  Option[]  options  =  options.strOptions();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option[]  options  =  options.strOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.strOptions();	  Option[]    options    =    options.options();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
111	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
112	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
113	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
114	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
115	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
116	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
117	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  else  if(options.helpOptions!=  null)  {  this.options  =  options;  }  [CE]  cannot  find  symbol  helpOptions  [FE]          ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  else  if(options.helpOptions!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  else  if(options.helpOptions!=  null)  {  this.options  =  options;  }	  	non-compiled	[CE]  cannot  find  symbol  helpOptions	22	None	add
118	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  else  if(options.helpOptions  ==  null)  {  this.options  =  options;  }  [CE]  cannot  find  symbol  helpOptions  [FE]            ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  else  if(options.helpOptions  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  else  if(options.helpOptions  ==  null)  {  this.options  =  options;  }	  	non-compiled	[CE]  cannot  find  symbol  helpOptions	22	None	add
119	[BUG]  [BUGGY]  options  =  options.opts();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  options  =  options.opts();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	options  =  options.opts();	  Option[]    options    =    options.opts();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
120	[BUG]  [BUGGY]  Iterator  <  Option>  options  =  options.helpOptions();  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  Iterator  <  Option>  options  =  options.helpOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Iterator  <  Option>  options  =  options.helpOptions();	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
121	[BUG]  [BUGGY]  timeout  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  while(options.helpOptions()!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  while(options.helpOptions()!=  null)  {  this.options  =  options;  }	  	compilable	timeout	24	1	add
122	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  while(options.helpOptions()!=  null)  {  this.options  =  options;  }  timeout  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  while(options.helpOptions()!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  while(options.helpOptions()!=  null)  {  this.options  =  options;  }	  	compilable	timeout	24	1	add
123	[BUG]  [BUGGY]  this.options  =  options.findOptions();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  options.findOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  options.findOptions();	  this.options    =    Options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
124	[BUG]  [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
125	[BUG]  [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
126	[BUG]  [BUGGY]  Option  option  =  options.helpOption(this.options);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.helpOption(this.options);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.helpOption(this.options);	  Option    option    =    options.helpOption(arguments);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
127	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.next();)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.next();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.next();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	55	None	replace
128	[BUG]  [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
129	[BUG]  [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
130	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(arguments,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
131	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption,  requiredOptions);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption,  requiredOptions);  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption,  requiredOptions);  }	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(arguments,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
132	[BUG]  [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
133	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  Option  option  =  options.getOptions();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  Option  option  =  options.getOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  Option  option  =  options.getOptions();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions();    	non-compiled	[CE]  incompatible  types	8	None	replace
134	[BUG]  [BUGGY]  for(Iterator  it  =  options.options.iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  options  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.options.iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.options.iterator();  it.hasNext();)  {	  for(Iterator    it    =    this.options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol  options	9	None	replace
135	[BUG]  [BUGGY]  for(Iterator  it  =  options.keySet().listIterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.keySet().listIterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.keySet().listIterator();  it.hasNext();)  {	  for(Iterator    it    =    options.listIterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
136	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;  }	  	non-compiled	[CE]  illegal  start  of  type	45	None	add
137	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
138	[BUG]  [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
139	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  neededOptions  =  options.getRequiredOptions();  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  neededOptions  =  options.getRequiredOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  neededOptions  =  options.getRequiredOptions();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  incompatible  types	4	None	replace
140	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  properties.keySet().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	for(Iterator  it  =  properties.keySet().iterator();  it.hasNext();)  {	  for(Iterator    it    =    this.options.keySet().iterator();    it.hasNext();)    {    	compilable	  [FE]  NullPointerException  	14	2	replace
141	[BUG]  [BUGGY]  for(Iterator  it  =  properties.keySet().iterator();  it.hasNext();)  {  [FE]  NullPointerException  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  properties.keySet().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  properties.keySet().iterator();  it.hasNext();)  {	  for(Iterator    it    =    this.options.keySet().iterator();    it.hasNext();)    {    	compilable	  [FE]  NullPointerException  	14	2	replace
142	[BUG]  [BUGGY]  This.options  =  options.getOptions();  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  This.options  =  options.getOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	This.options  =  options.getOptions();	  This.options    =    options;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
143	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  options.helpOptions;  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(options!=  null)  {  this.options  =  options.helpOptions;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(options!=  null)  {  this.options  =  options.helpOptions;  }	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    option;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
144	[BUG]  [BUGGY]  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption,  requiredOptions);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption,  requiredOptions);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption,  requiredOptions);	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(options,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
145	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    ListIterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {	  	non-compiled	[CE]  not  a  statement	54	None	add
146	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {	  	non-compiled	[CE]  not  a  statement	54	None	add
147	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    ListIterator  it  =  options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
148	[BUG]  [BUGGY]  for(Iterator  it  =  options.keySet();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.keySet();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.keySet();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
149	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  opt  =  options.getOptions().iterator();  [CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  opt  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  opt  =  options.getOptions().iterator();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	40	None	replace
150	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  options.getOptions().iterator();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	compilable	  [FE]  ComparisonFailure  	40	2	replace
151	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  options.getOptions().iterator();  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Object  option  =  options.getOptions().iterator();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	compilable	  [FE]  ComparisonFailure  	40	2	replace
152	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Options  option  =  options.getOptions().iterator();  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Options  option  =  options.getOptions().iterator();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Options  option  =  options.getOptions().iterator();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
153	[BUG]  [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
154	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.helpOptions());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(options.helpOptions());  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(options.helpOptions());	  Option    option    =    options.getOption(options.getOptions());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
155	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.getAllOptions());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(options.getAllOptions());  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(options.getAllOptions());	  Option    option    =    options.getOption(options.getOptions());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
157	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
158	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(opts!=  null)  {  this.options  =  options;  }  [CE]  cannot  find  symbol  opts  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(opts!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(opts!=  null)  {  this.options  =  options;  }	  	non-compiled	[CE]  cannot  find  symbol  opts	22	None	add
159	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(this.str);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  this.options.getOption(this.str);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  this.options.getOption(this.str);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
160	[BUG]  [BUGGY]  Option[]  options  =  options.findOptions();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option[]  options  =  options.findOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.findOptions();	  Option[]    options    =    options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
161	[BUG]  [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
162	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    ListIterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
163	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    ListIterator  it  =  options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
164	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    ListIterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
165	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  this.options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  this.options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    ListIterator  it  =  this.options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
166	[BUG]  [BUGGY]  Option  option  =  options.helpOptions().getOption(options.getOptions());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.helpOptions().getOption(options.getOptions());  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.helpOptions().getOption(options.getOptions());	  Option    option    =    options.getOption(options.getOptions());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
167	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.addOption(options.getOptions()));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(options.addOption(options.getOptions()));  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(options.addOption(options.getOptions()));	  Option    option    =    options.getOption(options.getOptions());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
168	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t,  str);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t,  str);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t,  str);	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  t	7	None	replace
169	[BUG]  [BUGGY]  for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [CE]  cannot  find  symbol  option  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  option	7	None	replace
170	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  optionalOptions;  [CE]  cannot  find  symbol  optionalOptions  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  optionalOptions;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options!=  null)  {  this.options  =  options;  }  this.options  =  optionalOptions;	  	non-compiled	[CE]  cannot  find  symbol  optionalOptions	45	None	add
171	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  Options.None();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;  if(options!=  null)  {  this.options  =  options;  }  this.options  =  Options.None();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        this.options    =    options;    if(options!=  null)  {  this.options  =  options;  }  this.options  =  Options.None();	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
172	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str,  this.options);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.getOption(this.str,  this.options);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(this.str,  this.options);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
173	[BUG]  [BUGGY]  Option  option  =  options.helpOptions().getOption(this.str);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.helpOptions().getOption(this.str);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.helpOptions().getOption(this.str);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
174	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)options.getOptions().iterator();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
175	[BUG]  [BUGGY]  this.options  =  Options.BinaryOptions();  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  Options.BinaryOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  Options.BinaryOptions();	          if(options!=    null)    {    this.options    =    options;    }    if(options    >=    null)    {    this.options    =    options;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
176	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options  >=  null)  {  this.options  =  options;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options  >=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options  >=  null)  {  this.options  =  options;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	24	None	add
177	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
178	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options    ==    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	24	2	add
179	[BUG]  [BUGGY]  for(Iterator  it  =  options.options.getOptions();  it.hasNext();)  {  [CE]  cannot  find  symbol  options  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.options.getOptions();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.options.getOptions();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol  options	36	None	replace
180	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    this.options.getOptions().iterator();    it.hasNext();)    {    Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
181	[BUG]  [BUGGY]  Option[]  options  =  options.selectOptions();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option[]  options  =  options.selectOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.selectOptions();	  Option[]    options    =    options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
182	[BUG]  [BUGGY]  Option[]  options  =  options.addOptions();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option[]  options  =  options.addOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.addOptions();	  Option[]    options    =    options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
183	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  new  ArrayList  <  Option>();  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(options!=  null)  {  this.options  =  new  ArrayList  <  Option>();  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(options!=  null)  {  this.options  =  new  ArrayList  <  Option>();  }	          if(options!=    null)    {    this.options    =    options;    }    this.options    =    options;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
184	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  new  ArrayList();  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(options!=  null)  {  this.options  =  new  ArrayList();  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(options!=  null)  {  this.options  =  new  ArrayList();  }	          if(options!=    null)    {    this.options    =    options;    }    this.options    =    options;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
185	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
186	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
187	[BUG]  [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]          if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	                if(options!=        null)        {        this.options        =        options;        }        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
188	[BUG]  [BUGGY]  this.options  =  option;  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  option;  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  option;	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    option;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
189	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  incompatible  types	4	None	replace
190	[BUG]  [BUGGY]  if(this.options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(this.options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(this.options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(arguments,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
191	[BUG]  [BUGGY]  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(arguments,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
192	[BUG]  [BUGGY]  Options  option  =  options.helpOptions();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Options  option  =  options.helpOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Options  option  =  options.helpOptions();	  Options    option    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
193	[BUG]  [BUGGY]  This.options  =  options.helpOptions();  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  This.options  =  options.helpOptions();  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	This.options  =  options.helpOptions();	  This.options    =    options;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
194	[BUG]  [BUGGY]  for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
195	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
196	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  it.next();  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions();    	non-compiled	[CE]  incompatible  types	8	None	replace
197	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =    options.getOptions();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
198	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    Option  option  =  options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
199	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext()  &&  option.hasNext();)  {  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext()  &&  option.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    Option  option  =(Option)options.getOptions().iterator();  it.hasNext()  &&  option.hasNext();)  {	  	non-compiled	[CE]  not  a  statement	54	None	add
200	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Iterator  it  =  it.next();  [CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Iterator  it  =  it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Iterator  it  =  it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  variable  it  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	40	None	replace
201	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  it  =  it.next();  }  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  it  =  it.next();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  it  =  it.next();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	non-compiled	[CE]  incompatible  types	40	None	replace
202	[BUG]  [BUGGY]  timeout  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  continue;  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  continue;  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	compilable	timeout	40	1	replace
203	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  continue;  }  timeout  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  continue;  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  if(it.hasNext())  {  continue;  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    	compilable	timeout	40	1	replace
204	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	55	2	replace
205	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext()    &&    it.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	55	2	replace
206	[BUG]  [BUGGY]  For(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  For(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	For(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
207	[BUG]  [BUGGY]  if(this.options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  if(this.options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  }  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	if(this.options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  }	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(options,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
208	[BUG]  [BUGGY]  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);	          if(options!=    null)    {    this.options    =    options;    }    if(options!=    null)    {    this.options    =    options;    System.arraycopy(options,    0,    this.options,    arguments,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
209	[BUG]  [BUGGY]  for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  }  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
210	[BUG]  [BUGGY]  for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]      Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  option.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    	non-compiled	[CE]  cannot  find  symbol  option	6	None	replace
211	[BUG]  [BUGGY]  Option  option  =  options.helpOption(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;        [BUGGY]  Option  option  =  options.helpOption(arguments,  stopAtNonOption);  [BUGGY]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.helpOption(arguments,  stopAtNonOption);	  Option    option    =    options.helpOption(arguments);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
