bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option  option  =  options.getOption(this.options);  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(this.options);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(options);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option  option  =  options.getOption(arguments);  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(arguments);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option[]  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option[]  requiredOptions  =  options.getRequiredOptions();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
5	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option  option  =(Option)options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
6	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option  option  =(Option)it.next();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
7	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOption(t);  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option  option  =  options.getOption(t);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
8	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option  option  =  options.getOptions();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
9	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  this.options.iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  this.options.iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
10	[BUG]  [BUGGY]  Option[]  options  =  options.options();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option[]  options  =  options.options();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.options();	      Option[]    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  Option[]  options  =  options.helpOptions();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option[]  options  =  options.helpOptions();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.helpOptions();	      Option[]    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  Option[]  options  =  options.opts();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option[]  options  =  options.opts();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.opts();	      Option[]    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  options  =  options.getOptions();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  options  =  options.getOptions();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	options  =  options.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
14	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.keySet().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  this.options.keySet().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  this.options.keySet().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.keySet().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
15	[BUG]  [BUGGY]  Options  option  =  options.getOption(t);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Options  option  =  options.getOption(t);  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Options  option  =  options.getOption(t);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
16	[BUG]  [BUGGY]  for(Iterator  it  =  options.getAllOptions().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getAllOptions().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getAllOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
17	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	8	2	replace
18	[BUG]  [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  this.options.getOptions().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	8	2	replace
19	[BUG]  [BUGGY]  this.options  =  options;  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  this.options  =  options;  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  options;	      if(options!=    null)    {    this.options    =    options;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
20	[BUG]  [BUGGY]  this.options  =  Options.EMPTY;  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  this.options  =  Options.EMPTY;  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  Options.EMPTY;	      if(options!=    null)    {    this.options    =    options;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
21	[BUG]  [BUGGY]  this.options  =  Options.helpOptions();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  this.options  =  Options.helpOptions();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	this.options  =  Options.helpOptions();	      if(options!=    null)    {    this.options    =    options;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	15	2	add
23	[BUG]  [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  }  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	15	2	add
24	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	        if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	15	2	add
25	[BUG]  [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options  ==  null)  {  this.options  =  options;  }  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	        if(options!=    null)    {    this.options    =    options;    }    if(options  ==  null)  {  this.options  =  options;  }	  	compilable	  [FE]  ComparisonFailure  	15	2	add
26	[BUG]  [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  }  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  System.arraycopy(options,  0,  this.options,  arguments,  stopAtNonOption);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	15	None	add
27	[BUG]  [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  options;  System.arraycopy(arguments,  0,  this.options,  arguments,  stopAtNonOption);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	15	None	add
28	[BUG]  [BUGGY]  for(Iterator  it  =  options.entrySet().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.entrySet().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.entrySet().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.values().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.options();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option  option  =  options.options();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.options();	      Option    option    =    options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
30	[BUG]  [BUGGY]  options  =  options.helpOptions();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  options  =  options.helpOptions();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	options  =  options.helpOptions();	      Option    option    =    options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.getOptions());  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option  option  =  options.getOption(options.getOptions());  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(options.getOptions());	      Option    option    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
32	[BUG]  [BUGGY]  for(Iterator  it  =  options.opts().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.opts().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.opts().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.options().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
33	[BUG]  [BUGGY]  Option[]  options  =  options.optOptions();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option[]  options  =  options.optOptions();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.optOptions();	      Option[]    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  This.options  =  options;  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  This.options  =  options;  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	This.options  =  options;	      if(options!=    null)    {    this.options    =    options;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
35	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptionsList().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptionsList().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptionsList().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
36	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions();  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	non-compiled	[CE]  incompatible  types	8	None	replace
37	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    ListIterator  it  =  options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
38	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
39	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    ListIterator  it  =  options.getOptions().iterator();  it.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
40	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Iterator  it  =  options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Iterator  it  =  options.getOptions().iterator();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Iterator  it  =  options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
41	[BUG]  [BUGGY]  Options  options  =  options.helpOptions();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Options  options  =  options.helpOptions();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Options  options  =  options.helpOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.helpOption(arguments);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option  option  =  options.helpOption(arguments);  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.helpOption(arguments);	      Option    option    =    options.helpOptions();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
43	[BUG]  [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  option;  }  [CE]  cannot  find  symbol  option  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  option;  }  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  option;  }	  	non-compiled	[CE]  cannot  find  symbol  option	15	None	add
44	[BUG]  [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  Options;  }  [CE]  cannot  find  symbol  Options  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options!=  null)  {  this.options  =  Options;  }  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	        if(options!=    null)    {    this.options    =    options;    }    if(options!=  null)  {  this.options  =  Options;  }	  	non-compiled	[CE]  cannot  find  symbol  Options	15	None	add
45	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	        if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;	  	compilable	  [FE]  ComparisonFailure  	15	2	add
46	[BUG]  [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  this.options  =  options;  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	        if(options!=    null)    {    this.options    =    options;    }    this.options  =  options;	  	compilable	  [FE]  ComparisonFailure  	15	2	add
47	[BUG]  [BUGGY]  Option  options  =  options.helpOptions();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option  options  =  options.helpOptions();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  options  =  options.helpOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
48	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option  option  =  options.getOption(this.str);  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  option  =  options.getOption(this.str);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  for(Iterator  it  =  options.listIterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.listIterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.listIterator();  it.hasNext();)  {	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
50	[BUG]  [BUGGY]  Options  option  =  options.getOptions();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Options  option  =  options.getOptions();  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Options  option  =  options.getOptions();	      Option    option    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
51	[BUG]  [BUGGY]  Option  options  =  options.getOption(t);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option  options  =  options.getOption(t);  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option  options  =  options.getOption(t);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
52	[BUG]  [BUGGY]  Option[]  options  =  options.options;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  Option[]  options  =  options.options;  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	Option[]  options  =  options.options;	      Option[]    options    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
53	[BUG]  [BUGGY]  for(Iterator  it  =  arguments.keySet().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  arguments.keySet().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  arguments.keySet().iterator();  it.hasNext();)  {	  for(Iterator    it    =    options.keySet().iterator();    it.hasNext();)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
54	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	8	2	replace
55	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext()  &&  it.hasNext();)  {	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    	compilable	  [FE]  ComparisonFailure  	8	2	replace
56	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =  options.getOptions().iterator();  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option  option  =  options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
57	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]    Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
58	[BUG]  [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options  >=  null)  {  this.options  =  options;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]    {  this.options  =  options;      [BUGGY]      if(options!=  null)  {  this.options  =  options;  }  if(options  >=  null)  {  this.options  =  options;  }  [BUGGY]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	        if(options!=    null)    {    this.options    =    options;    }    if(options  >=  null)  {  this.options  =  options;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	15	None	add
