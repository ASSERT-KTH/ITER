bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Option  option  =  options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Option  option  =  options.getOption(t);  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Option  option  =  options.getOption(t);		non-compiled	[CE]  cannot  find  symbol  t	7	None	add
2	[BUG]  [BUGGY]    Option[]  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Option[]  options  =  options.getOptions();  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Option[]  options  =  options.getOptions();		non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	7	None	add
3	[BUG]  [BUGGY]    Option  option  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]        ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Option  option  =  options.getOption(str);  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Option  option  =  options.getOption(str);		non-compiled	[CE]  cannot  find  symbol  str	7	None	add
4	[BUG]  [BUGGY]    Options  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Options  options  =  options.getOptions();  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Options  options  =  options.getOptions();		non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	7	None	add
5	[BUG]  [BUGGY]    Option  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Option  options  =  options.getOptions();  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Option  options  =  options.getOptions();		non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	7	None	add
6	[BUG]  [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.options().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  cannot  find  symbol	6	None	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	compilable	  [FE]  ComparisonFailure  	6	2	replace
8	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	compilable	  [FE]  ComparisonFailure  	6	2	replace
9	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  cannot  find  symbol	6	None	replace
10	[BUG]  [BUGGY]  for(Iterator  it  =  options.values().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.values().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.values().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  cannot  find  symbol	6	None	replace
11	[BUG]  [BUGGY]  for(Iterator  it  =  options.keySet().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.keySet().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.keySet().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  cannot  find  symbol	6	None	replace
12	[BUG]  [BUGGY]  for(Iterator  it  =  options.allOptions().iterator();  it.hasNext();)  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]  for(Iterator  it  =  options.allOptions().iterator();  it.hasNext();)  {  [BUGGY]  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	for(Iterator  it  =  options.allOptions().iterator();  it.hasNext();)  {	for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  	non-compiled	[CE]  cannot  find  symbol	6	None	replace
13	[BUG]  [BUGGY]    Option  option  =  options.helpOptions();  [CE]  incompatible  types  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Option  option  =  options.helpOptions();  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Option  option  =  options.helpOptions();		non-compiled	[CE]  incompatible  types	7	None	add
14	[BUG]  [BUGGY]    Option  option  =  options.getOptions();  [CE]  incompatible  types  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]    Option  option  =  options.getOptions();  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    Option  option  =  options.getOptions();		non-compiled	[CE]  incompatible  types	7	None	add
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]    if(options!=  null)  {  this.options  =  options;  }  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	add	    if(options!=  null)  {  this.options  =  options;  }		compilable	  [FE]  ComparisonFailure  	7	2	add
16	[BUG]  [BUGGY]    if(options!=  null)  {  this.options  =  options;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  {  this.options  =  options;    [BUGGY]    if(options!=  null)  {  this.options  =  options;  }  [BUGGY]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	138	138	2	replace	    if(options!=  null)  {  this.options  =  options;  }		compilable	  [FE]  ComparisonFailure  	7	2	add
