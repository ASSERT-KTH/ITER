bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  if(arguments!=  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  if(arguments!=  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    arguments.length    >    0)    {    if(arguments!=  null  &&  arguments.length  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
2	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  if(arguments  ==  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  if(arguments  ==  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    arguments.length    >    0)    {    if(arguments  ==  null  &&  arguments.length  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
3	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  If(arguments!=  null  &&  arguments.length  >  0)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  If(arguments!=  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    arguments.length    >    0)    {    If(arguments!=  null  &&  arguments.length  >  0)  {	  	non-compiled	[CE]  ';'  expected	63	None	add
4	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  if(arguments!=  null  &&  argument.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  if(arguments!=  null  &&  argument.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    arguments.length    >    0)    {    if(arguments!=  null  &&  argument.length  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  ||  options.helpOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
6	[BUG]  [BUGGY]  if(arguments!=  null  ||  options.helpOptions().size()  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  ||  options.helpOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  options.helpOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
8	[BUG]  [BUGGY]  if(arguments  ==  null  ||  options.helpOptions().size()  >  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  options.helpOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  &&  options.helpOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
10	[BUG]  [BUGGY]  if(arguments  ==  null  &&  options.helpOptions().size()  >  0)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  &&  options.helpOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(options!=  null)  {	  if(arguments!=    null)    {    if(arguments    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	10	2	replace
12	[BUG]  [BUGGY]  if(options!=  null)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options!=  null)  {	  if(arguments!=    null)    {    if(arguments    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	10	2	replace
13	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArg(false);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArg(false);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.hasArg(false);	  boolean    stopAtNonOption    =    this.options.hasArg(true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
14	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasArg(true);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.hasArg(true);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.hasArg(true);	  boolean    stopAtNonOption    =    this.options.hasArg(true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
15	[BUG]  [BUGGY]  List  arguments  =  options.listIterator();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  options.listIterator();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  options.listIterator();	  List    arguments    =    this.options.listIterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  List  arguments  =  Arrays.asList(this.options,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  Arrays.asList(this.options,  arguments,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  Arrays.asList(this.options,  arguments,  stopAtNonOption);	  List    arguments    =    this.options.listIterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(false);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(false);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(false);	  boolean    stopAtNonOption    =    options.stopAtNonOption(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
18	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(false,  this.options);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(false,  this.options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(false,  this.options);	  boolean    stopAtNonOption    =    options.stopAtNonOption(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
19	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(true,  false);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(true,  false);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(true,  false);	  boolean    stopAtNonOption    =    options.stopAtNonOption(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(options  ==  null  ||  arguments.length  ==  0)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    if(arguments    ==    null    ||    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	41	2	replace
21	[BUG]  [BUGGY]  if(options  ==  null  ||  arguments.length  ==  0)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options  ==  null  ||  arguments.length  ==  0)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    if(arguments    ==    null    ||    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	41	2	replace
22	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  cmd.getOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  cmd.getOptions();	  Option    options    =    this.options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.getArguments();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.getArguments();	  Arguments[]    arguments    =    this.options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
24	[BUG]  [BUGGY]  Option  options  =  opt.helpOptions();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  opt.helpOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  opt.helpOptions();	  Option    options    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
25	[BUG]  [BUGGY]  Option  options  =  options.opts();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  options.opts();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  options.opts();	  Option    options    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
26	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasArguments();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.hasArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.hasArguments();	  boolean    stopAtNonOption    =    this.options.hasArguments();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
27	[BUG]  [BUGGY]  Boolean  stopAtNonOption  =  false;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Boolean  stopAtNonOption  =  false;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Boolean  stopAtNonOption  =  false;	  boolean    stopAtNonOption    =    true;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
28	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  null;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  null;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  null;	  boolean    stopAtNonOption    =    true;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
29	[BUG]  [BUGGY]  Arguments[]  arguments  =  options.opts.getArguments();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  options.opts.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  options.opts.getArguments();	  Arguments[]    arguments    =    options.options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
30	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  if(arguments!=  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  if(arguments!=  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    ||    arguments.length    ==    0)    {    if(arguments!=  null  ||  arguments.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
31	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  if(arguments  ==  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  if(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    ||    arguments.length    ==    0)    {    if(arguments  ==  null  ||  arguments.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
32	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  If(arguments!=  null  ||  arguments.length  ==  0)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  If(arguments!=  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    ||    arguments.length    ==    0)    {    If(arguments!=  null  ||  arguments.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
33	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  if(arguments  >=  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  if(arguments  >=  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    ||    arguments.length    ==    0)    {    if(arguments  >=  null  ||  arguments.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
34	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption  =  true;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption  =  true;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption  =  true;	  boolean    stopAtNonOption    =    options.stopAtNonOption    =    false;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
35	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  option.stopAtNonOption  =  false;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  option.stopAtNonOption  =  false;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  option.stopAtNonOption  =  false;	  boolean    stopAtNonOption    =    options.stopAtNonOption    =    false;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
36	[BUG]  [BUGGY]  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	If(arguments  ==  null  ||  arguments.length  ==  0)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    If(arguments    ==    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
37	[BUG]  [BUGGY]  if(arguments  ==  null)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    If(arguments    ==    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
38	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(t,  str);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
39	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  opt.getOption(str);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  opt.getOption(str);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
40	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(opt);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(opt);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(opt);	  boolean    stopAtNonOption    =    options.stopAtNonOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
41	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(options);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(options);	  boolean    stopAtNonOption    =    options.stopAtNonOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
42	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(requiredOptions);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(requiredOptions);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(requiredOptions);	  boolean    stopAtNonOption    =    options.stopAtNonOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
43	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  ||  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
44	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  ||  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
45	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
46	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  &&  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
48	[BUG]  [BUGGY]  if(arguments  ==  null  &&  arguments.length  >  0)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  &&  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
49	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length  ==  2)  {	  if(arguments    ==    null    ||    arguments.length    ==    1)    {    	compilable	  [FE]  ComparisonFailure  	61	2	replace
50	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  2)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  ==  2)  {	  if(arguments    ==    null    ||    arguments.length    ==    1)    {    	compilable	  [FE]  ComparisonFailure  	61	2	replace
51	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  if(arguments!=  null  &&  arguments.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  if(arguments!=  null  &&  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    arguments.length    ==    0)    {    if(arguments!=  null  &&  arguments.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
52	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  if(arguments  ==  null  &&  arguments.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  if(arguments  ==  null  &&  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    arguments.length    ==    0)    {    if(arguments  ==  null  &&  arguments.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
53	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  If(arguments!=  null  &&  arguments.length  ==  0)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  If(arguments!=  null  &&  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    arguments.length    ==    0)    {    If(arguments!=  null  &&  arguments.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	67	None	add
54	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  if(arguments!=  null  &&  argument.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  if(arguments!=  null  &&  argument.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    arguments.length    ==    0)    {    if(arguments!=  null  &&  argument.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
55	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasArgument();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.hasArgument();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.hasArgument();	  boolean    stopAtNonOption    =    this.options.hasArgument();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
56	[BUG]  [BUGGY]  Option[]  arguments  =  opt.getArguments();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  opt.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  opt.getArguments();	  Option[]    arguments    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
57	[BUG]  [BUGGY]  Option[]  arguments  =  option.getArguments();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  option.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  option.getArguments();	  Option[]    arguments    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
58	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(options);	  Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
59	[BUG]  [BUGGY]  Option  option  =  opt.getOption(cmd);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  opt.getOption(cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  opt.getOption(cmd);	  Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
60	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[types.size()  ]);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[types.size()  ]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[types.size()  ]);	  Arguments[]    arguments    =    cmd.toArray(new    String[ceilingOptions.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
61	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  true,  this.options.hasOption(opt));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  true,  this.options.hasOption(opt));  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  true,  this.options.hasOption(opt));	  boolean    stopAtNonOption    =    false,    this.options.hasOption(opt));    	non-compiled	[CE]  <identifier>  expected	69	None	replace
62	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  true,  options.hasOption(opt));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  true,  options.hasOption(opt));  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  true,  options.hasOption(opt));	  boolean    stopAtNonOption    =    false,    this.options.hasOption(opt));    	non-compiled	[CE]  	69	None	replace
63	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(options  ==  null  ||  arguments.length!=  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    if(arguments    ==    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
64	[BUG]  [BUGGY]  if(options  ==  null  ||  arguments.length!=  0)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options  ==  null  ||  arguments.length!=  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    if(arguments    ==    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
65	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  this.options.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  this.options.stopAtNonOption;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  this.options.stopAtNonOption;	  boolean    stopAtNonOption    =    this.options.stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  this.opts.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  this.opts.stopAtNonOption;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  this.opts.stopAtNonOption;	  boolean    stopAtNonOption    =    this.options.stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(opt);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(opt);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption(opt);	  boolean    stopAtNonOption    =    this.options.stopAtNonOption();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
68	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(true);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(true);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption(true);	  boolean    stopAtNonOption    =    this.options.stopAtNonOption();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
69	[BUG]  [BUGGY]  List  arguments  =  opt.getArguments();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  opt.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  opt.getArguments();	  List    arguments    =    opt.listIterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[options.size()  ]);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[options.size()  ]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[options.size()  ]);	  Arguments[]    arguments    =    options.toArray(new    String[cmd.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
71	[BUG]  [BUGGY]  Arguments[]  arguments  =  options.toArray(new  String[cmd.size()  -  1]);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  options.toArray(new  String[cmd.size()  -  1]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  options.toArray(new  String[cmd.size()  -  1]);	  Arguments[]    arguments    =    options.toArray(new    String[cmd.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
72	[BUG]  [BUGGY]  Arguments[]  arguments  =  options.toArray(new  String[options.size()  ]);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  options.toArray(new  String[options.size()  ]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  options.toArray(new  String[options.size()  ]);	  Arguments[]    arguments    =    options.toArray(new    String[cmd.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
73	[BUG]  [BUGGY]  List  arguments  =  this.options.addArguments(cmd);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  this.options.addArguments(cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  this.options.addArguments(cmd);	  List    arguments    =    cmd.addArguments(this.options);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
74	[BUG]  [BUGGY]  List  arguments  =  cmd.addArguments(this.options,  options);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  cmd.addArguments(this.options,  options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  cmd.addArguments(this.options,  options);	  List    arguments    =    cmd.addArguments(this.options);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
75	[BUG]  [BUGGY]  List  arguments  =  cmd.addArguments(this.options,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  cmd.addArguments(this.options,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  cmd.addArguments(this.options,  eatTheRest);	  List    arguments    =    cmd.addArguments(this.options);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
76	[BUG]  [BUGGY]  List  arguments  =  cmd.addArguments(requiredOptions);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  cmd.addArguments(requiredOptions);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  cmd.addArguments(requiredOptions);	  List    arguments    =    cmd.addArguments(this.options);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
77	[BUG]  [BUGGY]  Option  options  =  opt.getOptions(true);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  opt.getOptions(true);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  opt.getOptions(true);	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
78	[BUG]  [BUGGY]  List  arguments  =  options.getArguments();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  options.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  options.getArguments();	  List    arguments    =    cmd.getArguments();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
79	[BUG]  [BUGGY]  List  arguments  =  this.options.getArguments();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  this.options.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  this.options.getArguments();	  List    arguments    =    cmd.getArguments();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
80	[BUG]  [BUGGY]  List  arguments  =  iterator.next();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  iterator.next();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  iterator.next();	  List    arguments    =    iterator.listIterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
81	[BUG]  [BUGGY]  If(arguments  ==  null  ||  arguments.length!=  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  If(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	If(arguments  ==  null  ||  arguments.length!=  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    If(arguments    ==    null    ||    arguments.length!=    0)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
82	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOptions();	  Option    options    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
83	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  true,  requiredOptions.length  >  0;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  true,  requiredOptions.length  >  0;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  true,  requiredOptions.length  >  0;	  boolean    stopAtNonOption    =    false,    requiredOptions.length    >    0;    	non-compiled	[CE]  	30	None	replace
84	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  false,  requiredOptions.length  >  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  false,  requiredOptions.length  >  1;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  false,  requiredOptions.length  >  1;	  boolean    stopAtNonOption    =    false,    requiredOptions.length    >    0;    	non-compiled	[CE]  	30	None	replace
85	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  true,  requiredOptions.length  >  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  true,  requiredOptions.length  >  1;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  true,  requiredOptions.length  >  1;	  boolean    stopAtNonOption    =    false,    requiredOptions.length    >    0;    	non-compiled	[CE]  	30	None	replace
86	[BUG]  [BUGGY]  Option[]  arguments  =  options.opts();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  options.opts();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.opts();	  Option[]    arguments    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
87	[BUG]  [BUGGY]  Option[]  arguments  =  options.options();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  options.options();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.options();	  Option[]    arguments    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
88	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
89	[BUG]  [BUGGY]  if(intervals  ==  null  ||  arguments.length  ==  0)  {  [CE]  cannot  find  symbol  intervals  [FE]        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(intervals  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(intervals  ==  null  ||  arguments.length  ==  0)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    if(arguments    {    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  intervals	73	None	replace
90	[BUG]  [BUGGY]  if(arguments  ==  null)  {  If(arguments!=  null)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null)  {  If(arguments!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null)  {  If(arguments!=  null)  {	  if(arguments!=    null)    {    If(arguments!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
91	[BUG]  [BUGGY]  if(arguments!=  null)  {  If(arguments  ==  null)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null)  {  If(arguments  ==  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null)  {  If(arguments  ==  null)  {	  if(arguments!=    null)    {    If(arguments!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
92	[BUG]  [BUGGY]  if(options  ==  null)  {  If(arguments!=  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null)  {  If(arguments!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options  ==  null)  {  If(arguments!=  null)  {	  if(arguments!=    null)    {    If(arguments!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
93	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  -  1]);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  -  1]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  -  1]);	  Arguments[]    arguments    =    cmd.toArray(new    String[cmd.length    ]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
94	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  +  1]);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  +  1]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  +  1]);	  Arguments[]    arguments    =    cmd.toArray(new    String[cmd.length    ]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
95	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  -  2]);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  -  2]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  -  2]);	  Arguments[]    arguments    =    cmd.toArray(new    String[cmd.length    ]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
96	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  if(arguments  ==  null  ||  arguments.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  if(arguments  ==  null  ||  arguments.length  ==  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    1)    {    if(arguments  ==  null  ||  arguments.length  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
97	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  if(arguments!=  null  ||  arguments.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  if(arguments!=  null  ||  arguments.length  ==  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    1)    {    if(arguments!=  null  ||  arguments.length  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
98	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  If(arguments  ==  null  ||  arguments.length  ==  1)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  If(arguments  ==  null  ||  arguments.length  ==  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    1)    {    If(arguments  ==  null  ||  arguments.length  ==  1)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
99	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  if(arguments  ==  null  ||  arguments.length!=  1)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  if(arguments  ==  null  ||  arguments.length!=  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    1)    {    if(arguments  ==  null  ||  arguments.length!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
100	[BUG]  [BUGGY]  if(options  ==  null)  {  if(options  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null)  {  if(options  ==  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options    ==    null)    {    if(options  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
101	[BUG]  [BUGGY]  if(options  ==  null)  {  if(options!=  null)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null)  {  if(options!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options    ==    null)    {    if(options!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
102	[BUG]  [BUGGY]  if(options  ==  null)  {  If(options  ==  null)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null)  {  If(options  ==  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options    ==    null)    {    If(options  ==  null)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
103	[BUG]  [BUGGY]  if(options  ==  null)  {  if(options  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null)  {  if(options  >=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options    ==    null)    {    if(options  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
104	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  if(arguments  ==  null  ||  arguments.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  if(arguments  ==  null  ||  arguments.length  >=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    >=    0)    {    if(arguments  ==  null  ||  arguments.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
105	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  if(arguments  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  if(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    >=    0)    {    if(arguments  ==  null  ||  arguments.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
106	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  if(arguments!=  null  ||  arguments.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  if(arguments!=  null  ||  arguments.length  >=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    >=    0)    {    if(arguments!=  null  ||  arguments.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
107	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  if(arguments  ==  null  ||  arguments.length  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  if(arguments  ==  null  ||  arguments.length  >>  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    >=    0)    {    if(arguments  ==  null  ||  arguments.length  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
108	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  If(arguments  ==  null  ||  arguments.length  >=  0)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  If(arguments  ==  null  ||  arguments.length  >=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    >=    0)    {    If(arguments  ==  null  ||  arguments.length  >=  0)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
109	[BUG]  [BUGGY]  Option[]  arguments  =  opt.getParameters();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  opt.getParameters();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  opt.getParameters();	  Option[]    arguments    =    options.getParameters();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
110	[BUG]  [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
111	[BUG]  [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  If(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  If(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    If(arguments!=  null  &&  options.helpOptions().size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
112	[BUG]  [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  if(arguments  ==  null  &&  options.helpOptions().size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  if(arguments  ==  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    if(arguments  ==  null  &&  options.helpOptions().size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
113	[BUG]  [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  if(arguments  >=  null  &&  options.helpOptions().size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  if(arguments  >=  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    if(arguments  >=  null  &&  options.helpOptions().size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
114	[BUG]  [BUGGY]  Option[]  arguments  =  option.getAllRequiredOptions();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  option.getAllRequiredOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  option.getAllRequiredOptions();	  Option[]    arguments    =    options.getAllRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
115	[BUG]  [BUGGY]  Option[]  arguments  =  options.getAllArguments();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  options.getAllArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.getAllArguments();	  Option[]    arguments    =    options.getAllRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
116	[BUG]  [BUGGY]  Option[]  arguments  =  options.getAllAssignedOptions();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  options.getAllAssignedOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.getAllAssignedOptions();	  Option[]    arguments    =    options.getAllRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
117	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  if(arguments  ==  null  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  if(arguments  ==  null  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    <    2)    {    if(arguments  ==  null  ||  arguments.length  <  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
118	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  if(arguments!=  null  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  if(arguments!=  null  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    <    2)    {    if(arguments!=  null  ||  arguments.length  <  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
119	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  If(arguments  ==  null  ||  arguments.length  <  2)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  If(arguments  ==  null  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    <    2)    {    If(arguments  ==  null  ||  arguments.length  <  2)  {	  	non-compiled	[CE]  ';'  expected	75	None	add
120	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasArgs();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.hasArgs();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.hasArgs();	  boolean    stopAtNonOption    =    options.hasArg();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
121	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasArg()  ||  options.hasArg();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.hasArg()  ||  options.hasArg();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.hasArg()  ||  options.hasArg();	  boolean    stopAtNonOption    =    options.hasArg();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
122	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[requiredOptions.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[requiredOptions.size()  +  1]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[requiredOptions.size()  +  1]);	  Arguments[]    arguments    =    cmd.toArray(new    String[requiredOptions.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
123	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[requiredOptions.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[requiredOptions.size()  -  1]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[requiredOptions.size()  -  1]);	  Arguments[]    arguments    =    cmd.toArray(new    String[requiredOptions.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
124	[BUG]  [BUGGY]  Arguments[]  arguments  =  requiredOptions.toArray(new  String[cmd.size()  ]);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  requiredOptions.toArray(new  String[cmd.size()  ]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  requiredOptions.toArray(new  String[cmd.size()  ]);	  Arguments[]    arguments    =    cmd.toArray(new    String[requiredOptions.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
125	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  if(arguments!=  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  if(arguments!=  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    ||    arguments.length!=    0)    {    if(arguments!=  null  ||  arguments.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
126	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  if(arguments!=  null  ||  arguments.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  if(arguments!=  null  ||  arguments.length  >=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    ||    arguments.length!=    0)    {    if(arguments!=  null  ||  arguments.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
127	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  if(arguments  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  if(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    ||    arguments.length!=    0)    {    if(arguments  ==  null  ||  arguments.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
128	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  if(arguments!=  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  if(arguments!=  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    ||    arguments.length!=    0)    {    if(arguments!=  null  ||  arguments.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
129	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  If(arguments!=  null  ||  arguments.length!=  0)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  If(arguments!=  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null    ||    arguments.length!=    0)    {    If(arguments!=  null  ||  arguments.length!=  0)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
130	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(options);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption(options);	  boolean    stopAtNonOption    =    options.stopAtNonOption(this.options);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
131	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(this.options,  arguments);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(this.options,  arguments);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(this.options,  arguments);	  boolean    stopAtNonOption    =    options.stopAtNonOption(this.options);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
132	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length  <  1)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	compilable	  [FE]  ComparisonFailure  	76	2	replace
133	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  <  1)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	compilable	  [FE]  ComparisonFailure  	76	2	replace
134	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length!=  2)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	compilable	  [FE]  ComparisonFailure  	76	2	replace
135	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  2)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length!=  2)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	compilable	  [FE]  ComparisonFailure  	76	2	replace
136	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	compilable	  [FE]  ComparisonFailure  	76	2	replace
137	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	compilable	  [FE]  ComparisonFailure  	76	2	replace
138	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str,  t);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(this.str,  t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.str,  t);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
139	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str,  this.options);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(this.str,  this.options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.str,  this.options);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
140	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str,  cmd);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(this.str,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.str,  cmd);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
141	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(this.options,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.options,  stopAtNonOption);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
142	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(options);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  this.options.getOption(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  this.options.getOption(options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
143	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.options,  t);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
144	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  this.options.hasOption(opt));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  this.options.hasOption(opt));  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  this.options.hasOption(opt));	  boolean    stopAtNonOption    =    options.stopAtNonOption    ||    this.options.hasOption(opt));    	non-compiled	[CE]  	56	None	replace
145	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  options.hasOption(opt));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  options.hasOption(opt));  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption  ||  options.hasOption(opt));	  boolean    stopAtNonOption    =    options.stopAtNonOption    ||    this.options.hasOption(opt));    	non-compiled	[CE]  	56	None	replace
146	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption  &&  this.options.hasOption(opt));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption  &&  this.options.hasOption(opt));  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption  &&  this.options.hasOption(opt));	  boolean    stopAtNonOption    =    options.stopAtNonOption    ||    this.options.hasOption(opt));    	non-compiled	[CE]  	56	None	replace
147	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  -  1]);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  -  1]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  -  1]);	  Arguments[]    arguments    =    cmd.toArray(new    String[cmd.length()    ]);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
148	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  +  1]);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  +  1]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  +  1]);	  Arguments[]    arguments    =    cmd.toArray(new    String[cmd.length()    ]);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
149	[BUG]  [BUGGY]  List  arguments  =  cmd.addArguments(this.options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  cmd.addArguments(this.options,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  cmd.addArguments(this.options,  stopAtNonOption);	  List    arguments    =    cmd.addArguments(this.options);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
150	[BUG]  [BUGGY]  if(options  ==  null)  {  If(arguments  ==  null  ||  arguments.length!=  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null)  {  If(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options  ==  null)  {  If(arguments  ==  null  ||  arguments.length!=  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    If(arguments    ==    null    ||    arguments.length!=    0)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
151	[BUG]  [BUGGY]  if(stopAtNonOption)  {  If(arguments!=  null)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(stopAtNonOption)  {  If(arguments!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(stopAtNonOption)  {  If(arguments!=  null)  {	  if(arguments!=    null)    {    If(arguments!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
152	[BUG]  [BUGGY]  if(!eatTheRest)  {  If(arguments!=  null)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  If(arguments!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(!eatTheRest)  {  If(arguments!=  null)  {	  if(arguments!=    null)    {    If(arguments!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
153	[BUG]  [BUGGY]  if(eatTheRest)  {  If(arguments!=  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  If(arguments!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(eatTheRest)  {  If(arguments!=  null)  {	  if(arguments!=    null)    {    If(arguments!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
154	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(this.str,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.str,  eatTheRest);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
155	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(this.str,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.str,  stopAtNonOption);	  Option    option    =    options.getOption(this.str);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(stopAtNonOption)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(stopAtNonOption)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    if(arguments!=    null    ||    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	42	2	replace
157	[BUG]  [BUGGY]  if(stopAtNonOption)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(stopAtNonOption)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(stopAtNonOption)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    if(arguments!=    null    ||    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	42	2	replace
158	[BUG]  [BUGGY]  Option  options  =  options.findOptions();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  options.findOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  options.findOptions();	  Option    options    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
159	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options!=  null  &&  this.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options!=  null  &&  this.stopAtNonOption;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options!=  null  &&  this.stopAtNonOption;	  boolean    stopAtNonOption    =    this.options.stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
160	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  options.getRequiredOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  &&  options.getRequiredOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
161	[BUG]  [BUGGY]  if(arguments!=  null  &&  options.getRequiredOptions().size()  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  options.getRequiredOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  &&  options.getRequiredOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
162	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options!=  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(options!=  null  &&  options.helpOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
163	[BUG]  [BUGGY]  if(options!=  null  &&  options.helpOptions().size()  >  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options!=  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options!=  null  &&  options.helpOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
164	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(!eatTheRest)  {	  if(arguments!=    null)    {    if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	9	2	replace
165	[BUG]  [BUGGY]  if(!eatTheRest)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(!eatTheRest)  {	  if(arguments!=    null)    {    if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	9	2	replace
166	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(cmd);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption(cmd);	  boolean    stopAtNonOption    =    this.options.stopAtNonOption();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
167	[BUG]  [BUGGY]  List  arguments  =  cmd.getArguments(t);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  cmd.getArguments(t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  cmd.getArguments(t);	  List    arguments    =    cmd.getArguments();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
168	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption);	  Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
169	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[params.size()  ]);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[params.size()  ]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[params.size()  ]);	  Arguments[]    arguments    =    cmd.toArray(new    String[requiredOptions.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
170	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  &&  arguments.length!=  0)  {	  if(arguments!=    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
171	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length!=  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  &&  arguments.length!=  0)  {	  if(arguments!=    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
172	[BUG]  [BUGGY]  if(arguments  ==  null  ||  argument.length!=  0)  {  [CE]  cannot  find  symbol  argument  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  argument.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  argument.length!=  0)  {	  if(arguments!=    null    ||    arguments.length!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  argument	71	None	replace
173	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  &&  arguments.length  ==  0)  {	  if(arguments!=    null    &&    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	68	2	replace
174	[BUG]  [BUGGY]  if(arguments  ==  null  &&  arguments.length  ==  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  &&  arguments.length  ==  0)  {	  if(arguments!=    null    &&    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	68	2	replace
175	[BUG]  [BUGGY]  List  arguments  =  iterator.getArguments();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  iterator.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  iterator.getArguments();	  List    arguments    =    iterator.listIterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
176	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArg(true,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArg(true,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.hasArg(true,  stopAtNonOption);	  boolean    stopAtNonOption    =    this.options.hasArg(true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
177	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(this.options,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.options,  eatTheRest);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
178	[BUG]  [BUGGY]  if(options  ==  null)  {  Option  options  ==  null)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null)  {  Option  options  ==  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options    ==    null)    {    Option  options  ==  null)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
179	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  opt.stopAtNonOption  =  false;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  opt.stopAtNonOption  =  false;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  opt.stopAtNonOption  =  false;	  boolean    stopAtNonOption    =    options.stopAtNonOption    =    false;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
180	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOptions;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOptions;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOptions;	  boolean    stopAtNonOption    =    options.stopAtNonOptions;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
181	[BUG]  [BUGGY]  Option[]  arguments  =  options.getRequiredParameters();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  options.getRequiredParameters();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.getRequiredParameters();	  Option[]    arguments    =    options.getParameters();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
182	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length!=  1)  {	  if(arguments    ==    null    ||    arguments.length    ==    1)    {    	compilable	  [FE]  ComparisonFailure  	61	2	replace
183	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length!=  1)  {	  if(arguments    ==    null    ||    arguments.length    ==    1)    {    	compilable	  [FE]  ComparisonFailure  	61	2	replace
184	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(this.options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(this.options,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(this.options,  stopAtNonOption);	  boolean    stopAtNonOption    =    options.stopAtNonOption(this.options);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
185	[BUG]  [BUGGY]  if(stopAtNonOption)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(stopAtNonOption)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(stopAtNonOption)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    If(arguments    ==    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
186	[BUG]  [BUGGY]  if(options  ==  null)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options  ==  null)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    If(arguments    ==    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
187	[BUG]  [BUGGY]  List  arguments  =  this.opts.listIterator();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  this.opts.listIterator();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  this.opts.listIterator();	  List    arguments    =    opt.listIterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
188	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  cmd.hasArguments();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  cmd.hasArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  cmd.hasArguments();	  boolean    stopAtNonOption    =    this.options.hasArguments();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
189	[BUG]  [BUGGY]  List  arguments  =  this.cmd.getArguments();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  this.cmd.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  this.cmd.getArguments();	  List    arguments    =    this.cmd.listIterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
190	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.opts.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.opts.stopAtNonOption;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.opts.stopAtNonOption;	  boolean    stopAtNonOption    =    opt.stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
191	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.stopAtNonOption;  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.stopAtNonOption;	  boolean    stopAtNonOption    =    opt.stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
192	[BUG]  [BUGGY]  List  arguments  =  this.cmd.listArguments();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  this.cmd.listArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  this.cmd.listArguments();	  List    arguments    =    this.cmd.listIterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
193	[BUG]  [BUGGY]  if(options  ==  null)  {  if(options  {  null)  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null)  {  if(options  {  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options    ==    null)    {    if(options  {  null)  {	  	non-compiled	[CE]  ')'  expected	58	None	add
194	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  if(arguments  {  null  ||  arguments.length  <  2)  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  if(arguments  {  null  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    <    2)    {    if(arguments  {  null  ||  arguments.length  <  2)  {	  	non-compiled	[CE]  ')'  expected	75	None	add
195	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(false,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(false,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(false,  stopAtNonOption);	  boolean    stopAtNonOption    =    options.stopAtNonOption(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
196	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(str);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  this.options.getOption(str);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  this.options.getOption(str);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
197	[BUG]  [BUGGY]  Arguments[]  arguments  =  this.options.getArgumentsArray();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  this.options.getArgumentsArray();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  this.options.getArgumentsArray();	  Arguments[]    arguments    =    this.options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
198	[BUG]  [BUGGY]  Option[]  arguments  =  this.options.getArguments();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  this.options.getArguments();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  this.options.getArguments();	  Option[]    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
199	[BUG]  [BUGGY]  Option[]  arguments  =  options.getArgumentsForOptions();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  options.getArgumentsForOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.getArgumentsForOptions();	  Option[]    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
200	[BUG]  [BUGGY]  List  arguments  =  options.addArguments(arguments);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  options.addArguments(arguments);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  options.addArguments(arguments);	  List    arguments    =    opt.listIterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
201	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  if(arguments  {  null  ||  arguments.length  ==  1)  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  if(arguments  {  null  ||  arguments.length  ==  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    1)    {    if(arguments  {  null  ||  arguments.length  ==  1)  {	  	non-compiled	[CE]  ')'  expected	60	None	add
202	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	compilable	  [FE]  ComparisonFailure  	76	2	replace
203	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	compilable	  [FE]  ComparisonFailure  	76	2	replace
204	[BUG]  [BUGGY]  Arguments[]  arguments  =  options.toArray(new  String[cmd.size()  ],  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  options.toArray(new  String[cmd.size()  ],  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  options.toArray(new  String[cmd.size()  ],  stopAtNonOption);	  Arguments[]    arguments    =    options.toArray(new    String[cmd.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
205	[BUG]  [BUGGY]  List  arguments  =  this.options.getIterator();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  List  arguments  =  this.options.getIterator();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  this.options.getIterator();	  List    arguments    =    this.options.listIterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
206	[BUG]  [BUGGY]  Option  options  =  options.addOption(t);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  options.addOption(t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  options.addOption(t);	  Option    options    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
207	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(this.eatTheRest);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption(this.eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption(this.eatTheRest);	  boolean    stopAtNonOption    =    this.options.stopAtNonOption();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
208	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    arguments    =    cmd.addArguments(this.options);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
209	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  -  2]);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  -  2]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  -  2]);	  Arguments[]    arguments    =    cmd.toArray(new    String[cmd.length()    ]);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
210	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  this.options!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(options  ==  null  ||  this.options!=  null)  {	  if(options    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	59	2	replace
211	[BUG]  [BUGGY]  if(options  ==  null  ||  this.options!=  null)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  this.options!=  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options  ==  null  ||  this.options!=  null)  {	  if(options    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	59	2	replace
212	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  this.options  ==  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(options  ==  null  ||  this.options  ==  null)  {	  if(options    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	59	2	replace
213	[BUG]  [BUGGY]  if(options  ==  null  ||  this.options  ==  null)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  this.options  ==  null)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options  ==  null  ||  this.options  ==  null)  {	  if(options    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	59	2	replace
214	[BUG]  [BUGGY]  Option[]  arguments  =  options.getAllParameters();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option[]  arguments  =  options.getAllParameters();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.getAllParameters();	  Option[]    arguments    =    options.getParameters();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
215	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  options.getOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  &&  options.getOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
216	[BUG]  [BUGGY]  if(arguments!=  null  &&  options.getOptions().size()  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  options.getOptions().size()  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  &&  options.getOptions().size()  >  0)  {	  if(arguments!=    null    &&    options.helpOptions().size()    >    0)    {    	compilable	  [FE]  ComparisonFailure  	66	2	replace
217	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[ceilingOptions.size()  -  1]);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[ceilingOptions.size()  -  1]);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[ceilingOptions.size()  -  1]);	  Arguments[]    arguments    =    cmd.toArray(new    String[ceilingOptions.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
