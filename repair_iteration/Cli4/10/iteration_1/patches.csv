bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option[]  arguments  =  options.helpOptions();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option[]  arguments  =  options.helpOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.helpOptions();	      Option[]    arguments    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  Option  options  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  options  =  opt.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  opt.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  Option  options  =  this.options.getOptions();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  options  =  this.options.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  this.options.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  option.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  List  arguments  =  this.options.listIterator();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  List  arguments  =  this.options.listIterator();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  this.options.listIterator();	      List    arguments    =    cmd.listIterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  List  arguments  =  iterator.listIterator();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  List  arguments  =  iterator.listIterator();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  iterator.listIterator();	      List    arguments    =    cmd.listIterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]  List  arguments  =  opt.listIterator();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  List  arguments  =  opt.listIterator();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  opt.listIterator();	      List    arguments    =    cmd.listIterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption;  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption;	      boolean    stopAtNonOption    =    this.options.stopAtNonOption    =    true;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
9	[BUG]  [BUGGY]  if(arguments!=  null)  {  if(arguments!=  null)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null)  {  if(arguments!=  null)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null)    {    if(arguments!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
10	[BUG]  [BUGGY]  if(arguments!=  null)  {  if(arguments  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null)  {  if(arguments  ==  null)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null)    {    if(arguments  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
11	[BUG]  [BUGGY]  if(arguments!=  null)  {  If(arguments!=  null)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null)  {  If(arguments!=  null)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null)    {    If(arguments!=  null)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
12	[BUG]  [BUGGY]  if(arguments!=  null)  {  if(arguments  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null)  {  if(arguments  >=  null)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=    null)    {    if(arguments  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length  >=  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	15	2	replace
14	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  >=  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	15	2	replace
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  ||  arguments.length  ==  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	15	2	replace
16	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  ||  arguments.length  ==  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	15	2	replace
17	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArguments();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArguments();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.hasArguments();	      boolean    stopAtNonOption    =    this.options.hasArg();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
18	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.hasArg();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  options.hasArg();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.hasArg();	      boolean    stopAtNonOption    =    this.options.hasArg();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
19	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  if(arguments  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  if(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length!=    0)    {    if(arguments  ==  null  ||  arguments.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
20	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  if(arguments!=  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  if(arguments!=  null  ||  arguments.length!=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length!=    0)    {    if(arguments!=  null  ||  arguments.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
21	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  if(arguments  ==  null  ||  arguments.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  if(arguments  ==  null  ||  arguments.length  >=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length!=    0)    {    if(arguments  ==  null  ||  arguments.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
22	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  If(arguments  ==  null  ||  arguments.length!=  0)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  If(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length!=    0)    {    If(arguments  ==  null  ||  arguments.length!=  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
23	[BUG]  [BUGGY]  Option[]  arguments  =  options.getArguments();  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option[]  arguments  =  options.getArguments();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.getArguments();	      Option[]    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  Option[]  arguments  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option[]  arguments  =  opt.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  opt.getOptions();	      Option[]    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  Option[]  arguments  =  options.getParameters();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option[]  arguments  =  options.getParameters();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.getParameters();	      Option[]    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  ]);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  ]);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length()  ]);	      Arguments[]    arguments    =    cmd.toArray(new    String[cmd.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
27	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  ]);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  ]);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[cmd.length  ]);	      Arguments[]    arguments    =    cmd.toArray(new    String[cmd.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
28	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[requiredOptions.size()  ]);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[requiredOptions.size()  ]);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[requiredOptions.size()  ]);	      Arguments[]    arguments    =    cmd.toArray(new    String[cmd.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
29	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  true;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  true;  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  true;	      boolean    stopAtNonOption    =    false;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  false,  requiredOptions.length  >  0;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  false,  requiredOptions.length  >  0;  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  false,  requiredOptions.length  >  0;	      boolean    stopAtNonOption    =    false;    	non-compiled	[CE]  	10	None	replace
31	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption  =  false;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption  =  false;  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption  =  false;	      boolean    stopAtNonOption    =    this.options.stopAtNonOption    =    false;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
32	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption();	      boolean    stopAtNonOption    =    options.stopAtNonOption();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(true);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(true);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(true);	      boolean    stopAtNonOption    =    options.stopAtNonOption();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(this.options);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(this.options);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(this.options);	      boolean    stopAtNonOption    =    options.stopAtNonOption();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  option.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  option.stopAtNonOption;  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  option.stopAtNonOption;	      boolean    stopAtNonOption    =    options.stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOptions;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOptions;  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOptions;	      boolean    stopAtNonOption    =    options.stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(opt);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(str);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(str);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(this.options);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.options);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(cmd);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(cmd);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  if(arguments  ==  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  if(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    0)    {    if(arguments  ==  null  ||  arguments.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
42	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  if(arguments!=  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  if(arguments!=  null  ||  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    0)    {    if(arguments!=  null  ||  arguments.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
43	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  If(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    0)    {    If(arguments  ==  null  ||  arguments.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
44	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  if(arguments  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  if(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    0)    {    if(arguments  ==  null  ||  arguments.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
45	[BUG]  [BUGGY]  Arguments[]  arguments  =  opt.getArguments();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Arguments[]  arguments  =  opt.getArguments();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  opt.getArguments();	      Arguments[]    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
46	[BUG]  [BUGGY]  Arguments[]  arguments  =  options.options.getArguments();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Arguments[]  arguments  =  options.options.getArguments();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  options.options.getArguments();	      Arguments[]    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
47	[BUG]  [BUGGY]  Arguments[]  arguments  =  option.getArguments();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Arguments[]  arguments  =  option.getArguments();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  option.getArguments();	      Arguments[]    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
48	[BUG]  [BUGGY]  List  arguments  =  cmd.getArguments();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  List  arguments  =  cmd.getArguments();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  cmd.getArguments();	      List    arguments    =    cmd.listIterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]  List  arguments  =  cmd.addArguments(this.options);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  List  arguments  =  cmd.addArguments(this.options);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  cmd.addArguments(this.options);	      List    arguments    =    cmd.listIterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(cmd);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption(cmd);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption(cmd);	      boolean    stopAtNonOption    =    options.stopAtNonOption();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[ceilingOptions.size()  ]);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Arguments[]  arguments  =  cmd.toArray(new  String[ceilingOptions.size()  ]);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  cmd.toArray(new  String[ceilingOptions.size()  ]);	      Arguments[]    arguments    =    cmd.toArray(new    String[cmd.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
52	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArg(true);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArg(true);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.hasArg(true);	      boolean    stopAtNonOption    =    this.options.hasArg();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
53	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArgument();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  this.options.hasArgument();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  this.options.hasArgument();	      boolean    stopAtNonOption    =    this.options.hasArg();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
54	[BUG]  [BUGGY]  Option[]  arguments  =  options.getAllRequiredOptions();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option[]  arguments  =  options.getAllRequiredOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option[]  arguments  =  options.getAllRequiredOptions();	      Option[]    arguments    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
55	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  opt.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  opt.stopAtNonOption;  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  opt.stopAtNonOption;	      boolean    stopAtNonOption    =    options.stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
56	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption  ||  this.options.hasOption(opt));  [CE]  [FE]                ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption  ||  this.options.hasOption(opt));  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption  ||  this.options.hasOption(opt));	      boolean    stopAtNonOption    =    options.stopAtNonOption;    	non-compiled	[CE]  	13	None	replace
57	[BUG]  [BUGGY]  Option  options  =  options.helpOptions();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  options  =  options.helpOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  options  =  options.helpOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(options  ==  null)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(options  ==  null)  {	  if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
59	[BUG]  [BUGGY]  if(options  ==  null)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(options  ==  null)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(options  ==  null)  {	  if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
60	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length  ==  1)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	9	2	replace
61	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  ==  1)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	9	2	replace
62	[BUG]  [BUGGY]  Arguments[]  arguments  =  this.options.getArguments();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Arguments[]  arguments  =  this.options.getArguments();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  this.options.getArguments();	      Arguments[]    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  &&  arguments.length  >  0)  {	  if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
64	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  &&  arguments.length  >  0)  {	  if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
65	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {	  if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
66	[BUG]  [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  &&  options.helpOptions().size()  >  0)  {	  if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
67	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  &&  arguments.length  ==  0)  {	  if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
68	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  &&  arguments.length  ==  0)  {	  if(arguments!=    null)    {    	compilable	  [FE]  ComparisonFailure  	7	2	replace
69	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  false,  this.options.hasOption(opt));  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  boolean  stopAtNonOption  =  false,  this.options.hasOption(opt));  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	boolean  stopAtNonOption  =  false,  this.options.hasOption(opt));	      boolean    stopAtNonOption    =    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
70	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null  ||  arguments.length!=  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	15	2	replace
71	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  ||  arguments.length!=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null  ||  arguments.length!=  0)  {	  if(arguments    ==    null    ||    arguments.length!=    0)    {    	compilable	  [FE]  ComparisonFailure  	15	2	replace
72	[BUG]  [BUGGY]  List  arguments  =  this.cmd.listIterator();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  List  arguments  =  this.cmd.listIterator();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	List  arguments  =  this.cmd.listIterator();	      List    arguments    =    cmd.listIterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
73	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  if(arguments  {  null  ||  arguments.length  ==  0)  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  if(arguments  {  null  ||  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments    ==    null    ||    arguments.length    ==    0)    {    if(arguments  {  null  ||  arguments.length  ==  0)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
74	[BUG]  [BUGGY]  Arguments[]  arguments  =  options.toArray(new  String[cmd.size()  ]);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Arguments[]  arguments  =  options.toArray(new  String[cmd.size()  ]);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Arguments[]  arguments  =  options.toArray(new  String[cmd.size()  ]);	      Arguments[]    arguments    =    cmd.toArray(new    String[cmd.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
75	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	9	2	replace
76	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	9	2	replace
77	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(this.str);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	Option  option  =  options.getOption(this.str);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
