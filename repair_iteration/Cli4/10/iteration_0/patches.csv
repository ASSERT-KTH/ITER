bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Option[]  arguments  =  options.getOptions();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Option[]  arguments  =  options.getOptions();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Option[]  arguments  =  options.getOptions();		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
2	[BUG]  [BUGGY]    Option[]  arguments  =  options.getRequiredOptions();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Option[]  arguments  =  options.getRequiredOptions();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Option[]  arguments  =  options.getRequiredOptions();		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
3	[BUG]  [BUGGY]    Option  option  =  options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]        ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Option  option  =  options.getOption(t);  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Option  option  =  options.getOption(t);		non-compiled	[CE]  cannot  find  symbol  t	21	None	add
4	[BUG]  [BUGGY]    Option  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Option  options  =  options.getOptions();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Option  options  =  options.getOptions();		non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
5	[BUG]  [BUGGY]    Option[]  arguments  =  options.getRequiredArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Option[]  arguments  =  options.getRequiredArguments();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Option[]  arguments  =  options.getRequiredArguments();		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]  if(arguments!=  null)  {  [BUGGY]  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments!=  null)  {	if  (arguments  ==  null)  {  	compilable	  [FE]  ComparisonFailure  	20	2	replace
7	[BUG]  [BUGGY]  if(arguments!=  null)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]  if(arguments!=  null)  {  [BUGGY]  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments!=  null)  {	if  (arguments  ==  null)  {  	compilable	  [FE]  ComparisonFailure  	20	2	replace
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length  ==  0)  {	if  (arguments  ==  null)  {  	compilable	  [FE]  ComparisonFailure  	20	2	replace
9	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length  ==  0)  {	if  (arguments  ==  null)  {  	compilable	  [FE]  ComparisonFailure  	20	2	replace
10	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  false;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    boolean  stopAtNonOption  =  false;  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    boolean  stopAtNonOption  =  false;		non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
11	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  options.stopAtNonOption();  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    boolean  stopAtNonOption  =  options.stopAtNonOption();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    boolean  stopAtNonOption  =  options.stopAtNonOption();		non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
12	[BUG]  [BUGGY]    List  arguments  =  cmd.listIterator();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    List  arguments  =  cmd.listIterator();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    List  arguments  =  cmd.listIterator();		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
13	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  options.stopAtNonOption;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    boolean  stopAtNonOption  =  options.stopAtNonOption;  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    boolean  stopAtNonOption  =  options.stopAtNonOption;		non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	add	if(arguments  ==  null  ||  arguments.length!=  0)  {	if  (arguments  ==  null)  {  	compilable	  [FE]  ComparisonFailure  	20	2	replace
15	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	if(arguments  ==  null  ||  arguments.length!=  0)  {	if  (arguments  ==  null)  {  	compilable	  [FE]  ComparisonFailure  	20	2	replace
16	[BUG]  [BUGGY]    Arguments[]  arguments  =  cmd.toArray(new  String[cmd.size()  ]);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Arguments[]  arguments  =  cmd.toArray(new  String[cmd.size()  ]);  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Arguments[]  arguments  =  cmd.toArray(new  String[cmd.size()  ]);		non-compiled	[CE]  cannot  find  symbol	21	None	add
17	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  this.options.stopAtNonOption  =  false;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    boolean  stopAtNonOption  =  this.options.stopAtNonOption  =  false;  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    boolean  stopAtNonOption  =  this.options.stopAtNonOption  =  false;		non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
18	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  this.options.hasArg();  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    boolean  stopAtNonOption  =  this.options.hasArg();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    boolean  stopAtNonOption  =  this.options.hasArg();		non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
19	[BUG]  [BUGGY]    Arguments[]  arguments  =  options.getArguments();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    Arguments[]  arguments  =  options.getArguments();  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    Arguments[]  arguments  =  options.getArguments();		non-compiled	[CE]  cannot  find  symbol	21	None	add
20	[BUG]  [BUGGY]    boolean  stopAtNonOption  =  this.options.stopAtNonOption  =  true;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  [BUGGY]    boolean  stopAtNonOption  =  this.options.stopAtNonOption  =  true;  [BUGGY]  if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	148	149	2	replace	    boolean  stopAtNonOption  =  this.options.stopAtNonOption  =  true;		non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	add
