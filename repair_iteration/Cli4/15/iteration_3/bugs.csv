bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	50	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  options  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  options  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  options  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	50	None	replace
4	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    If(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
5	[BUG]  [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption ",  str);  [CE]  cannot  find  symbol  str  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption ",  str);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption( "stopAtNonOption ",  str);	  Option    cmd    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  cannot  find  symbol  str	11	None	replace
6	[BUG]  [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption "  +  str);  [CE]  cannot  find  symbol  str  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption "  +  str);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption( "stopAtNonOption "  +  str);	  Option    cmd    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  cannot  find  symbol  str	11	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt   ",  stopAtNonOption).getOption( "stopAtNonOption ");  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opt   ",  stopAtNonOption).getOption( "stopAtNonOption ");  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt   ",  stopAtNonOption).getOption( "stopAtNonOption ");	  Option    option    =    options.getOption(   "opt   ",    str).getOption(   "stopAtNonOption       ");    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	3	None	replace
8	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt   ",  t).getOption( "stopAtNonOption   ");  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opt   ",  t).getOption( "stopAtNonOption   ");  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt   ",  t).getOption( "stopAtNonOption   ");	  Option    option    =    options.getOption(   "opt   ",    str).getOption(   "stopAtNonOption       ");    	non-compiled	[CE]  cannot  find  symbol  t	3	None	replace
9	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(!stopAtNonOption)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	compilable	  [FE]  IllegalArgumentException  	39	2	replace
10	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	compilable	  [FE]  IllegalArgumentException  	39	2	replace
11	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
12	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(options);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  t	28	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [CE]  cannot  find  symbol  t  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(t,  arguments);	  Option    option    =    options.getOption(options);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  t	28	None	replace
15	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t,  arguments);	  Option    cmd    =    options.getOption(options);    if(cmd!=    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  t	86	None	replace
16	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  if(cmd!=  null)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  if(cmd!=  null)  {  cmd.addArg(str);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t,  arguments);  if(cmd!=  null)  {  cmd.addArg(str);  }	  Option    cmd    =    options.getOption(options);    if(cmd!=    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  t	86	None	replace
17	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(options,  str);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(options,  str);	  Option    cmd    =    options.getOption(options);    if(cmd!=    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  str	86	None	replace
18	[BUG]  [BUGGY]  if(options!=  null)  {  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(options!=  null)  {  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(options!=  null)  {  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }	  Ilerator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
19	[BUG]  [BUGGY]  if(options!=  null)  {  IllegalArgumentIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(options!=  null)  {  IllegalArgumentIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(options!=  null)  {  IllegalArgumentIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }	  Ilerator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
20	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	72	None	replace
21	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	aughtExceptionHandler.throwInternal();	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	72	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequireOptions();  }  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequireOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequireOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
23	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ").getOption( "stopAtNonOption ",  t);  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opt ").getOption( "stopAtNonOption ",  t);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt ").getOption( "stopAtNonOption ",  t);	  Option    option    =    options.getOption(   "opt   ").getOption(   "stopAtNonOption   ",    str);    	non-compiled	[CE]  cannot  find  symbol  t	1	None	replace
28	[BUG]  [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
29	[BUG]  [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
30	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
31	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(arguments,  stopAtNonOption);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	6	None	replace
33	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(options,  arguments);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(options,  arguments);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	6	None	replace
34	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(arguments,  str);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(arguments,  str);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  cannot  find  symbol  str	6	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(.   " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(.   " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(.   " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(.   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
36	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options);  if(cmd!=  null)  {  cmd.addArg(t);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(options);  if(cmd!=  null)  {  cmd.addArg(t);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(options);  if(cmd!=  null)  {  cmd.addArg(t);  }	  Option    cmd    =    options.getOption(str);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	33	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryCandidate();  }  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryCandidate();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryCandidate();  }	  tryCandidate(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
38	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tryCandidate(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  tryCandidate(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  tryCandidate(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryCandidate(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
39	[BUG]  [BUGGY]  parse(cmd,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(cmd,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(cmd,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryCandidate(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
40	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tryCandidate(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  tryCandidate(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  tryCandidate(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  }	  tryCandidate(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
41	[BUG]  [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  opts.values().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	53	None	replace
42	[BUG]  [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(t);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(t);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(t);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
43	[BUG]  [BUGGY]  while(stopAtNonOption  &&  iterator.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  while(stopAtNonOption  &&  iterator.hasNext())  {  cmd.addArg(t);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	while(stopAtNonOption  &&  iterator.hasNext())  {  cmd.addArg(t);	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
44	[BUG]  [BUGGY]  while(stopAtNonOption  &&  iterator.hasNext())  {  cmd.addArg(t);  }  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  while(stopAtNonOption  &&  iterator.hasNext())  {  cmd.addArg(t);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	while(stopAtNonOption  &&  iterator.hasNext())  {  cmd.addArg(t);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  t	16	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  while(stopAtNonOption  &&  iterator.hasNext())  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	while(stopAtNonOption  &&  iterator.hasNext())  {  checkRequiredOptions();  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	compilable	  [FE]  AssertionFailedError  	16	2	replace
46	[BUG]  [BUGGY]  while(stopAtNonOption  &&  iterator.hasNext())  {  checkRequiredOptions();  }  [FE]  AssertionFailedError  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  while(stopAtNonOption  &&  iterator.hasNext())  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	while(stopAtNonOption  &&  iterator.hasNext())  {  checkRequiredOptions();  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	compilable	  [FE]  AssertionFailedError  	16	2	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String[]    arguments    =    iterator.next().getArguments();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	51	None	replace
48	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  if(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  if(  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  if(	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String[]    arguments    =    iterator.next().getArguments();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
49	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  if  [CE]  '('  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  if  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  if	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String[]    arguments    =    iterator.next().getArguments();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  '('  expected	51	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String[]    arguments    =    iterator.next().getArguments();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
51	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
52	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
53	[BUG]  [BUGGY]  parseAndClearBuffer(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseAndClearBuffer(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseAndClearBuffer(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
54	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)        {        checkRequiredOptions();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	2	add
55	[BUG]  [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)        {        checkRequiredOptions();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	2	add
56	[BUG]  [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  getRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  getRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)        {        checkRequiredOptions();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(stopAtNonOption)  {  getRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
57	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    	compilable	  [FE]  IllegalArgumentException  	56	2	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    	compilable	  [FE]  IllegalArgumentException  	56	2	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(true);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(true);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(true);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
60	[BUG]  [BUGGY]  requiredOptions  =  options.stopAtNonOption;  [CE]  cannot  find  symbol  stopAtNonOption  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  options.stopAtNonOption;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  options.stopAtNonOption;	  requiredOptions    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	45	None	replace
61	[BUG]  [BUGGY]  requiredOptions  =  options;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  options;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  options;	  requiredOptions    =    stopAtNonOption;    	non-compiled	[CE]  incompatible  types	45	None	replace
62	[BUG]  [BUGGY]  requiredOptions  =  options.requireAtNonOptions;  [CE]  cannot  find  symbol  requireAtNonOptions  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  options.requireAtNonOptions;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  options.requireAtNonOptions;	  requiredOptions    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol  requireAtNonOptions	45	None	replace
63	[BUG]  [BUGGY]  requiredOptions  =  stopAtNonOptions  ||  eatTheRest;  [CE]  cannot  find  symbol  stopAtNonOptions  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  stopAtNonOptions  ||  eatTheRest;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  stopAtNonOptions  ||  eatTheRest;	  requiredOptions    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOptions	45	None	replace
64	[BUG]  [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  this.arguments.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	replace
65	[BUG]  [BUGGY]  Iterator  iterator  =  properties.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  iterator  =  properties.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  properties.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)    ==    checkRequiredOptions();    }    	compilable	  [FE]  AssertionFailedError  	85	2	replace
67	[BUG]  [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)    ==    checkRequiredOptions();    }    	compilable	  [FE]  AssertionFailedError  	85	2	replace
68	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(!stopAtNonOption)        {        checkRequiredOptions();        }        if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	40	2	add
69	[BUG]  [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)        {        checkRequiredOptions();        }        if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	40	2	add
70	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(!stopAtNonOption)        {        checkRequiredOptions();        }        if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	40	2	add
71	[BUG]  [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)        {        checkRequiredOptions();        }        if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	40	2	add
72	[BUG]  [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions()  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions()  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)        {        checkRequiredOptions();        }        if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions()	  	non-compiled	[CE]  ';'  expected	40	None	add
73	[BUG]  [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)        {        checkRequiredOptions();        }        if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
74	[BUG]  [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRe  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRe  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)        {        checkRequiredOptions();        }        if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRe	  	non-compiled	[CE]  ';'  expected	40	None	add
75	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  cannot  find  symbol  t  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option    cmd    =    options.getOption(t);    if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  t	68	None	replace
76	[BUG]  [BUGGY]  Ilerator  iterator  =  options.keySet().iterator();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Ilerator  iterator  =  options.keySet().iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  iterator  =  options.keySet().iterator();	  Ilerator    iterator    =    options.iterator();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
77	[BUG]  [BUGGY]  Ilerator  iterator  =  opts.iterator();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Ilerator  iterator  =  opts.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  iterator  =  opts.iterator();	  Ilerator    iterator    =    options.iterator();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
78	[BUG]  [BUGGY]  tehnică  log.warning( "msg.bad.required.properties ");  }  [CE]  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnică  log.warning( "msg.bad.required.properties ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnică  log.warning( "msg.bad.required.properties ");  }	  if(stopAtNonOption)    {    log.warning(   "msg.bad.required.properties   ");    }    	non-compiled	[CE]  	76	None	replace
79	[BUG]  [BUGGY]  tehnicăLog.warning( "msg.bad.required.properties ");  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnicăLog.warning( "msg.bad.required.properties ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicăLog.warning( "msg.bad.required.properties ");  }	  if(stopAtNonOption)    {    log.warning(   "msg.bad.required.properties   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
80	[BUG]  [BUGGY]  if(stopAtNonOption)  {  cmd.warning( "msg.bad.required.properties ");  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  cmd.warning( "msg.bad.required.properties ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  cmd.warning( "msg.bad.required.properties ");  }	  if(stopAtNonOption)    {    log.warning(   "msg.bad.required.properties   ");    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
81	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
82	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
83	[BUG]  [BUGGY]  parseOption(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseOption(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseOption(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
84	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  cannot  find  symbol  t  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option    option    =    options.getOption(t);    if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  t	67	None	replace
85	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  Option>  iterator  =  options.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  Option>  iterator  =  options.iterator();	  Iterator    <    Option>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	74	None	replace
86	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }	  Iterator    <    Option>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	74	None	replace
87	[BUG]  [BUGGY]  Ilerator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Ilerator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());	  Iterator    <    Option>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
88	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    CommandLine    cmd    =(CommandLine)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	48	None	replace
89	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    CommandLine    cmd    =(CommandLine)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
90	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  options  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  options  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  options  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    CommandLine    cmd    =(CommandLine)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	48	None	replace
91	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opts ").getOption( "stopAtNonOption, ");  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opts ").getOption( "stopAtNonOption, ");  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opts ").getOption( "stopAtNonOption, ");	  Option    option    =    options.getOption(   "opts   ").getOption(   "stopAtNonOption       ");    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
92	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opts ",  str).getOption( "stopAtNonOption   ");  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opts ",  str).getOption( "stopAtNonOption   ");  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opts ",  str).getOption( "stopAtNonOption   ");	  Option    option    =    options.getOption(   "opts   ").getOption(   "stopAtNonOption       ");    	non-compiled	[CE]  cannot  find  symbol  str	2	None	replace
93	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(arguments,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(arguments,  str);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(arguments);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  str	57	None	replace
94	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  cmd.addArg(str);  }	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
95	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	Option  option  =  options.getOption( "stopAtNonOption ");	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	compilable	  [FE]  AssertionFailedError  	46	2	replace
97	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ");  [FE]  AssertionFailedError  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "stopAtNonOption ");	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	compilable	  [FE]  AssertionFailedError  	46	2	replace
98	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  t  [FE]                        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(option);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  t	30	None	replace
99	[BUG]  [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
100	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
101	[BUG]  [BUGGY]  while(stopAtNonOption)  {  cmd.addArg(arguments[i]);  }  [CE]  cannot  find  symbol  i  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  while(stopAtNonOption)  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	while(stopAtNonOption)  {  cmd.addArg(arguments[i]);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  cannot  find  symbol  i	17	None	replace
102	[BUG]  [BUGGY]  while(stopAtNonOption)  {  cmd.addArg(arguments[i]);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  while(stopAtNonOption)  {  cmd.addArg(arguments[i]);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	while(stopAtNonOption)  {  cmd.addArg(arguments[i]);	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
103	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	49	None	replace
104	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
105	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd  ==  null)  {  cmd.addArg(t);  }  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd  ==  null)  {  cmd.addArg(t);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t);  if(cmd  ==  null)  {  cmd.addArg(t);  }	  Option    cmd    =    options.getOption(str);    if(cmd!=    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  t	31	None	replace
106	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    If(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
107	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    If(!stopAtNonOption)    {    checkRequiredOptions();    }    	compilable	  [FE]  IllegalArgumentException  	42	2	replace
108	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    If(!stopAtNonOption)    {    checkRequiredOptions();    }    	compilable	  [FE]  IllegalArgumentException  	42	2	replace
109	[BUG]  [BUGGY]  tehnicătehnicătehnic  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnicătehnicătehnic  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicătehnicătehnic  stopAtNonOption)  {  checkRequiredOptions();  }	  tehnicătehnică    stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
110	[BUG]  [BUGGY]  tehnică  tehnictehnic  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnică  tehnictehnic  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnică  tehnictehnic  stopAtNonOption)  {  checkRequiredOptions();  }	  tehnicătehnică    stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
111	[BUG]  [BUGGY]  tehnicătehnicătehn  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnicătehnicătehn  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicătehnicătehn  stopAtNonOption)  {  checkRequiredOptions();  }	  tehnicătehnică    stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
112	[BUG]  [BUGGY]  eatTheResttNonOption)  {  checkRequiredOptions();  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  eatTheResttNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	eatTheResttNonOption)  {  checkRequiredOptions();  }	  tehnicătehnică    stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  not  a  statement	34	None	replace
113	[BUG]  [BUGGY]  requiredOptions  =  stopAtNonOption?  getRequiredOptions()  :  options;  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  stopAtNonOption?  getRequiredOptions()  :  options;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  stopAtNonOption?  getRequiredOptions()  :  options;	  requiredOptions    =    stopAtNonOption?    getRequiredOptions()    :    null;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
114	[BUG]  [BUGGY]  RequiredOptions  cmd  =  stopAtNonOption?  getRequiredOptions()  :  null;  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  RequiredOptions  cmd  =  stopAtNonOption?  getRequiredOptions()  :  null;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	RequiredOptions  cmd  =  stopAtNonOption?  getRequiredOptions()  :  null;	  requiredOptions    =    stopAtNonOption?    getRequiredOptions()    :    null;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
115	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(options,  stopAtNonOption);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	20	None	replace
116	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(options,  arguments);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(options,  arguments);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	20	None	replace
117	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opts);  [CE]  cannot  find  symbol  opts  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(opts);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(opts);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  opts	20	None	replace
118	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	64	2	add
119	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	64	2	add
120	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	64	2	add
121	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	64	2	add
122	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  	non-compiled	[CE]  ';'  expected	64	None	add
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length();  i++)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  for(int  i  =  0;  i  <  str.length();  i++)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	for(int  i  =  0;  i  <  str.length();  i++)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	for(int  i  =  0;  i  <  arguments.length;  ++i)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
126	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(stopAtNonOption);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	52	None	replace
127	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(test);  [CE]  cannot  find  symbol  test  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(test);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(test);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  test	52	None	replace
128	[BUG]  [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[2]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[2]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnică(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[2]);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[1]);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
129	[BUG]  [BUGGY]  Option  cmd  =  options.getOption( "cmd ");  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption( "cmd ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption( "cmd ");	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  incompatible  types	38	None	replace
130	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions();  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOptions();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOptions();	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  incompatible  types	38	None	replace
131	[BUG]  [BUGGY]  if(options!=  null)  {  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(options!=  null)  {  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(options!=  null)  {  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }	  Ilerator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
132	[BUG]  [BUGGY]  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[t]);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
133	[BUG]  [BUGGY]  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[outline]);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[outline]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[outline]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[t]);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
134	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }	  Iterator    <    String>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	73	None	replace
135	[BUG]  [BUGGY]  Ilerator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Ilerator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());	  Iterator    <    String>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
136	[BUG]  [BUGGY]  ListIterator  iterator  =  this.options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ListIterator  iterator  =  this.options.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	ListIterator  iterator  =  this.options.iterator();	  ListIterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	13	None	replace
137	[BUG]  [BUGGY]  ListIterator  iterator  =  opts.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ListIterator  iterator  =  opts.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	ListIterator  iterator  =  opts.iterator();	  ListIterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	13	None	replace
138	[BUG]  [BUGGY]  ListIterator  iterator  =  options.values().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ListIterator  iterator  =  options.values().iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	ListIterator  iterator  =  options.values().iterator();	  ListIterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	13	None	replace
139	[BUG]  [BUGGY]  for(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  for(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	for(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    for(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  not  a  statement	75	None	replace
140	[BUG]  [BUGGY]  options.addArg(arguments[i]);  [CE]  cannot  find  symbol  i  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  options.addArg(arguments[i]);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	options.addArg(arguments[i]);	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  cannot  find  symbol  i	66	None	replace
141	[BUG]  [BUGGY]  Option  option  =  options.findOption(arguments[i]);  [CE]  cannot  find  symbol  i  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.findOption(arguments[i]);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.findOption(arguments[i]);	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  cannot  find  symbol  i	66	None	replace
142	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ")?  options.getOption(option):  null;  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ")?  options.getOption(option):  null;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "stopAtNonOption ")?  options.getOption(option):  null;	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  incompatible  types	66	None	replace
143	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	5	None	replace
144	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str);  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(options,  str);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(options,  str);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  str	5	None	replace
145	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  t);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(options,  t);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(options,  t);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	5	None	replace
146	[BUG]  [BUGGY]  Option  option  =  opts.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  opts.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  opts.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  str	43	None	replace
147	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(opt);  }  [CE]  cannot  find  symbol  t  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(opt);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(opt);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  t	43	None	replace
148	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  cmd.addArg(str);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  cmd.addArg(str);  }	  Option    cmd    =    options.getOption(t);    if(cmd!=    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  opt	59	None	replace
149	[BUG]  [BUGGY]  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  ||    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
150	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments);  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments);  }	  ||    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
151	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  throw  new  IllegalArgumentException( ". ");  }	  ||    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
152	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  if(cmd!=  null)  {  cmd.addArg(t);  }  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  if(cmd!=  null)  {  cmd.addArg(t);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t,  arguments);  if(cmd!=  null)  {  cmd.addArg(t);  }	  Option    cmd    =    options.getOption(arguments);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  t	58	None	replace
153	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments,  str);  if(cmd!=  null)  {  cmd.addArg(t);  }  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(arguments,  str);  if(cmd!=  null)  {  cmd.addArg(t);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(arguments,  str);  if(cmd!=  null)  {  cmd.addArg(t);  }	  Option    cmd    =    options.getOption(arguments);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  str	58	None	replace
154	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str,  arguments);  if(cmd!=  null)  {  cmd.addArg(t);  }  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(str,  arguments);  if(cmd!=  null)  {  cmd.addArg(t);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(str,  arguments);  if(cmd!=  null)  {  cmd.addArg(t);  }	  Option    cmd    =    options.getOption(arguments);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  str	58	None	replace
155	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd  ==  null)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd  ==  null)  {  cmd.addArg(str);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t);  if(cmd  ==  null)  {  cmd.addArg(str);  }	  Option    cmd    =    options.getOption(str);    if(cmd    ==    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  t	32	None	replace
156	[BUG]  [BUGGY]  parse(options,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(options,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(options,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(arguments[0]));    }    	non-compiled	[CE]  	84	None	replace
157	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(arguments[0]));    }    	non-compiled	[CE]  	84	None	replace
158	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(arguments[0]));    }    	non-compiled	[CE]  	84	None	replace
159	[BUG]  [BUGGY]  parse(options,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(options,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(options,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(arguments[0]));    }    	non-compiled	[CE]  	84	None	replace
160	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  this.opts.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
161	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  checkTheRest();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  checkTheRest();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  checkTheRest();  }	  if(stopAtNonOption)    {    checkTheRest();    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
162	[BUG]  [BUGGY]  tehnică  checkTheRest();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnică  checkTheRest();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnică  checkTheRest();	  if(stopAtNonOption)    {    checkTheRest();    }    	non-compiled	[CE]  ';'  expected	35	None	replace
163	[BUG]  [BUGGY]  if(stopAtNonOption  ||  eatTheRest)  {  checkTheRest();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption  ||  eatTheRest)  {  checkTheRest();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption  ||  eatTheRest)  {  checkTheRest();  }	  if(stopAtNonOption)    {    checkTheRest();    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
164	[BUG]  [BUGGY]  ||  eatTheRest)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  eatTheRest)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  eatTheRest)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ||    stopAtNonOption)    {    return    options.getOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
165	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  &&  stopAtNonOption)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	&&  stopAtNonOption)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ||    stopAtNonOption)    {    return    options.getOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
166	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  return  options.getArguments();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  stopAtNonOption)  {  return  options.getArguments();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  return  options.getArguments();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ||    stopAtNonOption)    {    return    options.getOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
167	[BUG]  [BUGGY]  Option  option  =  opts.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  opts.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  opts.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  str	27	None	replace
168	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  cmd.addArg(opt);  }  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  cmd.addArg(opt);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  cmd.addArg(opt);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  t	27	None	replace
169	[BUG]  [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  opts.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	54	None	replace
170	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)        {        checkRequiredOptions();        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
171	[BUG]  [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)        {        checkRequiredOptions();        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
172	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)        {        checkRequiredOptions();        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
173	[BUG]  [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)        {        checkRequiredOptions();        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
174	[BUG]  [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions()  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions()  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)        {        checkRequiredOptions();        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions()	  	non-compiled	[CE]  ';'  expected	22	None	add
175	[BUG]  [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)        {        checkRequiredOptions();        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
176	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	82	None	replace
177	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	82	None	replace
178	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	82	None	replace
179	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ",  str).getOption( "stopAtNonOption,   ");  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opt ",  str).getOption( "stopAtNonOption,   ");  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt ",  str).getOption( "stopAtNonOption,   ");	  Option    option    =    options.getOption(   "opt   ").getOption(   "stopAtNonOption,   ");    	non-compiled	[CE]  cannot  find  symbol  str	81	None	replace
180	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ",  t).getOption( "stopAtNonOption,   ");  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opt ",  t).getOption( "stopAtNonOption,   ");  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt ",  t).getOption( "stopAtNonOption,   ");	  Option    option    =    options.getOption(   "opt   ").getOption(   "stopAtNonOption,   ");    	non-compiled	[CE]  cannot  find  symbol  t	81	None	replace
181	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(arguments,  stopAtNonOption);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	21	None	replace
182	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments,  str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(arguments,  str);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(arguments,  str);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  cannot  find  symbol  str	21	None	replace
183	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[1]);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
184	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  String>  iterator  =  this.options.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  this.options.iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	26	None	replace
185	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  properties.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  String>  iterator  =  properties.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  properties.iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	26	None	replace
186	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  opts.iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	26	None	replace
187	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  try  {  stopAtNonOption();  }  else  {  cmd.addArg(str);  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  try  {  stopAtNonOption();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  try  {  stopAtNonOption();  }  else  {  cmd.addArg(str);  }	  try    {    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	62	None	replace
188	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "--   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--   ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--   ");  }	  	compilable	  [FE]  IllegalArgumentException  	55	2	add
189	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "--   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "--   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--   ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--   ");  }	  	compilable	  [FE]  IllegalArgumentException  	55	2	add
190	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "--   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }	  	compilable	  [FE]  IllegalArgumentException  	55	2	add
191	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "--   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "--   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--. ");  }	  	compilable	  [FE]  IllegalArgumentException  	55	2	add
192	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  ComparisonFailure  	71	2	add
193	[BUG]  [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  ComparisonFailure  	71	2	add
194	[BUG]  [BUGGY]  options.addArg(arguments[0]);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  options.addArg(arguments[0]);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	options.addArg(arguments[0]);	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opt ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	Option  option  =  options.getOption( "opt ");	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	compilable	  [FE]  AssertionFailedError  	65	2	replace
196	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ");  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opt ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt ");	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	compilable	  [FE]  AssertionFailedError  	65	2	replace
197	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(str));  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(str));  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(str));  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(str));    }    	non-compiled	[CE]  	83	None	replace
198	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(str));  }  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(str));  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(str));  }  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(str));    }    	non-compiled	[CE]  	83	None	replace
199	[BUG]  [BUGGY]  if(eatTheRest)  {  checkTheRest();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkTheRest();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  checkTheRest();  }	  if(stopAtNonOption)    {    checkTheRest();    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
200	[BUG]  [BUGGY]  if(stopAtNonOption  &&  cmd!=  null)  {  checkTheRest();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption  &&  cmd!=  null)  {  checkTheRest();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption  &&  cmd!=  null)  {  checkTheRest();  }	  if(stopAtNonOption)    {    checkTheRest();    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
201	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.keySet().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  Option>  iterator  =  options.keySet().iterator();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  Option>  iterator  =  options.keySet().iterator();	  try    {    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	62	None	replace
202	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  options);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(t,  options);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(t,  options);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	5	None	replace
203	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  options  =  options.getOptions();	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	50	None	replace
204	[BUG]  [BUGGY]  AssertionFailedError  eatTheRest  =  stopAtNonOption;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  AssertionFailedError  eatTheRest  =  stopAtNonOption;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	AssertionFailedError  eatTheRest  =  stopAtNonOption;	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
205	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  options.keySet().iterator();	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	39	None	replace
206	[BUG]  [BUGGY]  Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	70	None	replace
207	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt   ",  null).getOption( "stopAtNonOption ");  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opt   ",  null).getOption( "stopAtNonOption ");  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt   ",  null).getOption( "stopAtNonOption ");	  Option    option    =    options.getOption(   "opt   ",    str).getOption(   "stopAtNonOption       ");    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	3	None	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(eatTheRest)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(if(stopAtNonOption)    {    checkRequiredOptions();    }    	compilable	  [FE]  AssertionFailedError  	25	2	replace
209	[BUG]  [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(if(stopAtNonOption)    {    checkRequiredOptions();    }    	compilable	  [FE]  AssertionFailedError  	25	2	replace
210	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
211	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
212	[BUG]  [BUGGY]  tehnicătehnică  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnicătehnică  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicătehnică  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  	66	None	replace
213	[BUG]  [BUGGY]  parse(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
214	[BUG]  [BUGGY]  tryFailedToParse(opt,  arguments)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt,  arguments)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  arguments)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
215	[BUG]  [BUGGY]  parse(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
216	[BUG]  [BUGGY]  parse(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
217	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ").equals(str);  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ").equals(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ").equals(str);  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(str));    }    	non-compiled	[CE]  	83	None	replace
218	[BUG]  [BUGGY]  Option  option  =  options.getOption(test);  [CE]  cannot  find  symbol  test  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(test);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(test);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  cannot  find  symbol  test	4	None	replace
219	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(option);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	43	None	replace
220	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(arguments);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(arguments);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	43	None	replace
221	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(arguments[0]));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	84	None	replace
222	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[1]));  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[1]));  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[1]));  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(arguments[0]));    }    	non-compiled	[CE]  	84	None	replace
223	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments,  stopAtNonOption);  if(cmd!=  null)  {  cmd.addArg(t);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(arguments,  stopAtNonOption);  if(cmd!=  null)  {  cmd.addArg(t);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(arguments,  stopAtNonOption);  if(cmd!=  null)  {  cmd.addArg(t);  }	  Option    cmd    =    options.getOption(arguments);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	58	None	replace
224	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  for(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    for(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  not  a  statement	75	None	replace
225	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  checkRequiredOptions();  }  else  {  for(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    for(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  not  a  statement	75	None	replace
226	[BUG]  [BUGGY]  tehnică  log.warning( "msg.bad.required.properties ");  [CE]  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnică  log.warning( "msg.bad.required.properties ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnică  log.warning( "msg.bad.required.properties ");	  if(stopAtNonOption)    {    log.warning(   "msg.bad.required.properties   ");    }    	non-compiled	[CE]  	76	None	replace
227	[BUG]  [BUGGY]  if(stopAtNonOption)  {  log.error( "msg.bad.required.properties ");  }  [CE]  cannot  find  symbol  log  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  log.error( "msg.bad.required.properties ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  log.error( "msg.bad.required.properties ");  }	  if(stopAtNonOption)    {    log.warning(   "msg.bad.required.properties   ");    }    	non-compiled	[CE]  cannot  find  symbol  log	76	None	replace
228	[BUG]  [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  IllegalArgumentException  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  IllegalArgumentException  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)        {        checkRequiredOptions();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    IllegalArgumentException  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  not  a  statement	36	None	add
229	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)        {        checkRequiredOptions();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	2	add
230	[BUG]  [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)        {        checkRequiredOptions();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	2	add
231	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd!=  null)  {  cmd.addArg(args);  }  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd!=  null)  {  cmd.addArg(args);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t);  if(cmd!=  null)  {  cmd.addArg(args);  }	  Option    cmd    =    options.getOption(str);    if(cmd!=    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  t	31	None	replace
232	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments);  if(cmd!=  null)  {  cmd.addArg(str);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(arguments);  if(cmd!=  null)  {  cmd.addArg(str);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(arguments);  if(cmd!=  null)  {  cmd.addArg(str);  }	  Option    cmd    =    options.getOption(str);    if(cmd!=    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	31	None	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "options ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	Option  option  =  options.getOption( "options ");	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	compilable	  [FE]  AssertionFailedError  	65	2	replace
234	[BUG]  [BUGGY]  Option  option  =  options.getOption( "options ");  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "options ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "options ");	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	compilable	  [FE]  AssertionFailedError  	65	2	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "option ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	Option  option  =  options.getOption( "option ");	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	compilable	  [FE]  AssertionFailedError  	65	2	replace
236	[BUG]  [BUGGY]  Option  option  =  options.getOption( "option ");  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "option ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "option ");	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	compilable	  [FE]  AssertionFailedError  	65	2	replace
237	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!eatTheRest)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(!eatTheRest)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option    option    =    options.getOption(t);    if(!stopAtNonOption)    {    checkRequiredOptions();    }    	compilable	  [FE]  ComparisonFailure  	67	2	replace
238	[BUG]  [BUGGY]  if(!eatTheRest)  {  checkRequiredOptions();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!eatTheRest)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!eatTheRest)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option    option    =    options.getOption(t);    if(!stopAtNonOption)    {    checkRequiredOptions();    }    	compilable	  [FE]  ComparisonFailure  	67	2	replace
239	[BUG]  [BUGGY]  if(stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  str  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  cmd.addArg(str);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    If(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  str	24	None	replace
240	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( "-- ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( "-- ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  throw  new  IllegalArgumentException( "-- ");  }	  ||    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
241	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	&&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  ||    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
242	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd  ==  null)  {  cmd.addArg(args);  }  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd  ==  null)  {  cmd.addArg(args);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t);  if(cmd  ==  null)  {  cmd.addArg(args);  }	  Option    cmd    =    options.getOption(str);    if(cmd    ==    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  t	32	None	replace
243	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  options);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  t  [FE]                        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(t,  options);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(t,  options);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(option);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  t	30	None	replace
244	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  argument);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  t  [FE]                          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(t,  argument);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(t,  argument);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(option);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  t	30	None	replace
245	[BUG]  [BUGGY]  tehnicătehnicătTheResttAtNonOption)  {  checkRequiredOptions();  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tehnicătehnicătTheResttAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicătehnicătTheResttAtNonOption)  {  checkRequiredOptions();  }	  tehnicătehnică    stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  not  a  statement	34	None	replace
246	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
247	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
248	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseAndIgnoreWhitespace(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseAndIgnoreWhitespace(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
249	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
250	[BUG]  [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption ",  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption ",  arguments);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption( "stopAtNonOption ",  arguments);	  Option    cmd    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	11	None	replace
251	[BUG]  [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption, ");  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption, ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption( "stopAtNonOption, ");	  Option    cmd    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  incompatible  types	11	None	replace
252	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  str  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  cmd.addArg(str);  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    If(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  str	42	None	replace
253	[BUG]  [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAt  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAt  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)        {        checkRequiredOptions();        }        if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAt	  	non-compiled	[CE]  ')'  expected	40	None	add
254	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    	compilable	  [FE]  IllegalArgumentException  	56	2	replace
255	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    	compilable	  [FE]  IllegalArgumentException  	56	2	replace
256	[BUG]  [BUGGY]  Iterator  iterator  =  options.options().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  iterator  =  options.options().iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  options.options().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	53	None	replace
257	[BUG]  [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	ListIterator  iterator  =  options.keySet().iterator();	  ListIterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	13	None	replace
258	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryCandidate(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
259	[BUG]  [BUGGY]  tryCandidate(opt)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryCandidate(opt)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryCandidate(opt)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryCandidate(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
260	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  options);  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(opt,  options);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(opt,  options);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  opt	20	None	replace
261	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  t);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(options,  t);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(options,  t);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	20	None	replace
262	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  ==  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  ==  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
263	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  throw  new  IllegalArgumentException( "-- ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  ==  stopAtNonOption)  {  throw  new  IllegalArgumentException( "-- ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  ==  stopAtNonOption)  {  throw  new  IllegalArgumentException( "-- ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
264	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	82	None	replace
265	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFallThrough(true)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	82	None	replace
266	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  cmd.addArg(t);  }  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  cmd.addArg(t);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(opt);  if(cmd!=  null)  {  cmd.addArg(t);  }	  Option    cmd    =    options.getOption(str);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  opt	33	None	replace
267	[BUG]  [BUGGY]  parse(opt,  arguments,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  arguments,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  arguments,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
268	[BUG]  [BUGGY]  tryFailedToParse(opt,  eatTheRest)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt,  eatTheRest)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  eatTheRest)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
269	[BUG]  [BUGGY]  parse(opt,  arguments,  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  arguments,  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  arguments,  stopAtNonOption)  {  checkRequiredOptions();  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
270	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[p]);  }  [CE]  cannot  find  symbol  p  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[p]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[p]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[t]);    }    	non-compiled	[CE]  cannot  find  symbol  p	61	None	replace
271	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(options,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(options,  str);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(options);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  str	28	None	replace
272	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
273	[BUG]  [BUGGY]  requiredOptions  =  options.findOptions(stopAtNonOption);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  options.findOptions(stopAtNonOption);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  options.findOptions(stopAtNonOption);	  requiredOptions    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
274	[BUG]  [BUGGY]  requiredOptions  =  options.requireAtNonOption;  [CE]  cannot  find  symbol  requireAtNonOption  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  options.requireAtNonOption;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  options.requireAtNonOption;	  requiredOptions    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol  requireAtNonOption	45	None	replace
275	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(arguments,  stopAtNonOption);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(arguments);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	57	None	replace
276	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  options.values().iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	26	None	replace
277	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  arguments);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(opt,  arguments);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(opt,  arguments);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  cannot  find  symbol  opt	21	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  opt  =  options.getOption( "opt ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	Option  opt  =  options.getOption( "opt ");	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	compilable	  [FE]  AssertionFailedError  	46	2	replace
279	[BUG]  [BUGGY]  Option  opt  =  options.getOption( "opt ");  [FE]  AssertionFailedError  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  opt  =  options.getOption( "opt ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  opt  =  options.getOption( "opt ");	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	compilable	  [FE]  AssertionFailedError  	46	2	replace
280	[BUG]  [BUGGY]  Option  option  =  options.findOption(t);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.findOption(t);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.findOption(t);	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  t	46	None	replace
281	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "--   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }	  	compilable	  [FE]  IllegalArgumentException  	55	2	add
282	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "--   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "--   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "--! ");  }	  	compilable	  [FE]  IllegalArgumentException  	55	2	add
283	[BUG]  [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	IllegalArgumentIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);	  Ilerator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
284	[BUG]  [BUGGY]  ListIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ListIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	ListIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);	  Ilerator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
285	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  arguments);  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption(opt,  arguments);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(opt,  arguments);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  cannot  find  symbol  opt	6	None	replace
286	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String[]    arguments    =    iterator.next().getArguments();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
287	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(t);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(t);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(t);  }	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
288	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());	  Iterator    <    String>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
289	[BUG]  [BUGGY]  Iterator  iterator  =  optionOptions.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  iterator  =  optionOptions.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  optionOptions.iterator();	  Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	7	None	replace
290	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opts ").getOption( "stopAtNonOption ",  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opts ").getOption( "stopAtNonOption ",  stopAtNonOption);  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opts ").getOption( "stopAtNonOption ",  stopAtNonOption);	  Option    option    =    options.getOption(   "opts   ").getOption(   "stopAtNonOption       ");    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
291	[BUG]  [BUGGY]  parse(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
292	[BUG]  [BUGGY]  tryFailedToParse(opt,  arguments)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt,  arguments)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  arguments)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
293	[BUG]  [BUGGY]  parse(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
294	[BUG]  [BUGGY]  tryFailedToParse(opt,  arguments[i])  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt,  arguments[i])  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  arguments[i])  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
295	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ",  null).getOption( "stopAtNonOption,   ");  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  options.getOption( "opt ",  null).getOption( "stopAtNonOption,   ");  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt ",  null).getOption( "stopAtNonOption,   ");	  Option    option    =    options.getOption(   "opt   ").getOption(   "stopAtNonOption,   ");    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	81	None	replace
296	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ").equals(arguments[0]);  }  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ").equals(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ").equals(arguments[0]);  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(arguments[0]));    }    	non-compiled	[CE]  incompatible  types	84	None	replace
297	[BUG]  [BUGGY]  parse(opt,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parse(opt,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parse(opt,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(arguments[0]));    }    	non-compiled	[CE]  	84	None	replace
298	[BUG]  [BUGGY]  if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
299	[BUG]  [BUGGY]  if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
300	[BUG]  [BUGGY]  if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }  [CE]  cannot  find  symbol  opt  [FE]                IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  cannot  find  symbol  opt	39	None	replace
301	[BUG]  [BUGGY]  if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(opt.hasArg())  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ", ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
302	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "-- ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  ==  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "-- ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  ==  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "-- ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    	non-compiled	[CE]  	56	None	replace
303	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  ==  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  ==  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "--   ");    }    	non-compiled	[CE]  	56	None	replace
304	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(cmd,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseAndIgnoreWhitespace(cmd,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseAndIgnoreWhitespace(cmd,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryCandidate(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
305	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(cmd,  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseAndIgnoreWhitespace(cmd,  stopAtNonOption);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseAndIgnoreWhitespace(cmd,  stopAtNonOption);	  tryCandidate(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
306	[BUG]  [BUGGY]  tryFailedToParse(opt)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
307	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  arguments.iterator();	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	37	None	replace
308	[BUG]  [BUGGY]  if(eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(. " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(. " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(. " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(.   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
309	[BUG]  [BUGGY]  if(eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(.   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
310	[BUG]  [BUGGY]  if(eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(.   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
311	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(cmd.addArguments()  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(cmd.addArguments()  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(cmd.addArguments()	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[1]);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
312	[BUG]  [BUGGY]  Ilerator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Ilerator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }	  Iterator    <    String>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
313	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseAndIgnoreWhitespace(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseAndIgnoreWhitespace(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
314	[BUG]  [BUGGY]  tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	77	None	replace
315	[BUG]  [BUGGY]  ||  this.stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  this.stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  this.stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  ||    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
316	[BUG]  [BUGGY]  ||  blockAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  blockAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  blockAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  ||    stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
317	[BUG]  [BUGGY]  if(stopAtNonOption)  {  log.warning( "msg.bad.required. ");  }  [CE]  cannot  find  symbol  log  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  log.warning( "msg.bad.required. ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  log.warning( "msg.bad.required. ");  }	  if(stopAtNonOption)    {    log.warning(   "msg.bad.required.properties   ");    }    	non-compiled	[CE]  cannot  find  symbol  log	76	None	replace
318	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  log.warning( "msg.bad.required.properties ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  stopAtNonOption)  {  log.warning( "msg.bad.required.properties ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  log.warning( "msg.bad.required.properties ");  }	  if(stopAtNonOption)    {    log.warning(   "msg.bad.required.properties   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
319	[BUG]  [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	49	None	replace
320	[BUG]  [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  checkRequiredOptions();  }  else  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
321	[BUG]  [BUGGY]  while(stopAtNonOption)  {  checkTheRest();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  while(stopAtNonOption)  {  checkTheRest();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	while(stopAtNonOption)  {  checkTheRest();  }	  if(stopAtNonOption)    {    checkTheRest();    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
322	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseAndIgnoreWhitespace(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseAndIgnoreWhitespace(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[1]);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
323	[BUG]  [BUGGY]  tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[1]);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
324	[BUG]  [BUGGY]  parseOption(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseOption(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseOption(opt,  arguments[0],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[1]);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
325	[BUG]  [BUGGY]  tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[1]);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
326	[BUG]  [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	IllegalArgumentIterator  iterator  =  options.iterator();	  Ilerator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
327	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  it  =  options.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  it  =  options.iterator();	  Ilerator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
328	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  opt.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  opt.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  str	27	None	replace
329	[BUG]  [BUGGY]  try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  checkRequiredOptions()  :  null;  }  else  {  cmd.addArg(str);  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  checkRequiredOptions()  :  null;  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  checkRequiredOptions()  :  null;  }  else  {  cmd.addArg(str);  }	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	46	None	replace
330	[BUG]  [BUGGY]  try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  options.stopAtNonOption  :  options.stopAtNonOption;  }  else  {  cmd.addArg(str);  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  options.stopAtNonOption  :  options.stopAtNonOption;  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  options.stopAtNonOption  :  options.stopAtNonOption;  }  else  {  cmd.addArg(str);  }	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	46	None	replace
331	[BUG]  [BUGGY]  try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  getRequiredOptions()  :  null;  }  catch(Throwable  t)  {  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  getRequiredOptions()  :  null;  }  catch(Throwable  t)  {  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  getRequiredOptions()  :  null;  }  catch(Throwable  t)  {  }	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
332	[BUG]  [BUGGY]  try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  getRequiredOptions()  :  null;  }  catch(Throwable  t)  {  cmd.addArg(t);  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  getRequiredOptions()  :  null;  }  catch(Throwable  t)  {  cmd.addArg(t);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  {  StopAtNonOption  stopAtNonOption  =  stopAtNonOption?  getRequiredOptions()  :  null;  }  catch(Throwable  t)  {  cmd.addArg(t);  }	  If(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
333	[BUG]  [BUGGY]  ||  this.stopAtNonOption)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  ||  this.stopAtNonOption)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  this.stopAtNonOption)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ||    stopAtNonOption)    {    return    options.getOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
334	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingArguments(cmd);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  aughtExceptionHandler.handleMissingArguments(cmd);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	aughtExceptionHandler.handleMissingArguments(cmd);	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	65	None	replace
335	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingArguments(cmd,  arguments[0]);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  aughtExceptionHandler.handleMissingArguments(cmd,  arguments[0]);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	aughtExceptionHandler.handleMissingArguments(cmd,  arguments[0]);	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	65	None	replace
336	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingArguments(cmd,  str);  [CE]  cannot  find  symbol  str  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  aughtExceptionHandler.handleMissingArguments(cmd,  str);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	aughtExceptionHandler.handleMissingArguments(cmd,  str);	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  cannot  find  symbol  str	65	None	replace
337	[BUG]  [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOptions ");  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOptions ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption( "stopAtNonOptions ");	  Option    cmd    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  incompatible  types	11	None	replace
338	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd!=  null)  {  cmd.addArg(arguments[t]);  }  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd!=  null)  {  cmd.addArg(arguments[t]);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t);  if(cmd!=  null)  {  cmd.addArg(arguments[t]);  }	  Option    cmd    =    options.getOption(str);    if(cmd!=    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  t	31	None	replace
339	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  option  =  opt.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  opt.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  str	43	None	replace
340	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tryFallThrough();  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  tryFallThrough();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  tryFallThrough();  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
341	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(cmd.addArg(t);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(cmd.addArg(t);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(cmd.addArg(t);	  tehnicăWhile(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
342	[BUG]  [BUGGY]  Ilerator  iterator  =  this.options.iterator();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Ilerator  iterator  =  this.options.iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  iterator  =  this.options.iterator();	  Ilerator    iterator    =    options.iterator();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
343	[BUG]  [BUGGY]  Ilerator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Ilerator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }	  Iterator    <    Option>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
344	[BUG]  [BUGGY]  parseOption(opt,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseOption(opt,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseOption(opt,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(str));    }    	non-compiled	[CE]  	83	None	replace
345	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(opt,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseAndIgnoreWhitespace(opt,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseAndIgnoreWhitespace(opt,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(str));    }    	non-compiled	[CE]  	83	None	replace
346	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  cmd.addArg(str);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  while(!stopAtNonOption)  {  cmd.addArg(str);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	while(!stopAtNonOption)  {  cmd.addArg(str);	  tryFallThrough(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(str));    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
347	[BUG]  [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	50	None	replace
348	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
349	[BUG]  [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)        {        checkRequiredOptions();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(stopAtNonOption)  {  throw  new  IllegalArgumentException( "   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	36	None	add
350	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  str);  if(cmd!=  null)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Option  cmd  =  options.getOption(t,  str);  if(cmd!=  null)  {  cmd.addArg(str);  }  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t,  str);  if(cmd!=  null)  {  cmd.addArg(str);  }	  Option    cmd    =    options.getOption(options);    if(cmd!=    null)    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  t	86	None	replace
351	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  cmd  =  options.getOption(options);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  cmd  =  options.getOption(options);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  cmd  =  options.getOption(options);  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option    cmd    =    options.getOption(t);    if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	68	None	replace
352	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  cmd  =  options.getOption(str);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  cmd  =  options.getOption(str);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  cmd  =  options.getOption(str);  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option    cmd    =    options.getOption(t);    if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  str	68	None	replace
353	[BUG]  [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  str  [FE]            AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  checkRequiredOptions();  }  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  cmd.addArg(str);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  str	25	None	replace
354	[BUG]  [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  cmd.addArg(i);  }  [CE]  method  addArg  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  cmd.addArg(i);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  checkRequiredOptions();  }  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  cmd.addArg(i);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  method  addArg  in  class  CommandLine  cannot  be  applied  to  given  types;	25	None	replace
355	[BUG]  [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(int  i  =  0;  i  <  options.size();  ++i)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(int  i  =  0;  i  <  options.size();  ++i)  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  checkRequiredOptions();  }  for(int  i  =  0;  i  <  options.size();  ++i)  {  cmd.addArg(str);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
356	[BUG]  [BUGGY]  eatTheRest,  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  eatTheRest,  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	eatTheRest,  stopAtNonOption)  {  checkRequiredOptions();  }	  tehnicătehnică    stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  not  a  statement	34	None	replace
357	[BUG]  [BUGGY]  tryFailedToParse(opt)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
358	[BUG]  [BUGGY]  tryFailedToParse(cmd,  stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(cmd,  stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(cmd,  stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
359	[BUG]  [BUGGY]  tryFailedToParse(opt.getArgument(),  str,  stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt.getArgument(),  str,  stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt.getArgument(),  str,  stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
360	[BUG]  [BUGGY]  tryFailedToParse(cmd,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(cmd,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(cmd,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
361	[BUG]  [BUGGY]  try  {  if(stopAtNonOption)  {  checkConstructors();  }  else  {  cmd.addArg(str);  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                    ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  {  if(stopAtNonOption)  {  checkConstructors();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  {  if(stopAtNonOption)  {  checkConstructors();  }  else  {  cmd.addArg(str);  }	  try    {    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	62	None	replace
362	[BUG]  [BUGGY]  try  {  if(stopAtNonOption)  {  checkRequiredParams();  }  else  {  cmd.addArg(str);  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                      ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  {  if(stopAtNonOption)  {  checkRequiredParams();  }  else  {  cmd.addArg(str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  {  if(stopAtNonOption)  {  checkRequiredParams();  }  else  {  cmd.addArg(str);  }	  try    {    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	62	None	replace
363	[BUG]  [BUGGY]  try  {  if(stopAtNonOption)  {  log.warning( "msg.bad.required.method ",  str);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  try  {  if(stopAtNonOption)  {  log.warning( "msg.bad.required.method ",  str);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  {  if(stopAtNonOption)  {  log.warning( "msg.bad.required.method ",  str);  }	  try    {    if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  	62	None	replace
364	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.keySet().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  Iterator  iterator  =  this.options.keySet().iterator();  [BUGGY]      checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  this.options.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	54	None	replace
365	[BUG]  [BUGGY]  requiredOptions  =  options.options.stopAtNonOption;  [CE]  cannot  find  symbol  options  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  options.options.stopAtNonOption;  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  options.options.stopAtNonOption;	  requiredOptions    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol  options	45	None	replace
366	[BUG]  [BUGGY]  requiredOptions  =  options.requireAtNonOptions();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  options.requireAtNonOptions();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  options.requireAtNonOptions();	  requiredOptions    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
367	[BUG]  [BUGGY]  requiredOptions  =  options.blockAtNonOption();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  requiredOptions  =  options.blockAtNonOption();  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  options.blockAtNonOption();	  requiredOptions    =    stopAtNonOption;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
368	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	aughtExceptionHandler.handleMissingException( " ");	  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)    ==    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	85	None	replace
369	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(t);  [CE]  cannot  find  symbol  t  [FE]          AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  aughtExceptionHandler.handleMissingException(t);  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	aughtExceptionHandler.handleMissingException(t);	  if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)    ==    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  t	85	None	replace
370	[BUG]  [BUGGY]  tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  iterator)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
371	[BUG]  [BUGGY]  parseOption(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  parseOption(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	parseOption(opt,  arguments[i],  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[i]);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
372	[BUG]  [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(eatTheRest)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(eatTheRest)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    CommandLine    cmd    =(CommandLine)iterator.next();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	48	None	replace
373	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments()  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments()  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments()	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String[]    arguments    =    iterator.next().getArguments();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  ';'  expected	51	None	replace
374	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!eatTheRest)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments	  if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String[]    arguments    =    iterator.next().getArguments();    if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  ';'  expected	51	None	replace
375	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  option  =  options.getOption(option);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  option  =  options.getOption(option);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  option  =  options.getOption(option);  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option    option    =    options.getOption(t);    if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	67	None	replace
376	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  option  =  options.getOption(str);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  cannot  find  symbol  str  [FE]          ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  option  =  options.getOption(str);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  option  =  options.getOption(str);  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option    option    =    options.getOption(t);    if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  str	67	None	replace
377	[BUG]  [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(. "   ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  throw  new  IllegalArgumentException(. "   ");  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    if(stopAtNonOption)  {  throw  new  IllegalArgumentException(. "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
378	[BUG]  [BUGGY]  tryFailedToParse(opt,  str)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);      [BUGGY]  tryFailedToParse(opt,  str)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]        return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  str)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  tryFailedToParse(opt,    stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(arguments[0]);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
