bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ").getOption( "stopAtNonOption ",  str);  [CE]  cannot  find  symbol  str  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption( "opt ").getOption( "stopAtNonOption ",  str);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt ").getOption( "stopAtNonOption ",  str);	      Option    option    =    options.getOption(   "opt   ").getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  cannot  find  symbol  str	13	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opts ").getOption( "stopAtNonOption   ");  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption( "opts ").getOption( "stopAtNonOption   ");  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opts ").getOption( "stopAtNonOption   ");	      Option    option    =    options.getOption(   "opt   ").getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
3	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ",  str).getOption( "stopAtNonOption   ");  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption( "opt ",  str).getOption( "stopAtNonOption   ");  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt ",  str).getOption( "stopAtNonOption   ");	      Option    option    =    options.getOption(   "opt   ").getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  cannot  find  symbol  str	13	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption(str);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(str);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	1	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(options);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	1	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption(arguments);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(arguments);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	1	None	replace
7	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Iterator  iterator  =  this.options.iterator();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  this.options.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
8	[BUG]  [BUGGY]  Iterator  iterator  =  opts.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Iterator  iterator  =  opts.iterator();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  opts.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
9	[BUG]  [BUGGY]  Iterator  iterator  =  arguments.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Iterator  iterator  =  arguments.iterator();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  arguments.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
10	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption ");  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption( "stopAtNonOption ");  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption( "stopAtNonOption ");	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incompatible  types	11	None	replace
12	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  ||  stopAtNonOption)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	||  stopAtNonOption)  {  return  options.getOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  ListIterator  iterator  =  options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  ListIterator  iterator  =  options.iterator();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	ListIterator  iterator  =  options.iterator();	      Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	16	None	replace
14	[BUG]  [BUGGY]  Ilerator  iterator  =  options.iterator();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Ilerator  iterator  =  options.iterator();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  iterator  =  options.iterator();	      Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
15	[BUG]  [BUGGY]  tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
16	[BUG]  [BUGGY]  tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(t);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(t);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(t);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
17	[BUG]  [BUGGY]  tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
18	[BUG]  [BUGGY]  tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicăWhile(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
19	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(str);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(str);	      Option    cmd    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	2	None	replace
20	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(options);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(options);	      Option    cmd    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	2	None	replace
21	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(arguments);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(arguments);	      Option    cmd    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	2	None	replace
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	6	2	add
23	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	6	2	add
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  If(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  If(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    If(stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  ';'  expected	6	None	add
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    for(if(stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
26	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  options.iterator();	      Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	14	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  str	4	None	replace
28	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption(options);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(options);  if(option!=  null)  {  cmd.addArg(option);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOption(tr);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  tr  [FE]                  ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption(tr);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(tr);  if(option!=  null)  {  cmd.addArg(option);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  tr	4	None	replace
30	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(option);  if(option!=  null)  {  cmd.addArg(option);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
31	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str);  if(cmd!=  null)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(str);  if(cmd!=  null)  {  cmd.addArg(str);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(str);  if(cmd!=  null)  {  cmd.addArg(str);  }	      Option    cmd    =    options.getOption(t);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  str	3	None	replace
32	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str);  if(cmd  ==  null)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(str);  if(cmd  ==  null)  {  cmd.addArg(str);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(str);  if(cmd  ==  null)  {  cmd.addArg(str);  }	      Option    cmd    =    options.getOption(t);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  str	3	None	replace
33	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str);  if(cmd!=  null)  {  cmd.addArg(t);  }  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(str);  if(cmd!=  null)  {  cmd.addArg(t);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(str);  if(cmd!=  null)  {  cmd.addArg(t);  }	      Option    cmd    =    options.getOption(t);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  str	3	None	replace
34	[BUG]  [BUGGY]  tehnicătehnică  stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tehnicătehnică  stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tehnicătehnică  stopAtNonOption)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  ';'  expected	7	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkTheRest();  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkTheRest();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkTheRest();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
36	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
37	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	10	2	add
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	10	None	add
39	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	add
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	8	2	add
41	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)    {    checkRequiredOptions();    }    if(!stopAtNonOption)  {  checkRequiredOptions();  }	  	compilable	  [FE]  ComparisonFailure  	8	2	add
42	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  If(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  If(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)    {    checkRequiredOptions();    }    If(!stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  ';'  expected	8	None	add
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }	      Option    option    =    options.getOption(t);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  cannot  find  symbol  str	5	None	replace
44	[BUG]  [BUGGY]  requiredOptions  =  stopAtNonOption?  getRequiredOptions()  :  null;  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  requiredOptions  =  stopAtNonOption?  getRequiredOptions()  :  null;  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  stopAtNonOption?  getRequiredOptions()  :  null;	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
45	[BUG]  [BUGGY]  requiredOptions  =  stopAtNonOption;  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  requiredOptions  =  stopAtNonOption;  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	requiredOptions  =  stopAtNonOption;	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  incompatible  types	9	None	replace
46	[BUG]  [BUGGY]  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	If(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
47	[BUG]  [BUGGY]  tryCandidate(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tryCandidate(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryCandidate(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
48	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(CommandLine)iterator.next();  if(stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
49	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
51	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  if(stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  if(stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String[]  arguments  =  iterator.next().getArguments();  if(stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
52	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  [CE]  cannot  find  symbol  opt  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(opt);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(opt);	      Option    cmd    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  opt	2	None	replace
53	[BUG]  [BUGGY]  Iterator  iterator  =  options.values().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Iterator  iterator  =  options.values().iterator();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  options.values().iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
54	[BUG]  [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  options.keySet().iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
55	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "-- ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "-- ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	11	2	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "-- ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "-- ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( "-- ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	11	2	replace
57	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption(arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption(arguments);  if(option!=  null)  {  cmd.addArg(option);  }	      Option    option    =    options.getOption(t);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	5	None	replace
58	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments);  if(cmd!=  null)  {  cmd.addArg(t);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(arguments);  if(cmd!=  null)  {  cmd.addArg(t);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(arguments);  if(cmd!=  null)  {  cmd.addArg(t);  }	      Option    cmd    =    options.getOption(t);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	3	None	replace
59	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd!=  null)  {  cmd.addArg(str);  }  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(t);  if(cmd!=  null)  {  cmd.addArg(str);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(t);  if(cmd!=  null)  {  cmd.addArg(str);  }	      Option    cmd    =    options.getOption(t);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  t	3	None	replace
60	[BUG]  [BUGGY]  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);	      Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
61	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[t]);  }  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[t]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[t]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol  t	12	None	replace
62	[BUG]  [BUGGY]  try  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  try  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	try  {  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(t);    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	12	None	replace
63	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(. "   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(. "   ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException(. "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
64	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	2	replace
65	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	2	replace
66	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  cannot  find  symbol  i  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  cannot  find  symbol  i	17	None	replace
67	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  cannot  find  symbol  t  [FE]    ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  cannot  find  symbol  t	8	None	add
68	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  cmd  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  cannot  find  symbol  t  [FE]      ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  Option  cmd  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)    {    checkRequiredOptions();    }    Option  cmd  =  options.getOption(t);  if(!stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  cannot  find  symbol  t	8	None	add
69	[BUG]  [BUGGY]  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());	      Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
70	[BUG]  [BUGGY]  Iterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Iterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  }	      Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	14	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	add	if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    	compilable	  [FE]  AssertionFailedError  	9	2	replace
72	[BUG]  [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    	compilable	  [FE]  AssertionFailedError  	9	2	replace
73	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());	      Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
74	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Iterator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Iterator  <  Option>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(iterator.next());	      Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(iterator.next());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
75	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  for(!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(!stopAtNonOption)  {  checkRequiredOptions();  }  for(!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(!stopAtNonOption)    {    checkRequiredOptions();    }    for(!stopAtNonOption)  {  checkRequiredOptions();  }	  	non-compiled	[CE]  not  a  statement	8	None	add
76	[BUG]  [BUGGY]  if(stopAtNonOption)  {  log.warning( "msg.bad.required.properties ");  }  [CE]  cannot  find  symbol  log  [FE]    ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  log.warning( "msg.bad.required.properties ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)  {  log.warning( "msg.bad.required.properties ");  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  cannot  find  symbol  log	9	None	replace
77	[BUG]  [BUGGY]  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(str);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
78	[BUG]  [BUGGY]  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[0]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
79	[BUG]  [BUGGY]  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[i]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
80	[BUG]  [BUGGY]  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFailedToParse(opt,  stopAtNonOption)  {  checkRequiredOptions();  }  else  {  cmd.addArg(arguments[1]);  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    cmd.addArg(str);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
81	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ").getOption( "stopAtNonOption, ");  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  option  =  options.getOption( "opt ").getOption( "stopAtNonOption, ");  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  option  =  options.getOption( "opt ").getOption( "stopAtNonOption, ");	      Option    option    =    options.getOption(   "opt   ").getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
82	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(str));  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(str));  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(str));  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
84	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	tryFallThrough(stopAtNonOption)  {  checkRequiredOptions();  }  else  {  throw  new  IllegalArgumentException( " ".equals(arguments[0]));  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
85	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  ==  checkRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredOptions();  }  if(stopAtNonOption)  ==  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	if(stopAtNonOption)    {    checkRequiredOptions();    }    if(stopAtNonOption)  ==  checkRequiredOptions();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
86	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options);  if(cmd!=  null)  {  cmd.addArg(str);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }  }  processProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(options);  if(cmd!=  null)  {  cmd.addArg(str);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	225	225	2	replace	Option  cmd  =  options.getOption(options);  if(cmd!=  null)  {  cmd.addArg(str);  }	      Option    cmd    =    options.getOption(t);    if(cmd!=    null)    {    cmd.addArg(t);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	3	None	replace
