bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
2	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
3	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  option.addValue(arguments[0]);  opt.addValue(arguments[0]);  [CE]  cannot  find  symbol  option  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  option.addValue(arguments[0]);  opt.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    option.addValue(arguments[0]);  opt.addValue(arguments[0]);	  	non-compiled	[CE]  cannot  find  symbol  option	49	None	add
4	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  Option  option  =  options.helpOptions();  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  Option  option  =  options.helpOptions();  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    Option  option  =  options.helpOptions();  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);	  	non-compiled	[CE]  incompatible  types	49	None	add
5	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  Option  option  =(Option)opt.next();  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  Option  option  =(Option)opt.next();  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    Option  option  =(Option)opt.next();  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
6	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);  opt.addValue(arguments[0]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);  opt.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    Option  option  =  options.helpOption(opt);  opt.addValue(arguments[0]);	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
7	[BUG]  [BUGGY]  Option[]  options  =  opt.getOptions(str);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  options  =  opt.getOptions(str);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  opt.getOptions(str);	  Option[]    options    =    opt.getOptions(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	44	None	replace
8	[BUG]  [BUGGY]  Option[]  options  =  opt.getOptions(str,  t);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  options  =  opt.getOptions(str,  t);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  opt.getOptions(str,  t);	  Option[]    options    =    opt.getOptions(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	44	None	replace
9	[BUG]  [BUGGY]  Option[]  options  =  opt.getOptions(t,  arguments);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  options  =  opt.getOptions(t,  arguments);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  opt.getOptions(t,  arguments);	  Option[]    options    =    opt.getOptions(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	44	None	replace
10	[BUG]  [BUGGY]  options.addValue(arguments[0]);  Option  option  =(Option)opt.next();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValue(arguments[0]);  Option  option  =(Option)opt.next();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValue(arguments[0]);  Option  option  =(Option)opt.next();	  opt.addValue(arguments[0]);    Option    option    =(Option)opt.next();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
11	[BUG]  [BUGGY]  option.addValue(arguments[0]);  Option  option  =(Option)opt.next();  [CE]  cannot  find  symbol  option  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option.addValue(arguments[0]);  Option  option  =(Option)opt.next();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(arguments[0]);  Option  option  =(Option)opt.next();	  opt.addValue(arguments[0]);    Option    option    =(Option)opt.next();    	non-compiled	[CE]  cannot  find  symbol  option	24	None	replace
12	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  option.addValue(arguments[1]);  [CE]  cannot  find  symbol  option  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[1]);  option.addValue(arguments[1]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);    option.addValue(arguments[1]);	  	non-compiled	[CE]  cannot  find  symbol  option	39	None	add
13	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  options.addValue(arguments[1]);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[1]);  options.addValue(arguments[1]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);    options.addValue(arguments[1]);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
14	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  Option  option  =  options.helpOption(opt);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[1]);  Option  option  =  options.helpOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);    Option  option  =  options.helpOption(opt);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
15	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  Option  option  =  options.helpOptions();  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[1]);  Option  option  =  options.helpOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);    Option  option  =  options.helpOptions();	  	non-compiled	[CE]  incompatible  types	39	None	add
16	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  Option  option  =(Option)opt.next();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[1]);  Option  option  =(Option)opt.next();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);    Option  option  =(Option)opt.next();	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
17	[BUG]  [BUGGY]  Options  options  =  opt.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  options  =  opt.getOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  options  =  opt.getOptions();	  Options    options    =    opt.clearValues();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
18	[BUG]  [BUGGY]  Option  options  =  opt.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  options  =  opt.getOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  options  =  opt.getOptions();	  Options    options    =    opt.clearValues();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
19	[BUG]  [BUGGY]  Options  options  =  opt.cloneOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  options  =  opt.cloneOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  options  =  opt.cloneOptions();	  Options    options    =    opt.clearValues();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
20	[BUG]  [BUGGY]  Options  options  =  opt.options();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  options  =  opt.options();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  options  =  opt.options();	  Options    options    =    opt.clearValues();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
21	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(str);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(str);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	59	None	replace
22	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(option);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	59	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(options);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	59	None	replace
24	[BUG]  [BUGGY]  options.addValue(t);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValue(t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValue(t);	  option.addValue(str);    	non-compiled	[CE]  cannot  find  symbol  t	1	None	replace
25	[BUG]  [BUGGY]  Option  option  =  opt.helpOption(option,  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.helpOption(option,  stopAtNonOption);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOption(option,  stopAtNonOption);	  Option    option    =    options.helpOption(opt,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  stopAtNonOption,  requiredOptions);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.helpOption(opt,  stopAtNonOption,  requiredOptions);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.helpOption(opt,  stopAtNonOption,  requiredOptions);	  Option    option    =    options.helpOption(opt,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
27	[BUG]  [BUGGY]  Option  option  =  opt.helpOption(opt,  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.helpOption(opt,  stopAtNonOption);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOption(opt,  stopAtNonOption);	  Option    option    =    options.helpOption(opt,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
28	[BUG]  [BUGGY]  Option  option  =  options.addValue(arguments[0]);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.addValue(arguments[0]);	  option.addValue(arguments[0]);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
29	[BUG]  [BUGGY]  Option  option  =  opt.addValue(arguments[0]);  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.addValue(arguments[0]);	  option.addValue(arguments[0]);    	non-compiled	[CE]  incompatible  types	29	None	replace
30	[BUG]  [BUGGY]  Options[]  options  =  opt.options();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options[]  options  =  opt.options();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options[]  options  =  opt.options();	  Options[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	33	None	replace
31	[BUG]  [BUGGY]  Options[]  options  =  opt.opts();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options[]  options  =  opt.opts();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options[]  options  =  opt.opts();	  Options[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	33	None	replace
32	[BUG]  [BUGGY]  Option  option  =  opt.options();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.options();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.options();	  Option    option    =    opt.helpOptions();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
33	[BUG]  [BUGGY]  Option  option  =  opt.helpOption();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.helpOption();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOption();	  Option    option    =    opt.helpOptions();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
34	[BUG]  [BUGGY]  opt.addValue(str,  arguments);  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(str,  arguments);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(str,  arguments);	  opt.addValue(arguments);    	non-compiled	[CE]  cannot  find  symbol  str	41	None	replace
35	[BUG]  [BUGGY]  opt.addValue(t,  arguments);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(t,  arguments);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(t,  arguments);	  opt.addValue(arguments);    	non-compiled	[CE]  cannot  find  symbol  t	41	None	replace
36	[BUG]  [BUGGY]  opt.addValue(arguments,  stopAtNonOption);  [CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments,  stopAtNonOption);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments,  stopAtNonOption);	  opt.addValue(arguments);    	non-compiled	[CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;	41	None	replace
37	[BUG]  [BUGGY]  option.addValue(arguments,  stopAtNonOption);  [CE]  cannot  find  symbol  option  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option.addValue(arguments,  stopAtNonOption);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(arguments,  stopAtNonOption);	  opt.addValue(arguments);    	non-compiled	[CE]  cannot  find  symbol  option	41	None	replace
38	[BUG]  [BUGGY]  Option  str  =  options.addValue(t);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  str  =  options.addValue(t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  str  =  options.addValue(t);	  Option    str    =    options.addValue(opt);    	non-compiled	[CE]  cannot  find  symbol  t	47	None	replace
39	[BUG]  [BUGGY]  Option  str  =  opt.addValue(option);  [CE]  cannot  find  symbol  option  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  str  =  opt.addValue(option);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  str  =  opt.addValue(option);	  Option    str    =    options.addValue(opt);    	non-compiled	[CE]  cannot  find  symbol  option	47	None	replace
40	[BUG]  [BUGGY]  Option  str  =  opt.addValue(options);  [CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  str  =  opt.addValue(options);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  str  =  opt.addValue(options);	  Option    str    =    options.addValue(opt);    	non-compiled	[CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;	47	None	replace
41	[BUG]  [BUGGY]  Option  str  =  options.addValue(t,  opt);  [CE]  cannot  find  symbol  t  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  str  =  options.addValue(t,  opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  str  =  options.addValue(t,  opt);	  Option    str    =    options.addValue(opt);    	non-compiled	[CE]  cannot  find  symbol  t	47	None	replace
42	[BUG]  [BUGGY]  option.addValue(this.str);  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option.addValue(this.str);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(this.str);	  opt.addValue(this.str);    	non-compiled	[CE]  cannot  find  symbol  str	2	None	replace
43	[BUG]  [BUGGY]  opt.addValue(this.t);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(this.t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(this.t);	  opt.addValue(this.str);    	non-compiled	[CE]  cannot  find  symbol  t	2	None	replace
44	[BUG]  [BUGGY]  Option  option  =  opt.getOptions();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.getOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.getOptions();	  Option    option    =    options.getOptions();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
45	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getOptions());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(opt.getOptions());  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(opt.getOptions());	  Option    option    =    options.getOptions();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
46	[BUG]  [BUGGY]  Options  options  =  options.addValue(arguments[0]);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  options  =  options.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  options  =  options.addValue(arguments[0]);	  opt.addValue(arguments[0]);    options.addValue(arguments[0]);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	22	None	replace
47	[BUG]  [BUGGY]  option  =  options.helpOptions();  [CE]  cannot  find  symbol  option  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option  =  options.helpOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option  =  options.helpOptions();	  opt.addValue(arguments[0]);    Option    option    =    options.helpOptions();    	non-compiled	[CE]  cannot  find  symbol  option	25	None	replace
48	[BUG]  [BUGGY]  Options  option  =  options.clearValues();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  option  =  options.clearValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  option  =  options.clearValues();	  Options    option    =    opt.clearValues();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
49	[BUG]  [BUGGY]  Options  option  =  opt.getOptions();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  option  =  opt.getOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  option  =  opt.getOptions();	  Options    option    =    opt.clearValues();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
50	[BUG]  [BUGGY]  Options  option  =  opt.cloneOptions();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  option  =  opt.cloneOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  option  =  opt.cloneOptions();	  Options    option    =    opt.clearValues();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
51	[BUG]  [BUGGY]  Options  option  =  opt.cloneOption();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  option  =  opt.cloneOption();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  option  =  opt.cloneOption();	  Options    option    =    opt.clearValues();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
52	[BUG]  [BUGGY]  Option  option  =(Option)option.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)option.clone();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)option.clone();	  Option    option    =(Option)opt.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	7	None	replace
53	[BUG]  [BUGGY]  options  =(Option)opt.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options  =(Option)opt.clone();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options  =(Option)opt.clone();	  Option    option    =(Option)opt.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	7	None	replace
54	[BUG]  [BUGGY]  Options  option  =(Option)opt.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  option  =(Option)opt.clone();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  option  =(Option)opt.clone();	  Option    option    =(Option)opt.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	7	None	replace
55	[BUG]  [BUGGY]  Option  option  =  opt.getOption(false);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.getOption(false);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.getOption(false);	  Option    option    =    opt.getOption(true);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.getOption(true);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(true);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(true);	  Option    option    =    opt.getOption(true);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	46	None	replace
57	[BUG]  [BUGGY]  Option  option  =  opt.helpOption(requiredOptions);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.helpOption(requiredOptions);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOption(requiredOptions);	  Option    option    =    opt.helpOption(options);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
58	[BUG]  [BUGGY]  Option  option  =  opt.helpOption(t);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.helpOption(t);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOption(t);	  Option    option    =    opt.helpOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	17	None	replace
59	[BUG]  [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions(opt);  [CE]  method  getRequiredOptions  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions(opt);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  requiredOptions  =  options.getRequiredOptions(opt);	  Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  method  getRequiredOptions  in  class  Options  cannot  be  applied  to  given  types;	26	None	replace
60	[BUG]  [BUGGY]  options.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);	  opt.addValue(arguments[0]);    Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
61	[BUG]  [BUGGY]  option.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);  [CE]  cannot  find  symbol  option  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);	  opt.addValue(arguments[0]);    Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	23	None	replace
62	[BUG]  [BUGGY]  Option  option  =(Option)opt.cloneTree();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.cloneTree();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.cloneTree();	  Option    option    =(Option)opt.getOption();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
63	[BUG]  [BUGGY]  Option  option  =(Option)option.getOption();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)option.getOption();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)option.getOption();	  Option    option    =(Option)opt.getOption();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
64	[BUG]  [BUGGY]  Option  option  =  opt.cloneValues();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.cloneValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.cloneValues();	  Option    option    =    options.clearValues();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.clearOptions();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.clearOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.clearOptions();	  Option    option    =    options.clearValues();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
66	[BUG]  [BUGGY]  options.addValue(opt,  arguments[0]);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValue(opt,  arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValue(opt,  arguments[0]);	  options.addValue(arguments[0]);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
67	[BUG]  [BUGGY]  options.addValue(options[0]);  [CE]  array  required,  but  Options  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValue(options[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValue(options[0]);	  options.addValue(arguments[0]);    	non-compiled	[CE]  array  required,  but  Options  found	30	None	replace
68	[BUG]  [BUGGY]  options.addValue(arguments[0],  opt);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValue(arguments[0],  opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValue(arguments[0],  opt);	  options.addValue(arguments[0]);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.helpOption(opt,  str);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.helpOption(opt,  str);	  Option    option    =    options.helpOption(opt,    t);    	non-compiled	[CE]  cannot  find  symbol  str	18	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  null);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.helpOption(opt,  null);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.helpOption(opt,  null);	  Option    option    =    options.helpOption(opt,    t);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
71	[BUG]  [BUGGY]  Option  option  =(Option)options.next();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)options.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)options.next();	  Option    option    =(Option)option.next();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
72	[BUG]  [BUGGY]  Option[]  options  =  option.options();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  options  =  option.options();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  option.options();	  Option[]    options    =    opt.options();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
73	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(opt);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  this.options.getOption(opt);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  this.options.getOption(opt);	  Option    option    =    opt.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	15	None	replace
74	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(this.options);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(this.options);	  Option    option    =    opt.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	15	None	replace
75	[BUG]  [BUGGY]  Option  option  =  options.cloneOption();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.cloneOption();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.cloneOption();	  Option    option    =    opt.cloneOption();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
76	[BUG]  [BUGGY]  Option  option  =  opt.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.clone();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.clone();	  Option    option    =    opt.cloneOption();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	37	None	replace
77	[BUG]  [BUGGY]  Option  option  =  opt.cloneOption(t);  [CE]  cannot  find  symbol  t  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.cloneOption(t);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.cloneOption(t);	  Option    option    =    opt.cloneOption();    	non-compiled	[CE]  cannot  find  symbol  t	37	None	replace
78	[BUG]  [BUGGY]  Option  option  =(Option)option.getOptionValue();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)option.getOptionValue();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)option.getOptionValue();	  Option    option    =(Option)opt.getOptionValue();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
79	[BUG]  [BUGGY]  Option  option  =  this.str.getOption(opt);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  this.str.getOption(opt);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  this.str.getOption(opt);	  Option    option    =    opt.getOption(this.str);    	non-compiled	[CE]  cannot  find  symbol  str	13	None	replace
80	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.str);  [CE]  cannot  find  symbol  str  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(this.str);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(this.str);	  Option    option    =    opt.getOption(this.str);    	non-compiled	[CE]  cannot  find  symbol  str	13	None	replace
81	[BUG]  [BUGGY]  Option  option  =  options.options.getOption();  [CE]  cannot  find  symbol  options  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.options.getOption();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.options.getOption();	  Option    option    =    opt.options.getOption();    	non-compiled	[CE]  cannot  find  symbol  options	6	None	replace
82	[BUG]  [BUGGY]  Option  option  =  options.optOptions.getOption();  [CE]  cannot  find  symbol  optOptions  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.optOptions.getOption();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.optOptions.getOption();	  Option    option    =    opt.options.getOption();    	non-compiled	[CE]  cannot  find  symbol  optOptions	6	None	replace
83	[BUG]  [BUGGY]  Option  option  =  opt.options().getOption();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.options().getOption();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.options().getOption();	  Option    option    =    opt.options.getOption();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
84	[BUG]  [BUGGY]  options.addOption(opt,  t);  [CE]  cannot  find  symbol  t  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt,  t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt,  t);	  options.addOption(opt);    	non-compiled	[CE]  cannot  find  symbol  t	55	None	replace
85	[BUG]  [BUGGY]  options.addOption(opt,  str);  [CE]  cannot  find  symbol  str  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt,  str);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt,  str);	  options.addOption(opt);    	non-compiled	[CE]  cannot  find  symbol  str	55	None	replace
86	[BUG]  [BUGGY]  Option[]  options  =  option.opts();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  options  =  option.opts();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  option.opts();	  Option[]    options    =    opt.opts();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	53	None	replace
87	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
88	[BUG]  [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(options!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	if(options!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
90	[BUG]  [BUGGY]  if(options!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(options!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	if(options!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
91	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[0]);  }  else  {  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	if(opt!=  null)  {  opt.addValue(arguments[0]);  }  else  {  opt.addValue(arguments[1]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
92	[BUG]  [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[0]);  }  else  {  opt.addValue(arguments[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[0]);  }  else  {  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	if(opt!=  null)  {  opt.addValue(arguments[0]);  }  else  {  opt.addValue(arguments[1]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
93	[BUG]  [BUGGY]  Option  option  =  t.getOption(opt);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  t.getOption(opt);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  t.getOption(opt);	  Option    option    =    opt.getOption(str);    	non-compiled	[CE]  cannot  find  symbol  t	12	None	replace
94	[BUG]  [BUGGY]  Option  options  =  opt.clearValues();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  options  =  opt.clearValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  options  =  opt.clearValues();	  Options    options    =    options.clearValues();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	45	None	replace
95	[BUG]  [BUGGY]  options  =  opt.clearValues();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options  =  opt.clearValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options  =  opt.clearValues();	  Options    options    =    options.clearValues();    	non-compiled	[CE]  incompatible  types	45	None	replace
96	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  Option  option  =(Option)it.next();  [CE]  variable  option  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)it.next();  Option  option  =(Option)it.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option    option    =(Option)it.next();    Option  option  =(Option)it.next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	51	None	add
97	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  Options  option  =(Option)it.next();  [CE]  variable  option  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)it.next();  Options  option  =(Option)it.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option    option    =(Option)it.next();    Options  option  =(Option)it.next();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	51	None	add
98	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)it.next();  option  =(Option)it.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	Option    option    =(Option)it.next();    option  =(Option)it.next();	  	compilable	  [FE]  NoSuchElementException  	51	2	add
99	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  option  =(Option)it.next();  [FE]  NoSuchElementException  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)it.next();  option  =(Option)it.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option    option    =(Option)it.next();    option  =(Option)it.next();	  	compilable	  [FE]  NoSuchElementException  	51	2	add
100	[BUG]  [BUGGY]  opt.addValue(String.valueOf(t));  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(String.valueOf(t));  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(String.valueOf(t));	  opt.addValue(String.valueOf(str));    	non-compiled	[CE]  cannot  find  symbol  t	48	None	replace
101	[BUG]  [BUGGY]  option.addValue(String.valueOf(t));  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option.addValue(String.valueOf(t));  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(String.valueOf(t));	  opt.addValue(String.valueOf(str));    	non-compiled	[CE]  cannot  find  symbol  t	48	None	replace
102	[BUG]  [BUGGY]  Opt.addValue(opt.valueOf(t));  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Opt.addValue(opt.valueOf(t));  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Opt.addValue(opt.valueOf(t));	  opt.addValue(String.valueOf(str));    	non-compiled	[CE]  cannot  find  symbol  t	48	None	replace
103	[BUG]  [BUGGY]  Opt.addValue(str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Opt.addValue(str);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Opt.addValue(str);	  Opt.addValue(opt);    	non-compiled	[CE]  cannot  find  symbol  str	42	None	replace
104	[BUG]  [BUGGY]  Opt.addValue(str,  opt);  [CE]  cannot  find  symbol  str  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Opt.addValue(str,  opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Opt.addValue(str,  opt);	  Opt.addValue(opt);    	non-compiled	[CE]  cannot  find  symbol  str	42	None	replace
105	[BUG]  [BUGGY]  Opt.addValue(option);  [CE]  cannot  find  symbol  option  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Opt.addValue(option);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Opt.addValue(option);	  Opt.addValue(opt);    	non-compiled	[CE]  cannot  find  symbol  option	42	None	replace
106	[BUG]  [BUGGY]  Opt.addValue(opt,  str);  [CE]  cannot  find  symbol  str  [FE]                          ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Opt.addValue(opt,  str);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Opt.addValue(opt,  str);	  Opt.addValue(opt);    	non-compiled	[CE]  cannot  find  symbol  str	42	None	replace
107	[BUG]  [BUGGY]  option.addValue(opt);  [CE]  cannot  find  symbol  option  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option.addValue(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(opt);	  option.addValue(t);    	non-compiled	[CE]  cannot  find  symbol  option	34	None	replace
108	[BUG]  [BUGGY]  opt.addValue(arguments[0],  str,  stopAtNonOption);  [CE]  cannot  find  symbol  str  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0],  str,  stopAtNonOption);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0],  str,  stopAtNonOption);	  opt.addValue(arguments[0],    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  str	57	None	replace
109	[BUG]  [BUGGY]  opt.addValue(arguments[0],  stopAtNonOption,  t);  [CE]  cannot  find  symbol  t  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0],  stopAtNonOption,  t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0],  stopAtNonOption,  t);	  opt.addValue(arguments[0],    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  t	57	None	replace
110	[BUG]  [BUGGY]  option.addValue(arguments[0],  stopAtNonOption,  t);  [CE]  cannot  find  symbol  t  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option.addValue(arguments[0],  stopAtNonOption,  t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(arguments[0],  stopAtNonOption,  t);	  opt.addValue(arguments[0],    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  t	57	None	replace
111	[BUG]  [BUGGY]  opt.addValue(arguments[0],  option,  stopAtNonOption);  [CE]  cannot  find  symbol  option  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0],  option,  stopAtNonOption);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0],  option,  stopAtNonOption);	  opt.addValue(arguments[0],    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  option	57	None	replace
112	[BUG]  [BUGGY]  Option  opt  =  options.helpOption(t);  [CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  opt  =  options.helpOption(t);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  opt  =  options.helpOption(t);	  Option    opt    =    options.helpOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	56	None	replace
113	[BUG]  [BUGGY]  Option  opt  =  options.helpOption(str);  [CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  opt  =  options.helpOption(str);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  opt  =  options.helpOption(str);	  Option    opt    =    options.helpOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	56	None	replace
114	[BUG]  [BUGGY]  Option  opt  =  options.helpOption(opt,  stopAtNonOption);  [CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  opt  =  options.helpOption(opt,  stopAtNonOption);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  opt  =  options.helpOption(opt,  stopAtNonOption);	  Option    opt    =    options.helpOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	56	None	replace
115	[BUG]  [BUGGY]  Option  opt  =  options.helpOption(options);  [CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  opt  =  options.helpOption(options);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  opt  =  options.helpOption(options);	  Option    opt    =    options.helpOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	56	None	replace
116	[BUG]  [BUGGY]  Option[]  neededOptions  =  options.getRequiredOptions();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  neededOptions  =  options.getRequiredOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  neededOptions  =  options.getRequiredOptions();	  Option[]    neededOptions    =    opt.getRequiredOptions();    	non-compiled	[CE]  incompatible  types	28	None	replace
117	[BUG]  [BUGGY]  Option[]  neededOptions  =  option.getRequiredOptions();  [CE]  cannot  find  symbol  option  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  neededOptions  =  option.getRequiredOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  neededOptions  =  option.getRequiredOptions();	  Option[]    neededOptions    =    opt.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol  option	28	None	replace
118	[BUG]  [BUGGY]  Option  option  =  opt.addValue(str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.addValue(str);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.addValue(str);	  Option    option    =    opt.addValue(t);    	non-compiled	[CE]  cannot  find  symbol  str	35	None	replace
119	[BUG]  [BUGGY]  Option  option  =  options.addValue(opt);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.addValue(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.addValue(opt);	  Option    option    =    opt.addValue(t);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
120	[BUG]  [BUGGY]  Option  option  =  opt.addValue(this.str);  [CE]  cannot  find  symbol  str  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.addValue(this.str);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.addValue(this.str);	  Option    option    =    opt.addValue(t);    	non-compiled	[CE]  cannot  find  symbol  str	35	None	replace
121	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  opt);  [CE]  cannot  find  symbol  t  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(t,  opt);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(t,  opt);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  t	14	None	replace
122	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  t);  [CE]  cannot  find  symbol  t  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(opt,  t);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(opt,  t);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  t	14	None	replace
123	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  str);  [CE]  cannot  find  symbol  str  [FE]                          ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(opt,  str);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(opt,  str);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  str	14	None	replace
124	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(str);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.getOption(str);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOption(str);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	36	None	replace
125	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(option);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.getOption(option);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOption(option);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
126	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(requiredOptions);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.getOption(requiredOptions);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOption(requiredOptions);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
127	[BUG]  [BUGGY]  options.addValue(opt);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValue(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValue(opt);	  options.removeValues();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
128	[BUG]  [BUGGY]  options.removeValues(opt);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.removeValues(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.removeValues(opt);	  options.removeValues();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
129	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  options.addOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	options.addOption(opt);    options.addOption(opt);	  	compilable	  [FE]  ComparisonFailure  	54	2	add
130	[BUG]  [BUGGY]  options.addOption(opt);  options.addOption(opt);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  options.addOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);    options.addOption(opt);	  	compilable	  [FE]  ComparisonFailure  	54	2	add
131	[BUG]  [BUGGY]  options.addOption(opt);  Option  option  =  options.addOption(opt);  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  Option  option  =  options.addOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);    Option  option  =  options.addOption(opt);	  	non-compiled	[CE]  incompatible  types	54	None	add
132	[BUG]  [BUGGY]  options.addOption(opt);  Options  options.addOption(opt);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  Options  options.addOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);    Options  options.addOption(opt);	  	non-compiled	[CE]  ';'  expected	54	None	add
133	[BUG]  [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.next();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.next();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);    Option  option  =(Option)opt.next();	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
134	[BUG]  [BUGGY]  Options  opt  =  options.getOptions();  [CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  opt  =  options.getOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  opt  =  options.getOptions();	  Options[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	33	None	replace
135	[BUG]  [BUGGY]  Option  option  =  options.cloneOptions();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.cloneOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.cloneOptions();	  Option    option    =    options.clearValues();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
136	[BUG]  [BUGGY]  Options  option  =(Option)opt.next();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  option  =(Option)opt.next();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  option  =(Option)opt.next();	  Option    option    =(Option)option.next();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
137	[BUG]  [BUGGY]  Option  opt  =  opt.cloneOption();  [CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  opt  =  opt.cloneOption();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  opt  =  opt.cloneOption();	  Option    option    =    opt.cloneOption();    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	37	None	replace
138	[BUG]  [BUGGY]  Option  option  =  opt.helpOption(true);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.helpOption(true);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOption(true);	  Option    option    =    opt.helpOption(option);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
139	[BUG]  [BUGGY]  Opt.addValue(String.valueOf(t));  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Opt.addValue(String.valueOf(t));  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Opt.addValue(String.valueOf(t));	  opt.addValue(String.valueOf(str));    	non-compiled	[CE]  cannot  find  symbol  t	48	None	replace
140	[BUG]  [BUGGY]  Option[]  options  =  opt.optOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  options  =  opt.optOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  opt.optOptions();	  Option[]    options    =    opt.options();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
141	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
142	[BUG]  [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
143	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[1]);  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	if(opt!=  null)  {  opt.addValue(arguments[1]);  opt.addValue(arguments[1]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
144	[BUG]  [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[1]);  opt.addValue(arguments[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt!=  null)  {  opt.addValue(arguments[1]);  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	if(opt!=  null)  {  opt.addValue(arguments[1]);  opt.addValue(arguments[1]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	2	replace
145	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(this.options);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.getOption(this.options);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOption(this.options);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
146	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(true);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.getOption(true);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOption(true);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
147	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  ArrayIndexOutOfBoundsException.addValue(arguments[1]);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[1]);  ArrayIndexOutOfBoundsException.addValue(arguments[1]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);    ArrayIndexOutOfBoundsException.addValue(arguments[1]);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
148	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  ArrayIndexOutOfBoundsException.addValue(arguments[2]);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[1]);  ArrayIndexOutOfBoundsException.addValue(arguments[2]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);    ArrayIndexOutOfBoundsException.addValue(arguments[2]);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
149	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  Options  options  =  options.helpOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[1]);  Options  options  =  options.helpOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);    Options  options  =  options.helpOptions();	  	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	39	None	add
150	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  eatTheRest);  [CE]  cannot  find  symbol  eatTheRest  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.helpOption(opt,  eatTheRest);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.helpOption(opt,  eatTheRest);	  Option    option    =    options.helpOption(opt,    t);    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	18	None	replace
151	[BUG]  [BUGGY]  opt.addValue(this.options);  [CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(this.options);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(this.options);	  opt.addValue(this.str);    	non-compiled	[CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;	2	None	replace
152	[BUG]  [BUGGY]  opt.addValue(arguments[0],  stopAtNonOption,  str);  [CE]  cannot  find  symbol  str  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0],  stopAtNonOption,  str);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0],  stopAtNonOption,  str);	  opt.addValue(arguments[0],    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  str	57	None	replace
153	[BUG]  [BUGGY]  opt.addValue(arguments[0],  stopAtNonOption,  arguments);  [CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0],  stopAtNonOption,  arguments);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0],  stopAtNonOption,  arguments);	  opt.addValue(arguments[0],    stopAtNonOption);    	non-compiled	[CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;	57	None	replace
154	[BUG]  [BUGGY]  Option  option  =  opt.helpOption(options,  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.helpOption(options,  stopAtNonOption);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOption(options,  stopAtNonOption);	  Option    option    =    options.helpOption(opt,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
155	[BUG]  [BUGGY]  options.addValues();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValues();	  options.removeValues();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
156	[BUG]  [BUGGY]  options.removeOptions();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.removeOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.removeOptions();	  options.removeValues();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
157	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(opt,  this.options);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(opt,  this.options);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	14	None	replace
158	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  ArrayIndexOutOfBoundsException.addValue(arguments[0]);  opt.addValue(arguments[0]);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  ArrayIndexOutOfBoundsException.addValue(arguments[0]);  opt.addValue(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    ArrayIndexOutOfBoundsException.addValue(arguments[0]);  opt.addValue(arguments[0]);	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
159	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  for(Option  option  :  options.helpOptions())  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  for(Option  option  :  options.helpOptions())  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  for(Option  option  :  options.helpOptions())  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
160	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException( " ");  a.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException( " ");  a.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    if(opt!=  null)  {  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException( " ");  a.addValue(arguments[0]);  opt.addValue(arguments[0]);  }	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
161	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(arguments[0]);  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(arguments[0]);  opt.addValue(arguments[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
162	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(arguments[0]);  opt.addValue(arguments[0]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(arguments[0]);  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(arguments[0]);  opt.addValue(arguments[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
163	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  for(Option  option  :  options.helpOptions())  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]  [CE]  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  for(Option  option  :  options.helpOptions())  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    if(opt!=  null)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  for(Option  option  :  options.helpOptions())  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]	  	non-compiled	[CE]  	49	None	add
164	[BUG]  [BUGGY]  options.addOption(opt,  stopAtNonOption);  [CE]  no  suitable  method  found  for  addOption(Option,boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt,  stopAtNonOption);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt,  stopAtNonOption);	  options.addOption(opt);    	non-compiled	[CE]  no  suitable  method  found  for  addOption(Option,boolean)	55	None	replace
165	[BUG]  [BUGGY]  option.addValue(option);  [CE]  cannot  find  symbol  option  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option.addValue(option);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(option);	  option.addValue(t);    	non-compiled	[CE]  cannot  find  symbol  option	34	None	replace
166	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  Option  option  =(Option)it.previous();  [CE]  variable  option  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)it.next();  Option  option  =(Option)it.previous();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option    option    =(Option)it.next();    Option  option  =(Option)it.previous();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	51	None	add
167	[BUG]  [BUGGY]  opt.addValue(arguments,  str);  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments,  str);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments,  str);	  opt.addValue(arguments);    	non-compiled	[CE]  cannot  find  symbol  str	41	None	replace
168	[BUG]  [BUGGY]  Option  option  =  opt.addValue(arguments);  [CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.addValue(arguments);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.addValue(arguments);	  Option    option    =    opt.addValue(t);    	non-compiled	[CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;	35	None	replace
169	[BUG]  [BUGGY]  Opt.addValue(opt,  stopAtNonOption);  [CE]  cannot  find  symbol  Opt  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Opt.addValue(opt,  stopAtNonOption);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Opt.addValue(opt,  stopAtNonOption);	  Opt.addValue(opt);    	non-compiled	[CE]  cannot  find  symbol  Opt	42	None	replace
170	[BUG]  [BUGGY]  options.addOption(opt);  Options.addOption(opt);  [CE]  non-static  method  addOption(Option)  cannot  be  referenced  from  a  static  context  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  Options.addOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);    Options.addOption(opt);	  	non-compiled	[CE]  non-static  method  addOption(Option)  cannot  be  referenced  from  a  static  context	54	None	add
171	[BUG]  [BUGGY]  Option  option  =(Option)opt.getNext();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.getNext();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getNext();	  Option    option    =(Option)it.next();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
172	[BUG]  [BUGGY]  Option  option  =(Option)opt.options.getOption();  [CE]  cannot  find  symbol  options  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.options.getOption();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.options.getOption();	  Option    option    =(Option)opt.getOption();    	non-compiled	[CE]  cannot  find  symbol  options	8	None	replace
173	[BUG]  [BUGGY]  Option  option  =  options.addValue(arguments[0]);  options.addValue(option);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.addValue(arguments[0]);  options.addValue(option);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.addValue(arguments[0]);  options.addValue(option);	  opt.addValue(arguments[0]);    options.addValue(arguments[0]);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
174	[BUG]  [BUGGY]  Option  option  =  options.getOptions(opt);  [CE]  method  getOptions  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOptions(opt);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOptions(opt);	  Option    option    =    options.getOptions();    	non-compiled	[CE]  method  getOptions  in  class  Options  cannot  be  applied  to  given  types;	11	None	replace
175	[BUG]  [BUGGY]  Option  option  =  opt.getOption(true,  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.getOption(true,  stopAtNonOption);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.getOption(true,  stopAtNonOption);	  Option    option    =    opt.getOption(true);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
176	[BUG]  [BUGGY]  Options  option  =  options.helpOptions();  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  option  =  options.helpOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  option  =  options.helpOptions();	  opt.addValue(arguments[0]);    Option    option    =    options.helpOptions();    	non-compiled	[CE]  incompatible  types	25	None	replace
177	[BUG]  [BUGGY]  Option  option  =  this.opts.getOption(opt);  [CE]  cannot  find  symbol  opts  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  this.opts.getOption(opt);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  this.opts.getOption(opt);	  Option    option    =    opt.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  opts	15	None	replace
178	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt.hasArg())  {  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	if(opt.hasArg())  {  opt.addValue(arguments[0]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ComparisonFailure  	50	2	replace
179	[BUG]  [BUGGY]  if(opt.hasArg())  {  opt.addValue(arguments[0]);  }  [FE]  ComparisonFailure  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  if(opt.hasArg())  {  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	if(opt.hasArg())  {  opt.addValue(arguments[0]);  }	  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);    	compilable	  [FE]  ComparisonFailure  	50	2	replace
180	[BUG]  [BUGGY]  options.addValue(arguments[0],  t);  [CE]  cannot  find  symbol  t  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValue(arguments[0],  t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValue(arguments[0],  t);	  options.addValue(arguments[0]);    	non-compiled	[CE]  cannot  find  symbol  t	30	None	replace
181	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
182	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
183	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
184	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    if(opt!=  null)  {  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
185	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
186	[BUG]  [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  opt.addValue(arguments[1]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);        opt.addValue(arguments[0]);    opt.addValue(arguments[0]);  opt.addValue(arguments[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	2	add
187	[BUG]  [BUGGY]  Options  options  =  opt.clearOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  options  =  opt.clearOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  options  =  opt.clearOptions();	  Options    options    =    opt.clearValues();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
188	[BUG]  [BUGGY]  Options  options  =  opt.removeValues();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options  options  =  opt.removeValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  options  =  opt.removeValues();	  options.removeValues();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	4	None	replace
189	[BUG]  [BUGGY]  options.addValues(opt);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addValues(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValues(opt);	  options.removeValues();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
190	[BUG]  [BUGGY]  Option[]  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  options  =  options.getOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  options.getOptions();	  Option[]    options    =    option.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	31	None	replace
191	[BUG]  [BUGGY]  option.addValue(arguments[1]);  [CE]  cannot  find  symbol  option  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  option.addValue(arguments[1]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(arguments[1]);	  opt.addValue(arguments[1]);    	non-compiled	[CE]  cannot  find  symbol  option	40	None	replace
192	[BUG]  [BUGGY]  Option  option  =  options.opts.getOption();  [CE]  cannot  find  symbol  opts  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.opts.getOption();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.opts.getOption();	  Option    option    =    opt.options.getOption();    	non-compiled	[CE]  cannot  find  symbol  opts	6	None	replace
193	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(opt.getKey());  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	Option  option  =  options.getOption(opt.getKey());	  Option    option    =    options.getOptions();    	compilable	  [FE]  ComparisonFailure  	11	2	replace
194	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey());  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(opt.getKey());  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(opt.getKey());	  Option    option    =    options.getOptions();    	compilable	  [FE]  ComparisonFailure  	11	2	replace
195	[BUG]  [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.getValue();  options.addOption(option);  [CE]  inconvertible  types  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.getValue();  options.addOption(option);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);    Option  option  =(Option)opt.getValue();  options.addOption(option);	  	non-compiled	[CE]  inconvertible  types	54	None	add
196	[BUG]  [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.getValue();  options.addOption(opt);  [CE]  inconvertible  types  [FE]      ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.getValue();  options.addOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);    Option  option  =(Option)opt.getValue();  options.addOption(opt);	  	non-compiled	[CE]  inconvertible  types	54	None	add
197	[BUG]  [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.next();  options.addOption(opt);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.next();  options.addOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);    Option  option  =(Option)opt.next();  options.addOption(opt);	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
198	[BUG]  [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.clone();  options.addOption(opt);  [CE]  clone()  has  protected  access  in  Object  [FE]          ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  options.addOption(opt);  Option  option  =(Option)opt.clone();  options.addOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);    Option  option  =(Option)opt.clone();  options.addOption(opt);	  	non-compiled	[CE]  clone()  has  protected  access  in  Object	54	None	add
199	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(this.str);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.getOption(this.str);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOption(this.str);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	36	None	replace
200	[BUG]  [BUGGY]  Option  option  =  options.opts.clearValues();  [CE]  cannot  find  symbol  opts  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.opts.clearValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.opts.clearValues();	  Option    option    =    options.clearValues();    	non-compiled	[CE]  cannot  find  symbol  opts	19	None	replace
201	[BUG]  [BUGGY]  Option[]  requiredOptions  =  options.options.getRequiredOptions();  [CE]  cannot  find  symbol  options  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  requiredOptions  =  options.options.getRequiredOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  requiredOptions  =  options.options.getRequiredOptions();	  Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol  options	26	None	replace
202	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	14	None	replace
203	[BUG]  [BUGGY]  Option  option  =  opt.cloneTree();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  opt.cloneTree();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.cloneTree();	  Option    option    =    opt.clearValues();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
204	[BUG]  [BUGGY]  Option  option  =  options.addOption(arguments[0]);  [CE]  no  suitable  method  found  for  addOption(String)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.addOption(arguments[0]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.addOption(arguments[0]);	  opt.addValue(arguments[0]);    option.addValue(arguments[0]);    	non-compiled	[CE]  no  suitable  method  found  for  addOption(String)	21	None	replace
205	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  this.stopAtNonOption);  [CE]  cannot  find  symbol  stopAtNonOption  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =  options.helpOption(opt,  this.stopAtNonOption);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.helpOption(opt,  this.stopAtNonOption);	  Option    option    =    options.helpOption(opt,    t);    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	18	None	replace
206	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  option.addValue(arguments[2]);  [CE]  cannot  find  symbol  option  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  opt.addValue(arguments[1]);  option.addValue(arguments[2]);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);    option.addValue(arguments[2]);	  	non-compiled	[CE]  cannot  find  symbol  option	39	None	add
207	[BUG]  [BUGGY]  Options[]  options  =  option.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Options[]  options  =  option.getOptions();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options[]  options  =  option.getOptions();	  Options[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	33	None	replace
208	[BUG]  [BUGGY]  Option[]  options  =  opt.getOptions(t,  str);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option[]  options  =  opt.getOptions(t,  str);  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  opt.getOptions(t,  str);	  Option[]    options    =    opt.getOptions(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	44	None	replace
209	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOptionKey();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)opt.getOptionKey();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOptionKey();	  Option    option    =(Option)opt.getOptionValue();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
210	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  Option  option  =(Option)it.get();  [CE]  variable  option  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();      [BUGGY]  Option  option  =(Option)it.next();  Option  option  =(Option)it.get();  [BUGGY]      opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option    option    =(Option)it.next();    Option  option  =(Option)it.get();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	51	None	add
