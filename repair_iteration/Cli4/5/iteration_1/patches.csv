bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  option.addValue(str);  [CE]  cannot  find  symbol  str  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  option.addValue(str);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(str);	  opt.addValue(t);    	non-compiled	[CE]  cannot  find  symbol  str	7	None	replace
2	[BUG]  [BUGGY]  opt.addValue(this.str);  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(this.str);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(this.str);	  opt.addValue(t);    	non-compiled	[CE]  cannot  find  symbol  str	7	None	replace
3	[BUG]  [BUGGY]  Options  options  =  opt.clearValues();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Options  options  =  opt.clearValues();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  options  =  opt.clearValues();	  options.clearValues();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
4	[BUG]  [BUGGY]  options.removeValues();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  options.removeValues();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.removeValues();	  options.clearValues();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption();  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  options.getOption();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption();	      Option    option    =    opt.getOption();    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	5	None	replace
6	[BUG]  [BUGGY]  Option  option  =  opt.options.getOption();  [CE]  cannot  find  symbol  options  [FE]                  ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.options.getOption();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.options.getOption();	      Option    option    =    opt.getOption();    	non-compiled	[CE]  cannot  find  symbol  options	5	None	replace
7	[BUG]  [BUGGY]  Option  option  =(Option)opt.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =(Option)opt.clone();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.clone();	      Option    option    =(Option)opt.getValue();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	11	None	replace
8	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =(Option)opt.getOption();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOption();	      Option    option    =(Option)opt.getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
9	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOptionValue();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =(Option)opt.getOptionValue();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOptionValue();	      Option    option    =(Option)opt.getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
10	[BUG]  [BUGGY]  Option  option  =  opt.helpOptions();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.helpOptions();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOptions();	      Option    option    =    options.helpOptions();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOptions();	      Option    option    =    options.helpOptions();    	non-compiled	[CE]  incompatible  types	10	None	replace
12	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.getOption(str);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.getOption(str);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	4	None	replace
13	[BUG]  [BUGGY]  Option  option  =  opt.getOption(this.str);  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.getOption(this.str);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.getOption(this.str);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	4	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(opt);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
15	[BUG]  [BUGGY]  Option  option  =  opt.getOption(this.options);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.getOption(this.options);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.getOption(this.options);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
16	[BUG]  [BUGGY]  Option  option  =  opt.helpOption(option);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.helpOption(option);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOption(option);	      Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
17	[BUG]  [BUGGY]  Option  option  =  opt.helpOption(options);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.helpOption(options);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.helpOption(options);	      Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  t);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  options.helpOption(opt,  t);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.helpOption(opt,  t);	      Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  cannot  find  symbol  t	12	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.clearValues();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  options.clearValues();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.clearValues();	  option.clearValues();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
20	[BUG]  [BUGGY]  Option  option  =(Option)option.next();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =(Option)option.next();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)option.next();	      Option    option    =(Option)opt.next();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
21	[BUG]  [BUGGY]  opt.addValue(arguments[0]);  option.addValue(arguments[0]);  [CE]  cannot  find  symbol  option  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[0]);  option.addValue(arguments[0]);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);    option.addValue(arguments[0]);	  	non-compiled	[CE]  cannot  find  symbol  option	13	None	add
22	[BUG]  [BUGGY]  opt.addValue(arguments[0]);  options.addValue(arguments[0]);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[0]);  options.addValue(arguments[0]);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);    options.addValue(arguments[0]);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
23	[BUG]  [BUGGY]  opt.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[0]);  Option  option  =  options.helpOption(opt);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);    Option  option  =  options.helpOption(opt);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
24	[BUG]  [BUGGY]  opt.addValue(arguments[0]);  Option  option  =(Option)opt.next();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[0]);  Option  option  =(Option)opt.next();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);    Option  option  =(Option)opt.next();	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
25	[BUG]  [BUGGY]  opt.addValue(arguments[0]);  Option  option  =  options.helpOptions();  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[0]);  Option  option  =  options.helpOptions();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);    Option  option  =  options.helpOptions();	  	non-compiled	[CE]  incompatible  types	13	None	add
26	[BUG]  [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  requiredOptions  =  options.getRequiredOptions();	      Option[]    requiredOptions    =    opt.getRequiredOptions();    	non-compiled	[CE]  incompatible  types	2	None	replace
27	[BUG]  [BUGGY]  Option[]  requiredOptions  =  option.getRequiredOptions();  [CE]  cannot  find  symbol  option  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option[]  requiredOptions  =  option.getRequiredOptions();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  requiredOptions  =  option.getRequiredOptions();	      Option[]    requiredOptions    =    opt.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol  option	2	None	replace
28	[BUG]  [BUGGY]  Option[]  neededOptions  =  opt.getRequiredOptions();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option[]  neededOptions  =  opt.getRequiredOptions();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  neededOptions  =  opt.getRequiredOptions();	      Option[]    requiredOptions    =    opt.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
29	[BUG]  [BUGGY]  option.addValue(arguments[0]);  [CE]  cannot  find  symbol  option  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  option.addValue(arguments[0]);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(arguments[0]);	  opt.addValue(arguments[0]);    	non-compiled	[CE]  cannot  find  symbol  option	14	None	replace
30	[BUG]  [BUGGY]  options.addValue(arguments[0]);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  options.addValue(arguments[0]);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addValue(arguments[0]);	  opt.addValue(arguments[0]);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
31	[BUG]  [BUGGY]  Option[]  options  =  option.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option[]  options  =  option.getOptions();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  option.getOptions();	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
32	[BUG]  [BUGGY]  Option[]  options  =  opt.options();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option[]  options  =  opt.options();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  opt.options();	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
33	[BUG]  [BUGGY]  Options[]  options  =  opt.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Options[]  options  =  opt.getOptions();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options[]  options  =  opt.getOptions();	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
34	[BUG]  [BUGGY]  option.addValue(t);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  option.addValue(t);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	option.addValue(t);	  opt.addValue(str);    	non-compiled	[CE]  cannot  find  symbol  t	9	None	replace
35	[BUG]  [BUGGY]  Option  option  =  opt.addValue(t);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.addValue(t);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.addValue(t);	  opt.addValue(str);    	non-compiled	[CE]  cannot  find  symbol  t	9	None	replace
36	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(t);  [CE]  cannot  find  symbol  t  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =(Option)opt.getOption(t);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)opt.getOption(t);	      Option    option    =(Option)opt.getValue();    	non-compiled	[CE]  cannot  find  symbol  t	11	None	replace
37	[BUG]  [BUGGY]  Option  option  =  opt.cloneOption();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.cloneOption();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.cloneOption();	      Option    option    =    opt.getOption();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
38	[BUG]  [BUGGY]  Option  option  =  opt.clearValues();  [CE]  incompatible  types  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.clearValues();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.clearValues();	  option.clearValues();    	non-compiled	[CE]  incompatible  types	8	None	replace
39	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[1]);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	opt.addValue(arguments[1]);	  opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	2	replace
40	[BUG]  [BUGGY]  opt.addValue(arguments[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[1]);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[1]);	  opt.addValue(arguments[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	2	replace
41	[BUG]  [BUGGY]  opt.addValue(arguments);  [CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments);	  opt.addValue(str);    	non-compiled	[CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;	9	None	replace
42	[BUG]  [BUGGY]  Opt.addValue(opt);  [CE]  cannot  find  symbol  Opt  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Opt.addValue(opt);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Opt.addValue(opt);	  opt.addValue(str);    	non-compiled	[CE]  cannot  find  symbol  Opt	9	None	replace
43	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  stopAtNonOption);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  options.helpOption(opt,  stopAtNonOption);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.helpOption(opt,  stopAtNonOption);	      Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
44	[BUG]  [BUGGY]  Option[]  options  =  opt.getOptions(t);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option[]  options  =  opt.getOptions(t);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  opt.getOptions(t);	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
45	[BUG]  [BUGGY]  Options  options  =  options.clearValues();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Options  options  =  options.clearValues();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  options  =  options.clearValues();	  options.clearValues();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
46	[BUG]  [BUGGY]  Option  option  =  opt.getOption(true);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  opt.getOption(true);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  opt.getOption(true);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
47	[BUG]  [BUGGY]  Option  str  =  options.addValue(opt);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  str  =  options.addValue(opt);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  str  =  options.addValue(opt);	  opt.addValue(str);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
48	[BUG]  [BUGGY]  opt.addValue(String.valueOf(str));  [CE]  cannot  find  symbol  str  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(String.valueOf(str));  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(String.valueOf(str));	  opt.addValue(t);    	non-compiled	[CE]  cannot  find  symbol  str	7	None	replace
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	opt.addValue(arguments[0]);    opt.addValue(arguments[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	2	add
50	[BUG]  [BUGGY]  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[0]);  opt.addValue(arguments[0]);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0]);    opt.addValue(arguments[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	2	add
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =(Option)it.next();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	Option  option  =(Option)it.next();	      Option    option    =(Option)opt.next();    	compilable	  [FE]  ComparisonFailure  	1	2	replace
52	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =(Option)it.next();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =(Option)it.next();	      Option    option    =(Option)opt.next();    	compilable	  [FE]  ComparisonFailure  	1	2	replace
53	[BUG]  [BUGGY]  Option[]  options  =  opt.opts();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option[]  options  =  opt.opts();  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option[]  options  =  opt.opts();	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	3	None	replace
54	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  options.addOption(opt);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	add	options.addOption(opt);	  options.clearValues();    	compilable	  [FE]  ComparisonFailure  	6	2	replace
55	[BUG]  [BUGGY]  options.addOption(opt);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  options.addOption(opt);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	options.addOption(opt);	  options.clearValues();    	compilable	  [FE]  ComparisonFailure  	6	2	replace
56	[BUG]  [BUGGY]  Option  opt  =  options.helpOption(opt);  [CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  opt  =  options.helpOption(opt);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  opt  =  options.helpOption(opt);	      Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	12	None	replace
57	[BUG]  [BUGGY]  opt.addValue(arguments[0],  stopAtNonOption);  [CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  opt.addValue(arguments[0],  stopAtNonOption);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	opt.addValue(arguments[0],  stopAtNonOption);	  opt.addValue(arguments[0]);    	non-compiled	[CE]  method  addValue  in  class  Option  cannot  be  applied  to  given  types;	14	None	replace
58	[BUG]  [BUGGY]  Options  option  =  opt.clearValues();  [CE]  incompatible  types  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Options  option  =  opt.clearValues();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Options  option  =  opt.clearValues();	  option.clearValues();    	non-compiled	[CE]  incompatible  types	8	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();    [BUGGY]  Option  option  =  options.getOption(t);  [BUGGY]    opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	140	140	2	replace	Option  option  =  options.getOption(t);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  t	4	None	replace
