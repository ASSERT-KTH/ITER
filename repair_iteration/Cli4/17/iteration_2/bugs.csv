bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator().next();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator().next();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames().iterator().next();	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
2	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  values);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  values);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(),  values);	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  ';'  expected	20	None	replace
3	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames()  +  1;  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames()  +  1;	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	20	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException( "   ");  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "   ");    Throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  not  a  statement	16	None	add
5	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [CE]  unreachable  statement  [FE]      IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  unreachable  statement	16	None	add
6	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.throw  new  IllegalStateException( "   ");  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.throw  new  IllegalStateException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "   ");    Throwables.throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  <identifier>  expected	16	None	add
7	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.throwException( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.throwException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "   ");    Throwables.throwException( "   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	16	None	add
8	[BUG]  [BUGGY]  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
9	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
10	[BUG]  [BUGGY]  Properties  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
11	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  ')'  expected	27	None	replace
12	[BUG]  [BUGGY]  Properties  cmd  =  this.properties.getProperties();  [CE]  cannot  find  symbol  properties  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  this.properties.getProperties();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  this.properties.getProperties();	      Properties    cmd    =    properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol  properties	12	None	replace
13	[BUG]  [BUGGY]  Properties  cmd  =  properties.properties();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.properties();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.properties();	      Properties    cmd    =    properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
14	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty( "cmd ");  [CE]  incompatible  types  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getProperty( "cmd ");  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty( "cmd ");	      Properties    cmd    =    properties.getProperties();    	non-compiled	[CE]  incompatible  types	12	None	replace
15	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requiredOptions();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requiredOptions();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties.requiredOptions();	      Enumeration    <    String>    requiredOptions    =    properties.values();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
16	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.keySet();  [CE]  incompatible  types  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.keySet();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties.keySet();	      Enumeration    <    String>    requiredOptions    =    properties.values();    	non-compiled	[CE]  incompatible  types	24	None	replace
17	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  Throw  new  RuntimeException( "Properties  cannot  be  null.   ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  Throw  new  RuntimeException( "Properties  cannot  be  null.   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    Throw  new  RuntimeException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  not  a  statement	5	None	add
18	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
19	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null.   ");  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null.   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    Throwables.throw  new  RuntimeException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  <identifier>  expected	5	None	add
20	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    throw  new  RuntimeException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  unreachable  statement	5	None	add
21	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ");  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  RuntimeException( " ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( " ");	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
22	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(propertyName);  [CE]  cannot  find  symbol  propertyName  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getProperty(propertyName);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(propertyName);	      Properties    cmd    =    properties.getProperty(value);    	non-compiled	[CE]  cannot  find  symbol  propertyName	11	None	replace
23	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties);  [CE]  no  suitable  method  found  for  getProperty(Properties)  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getProperty(properties);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties);	      Properties    cmd    =    properties.getProperty(value);    	non-compiled	[CE]  no  suitable  method  found  for  getProperty(Properties)	11	None	replace
24	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties.values());  [CE]  no  suitable  method  found  for  getProperty(Collection<Object>)  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getProperty(properties.values());  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties.values());	      Properties    cmd    =    properties.getProperty(value);    	non-compiled	[CE]  no  suitable  method  found  for  getProperty(Collection<Object>)	11	None	replace
25	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet());  [CE]  no  suitable  method  found  for  getProperty(Set<Object>)  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet());  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties.keySet());	      Properties    cmd    =    properties.getProperty(value);    	non-compiled	[CE]  no  suitable  method  found  for  getProperty(Set<Object>)	11	None	replace
26	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  not  a  statement	3	None	add
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  <identifier>  expected	3	None	add
28	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
29	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throwException( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throwException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.throwException( "   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	3	None	add
30	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyNames();  [CE]  incompatible  types  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.propertyNames();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.propertyNames();	      Properties    cmd    =    properties.getPropertyNames();    	non-compiled	[CE]  incompatible  types	15	None	replace
31	[BUG]  [BUGGY]  Properties  cmd  =  this.properties.getPropertyNames();  [CE]  cannot  find  symbol  properties  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  this.properties.getPropertyNames();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  this.properties.getPropertyNames();	      Properties    cmd    =    properties.getPropertyNames();    	non-compiled	[CE]  cannot  find  symbol  properties	15	None	replace
32	[BUG]  [BUGGY]  Property  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Property  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
33	[BUG]  [BUGGY]  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
34	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
35	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  [CE]  cannot  find  symbol  option  [FE]                    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Option  cmd  =  options.getOption(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  cannot  find  symbol  option	29	None	replace
36	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  Throw  new  RuntimeException( "Properties  are  null.   ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  Throw  new  RuntimeException( "Properties  are  null.   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    are    null.   ");    Throw  new  RuntimeException( "Properties  are  null.   ");	  	non-compiled	[CE]  not  a  statement	7	None	add
37	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  throw  new  RuntimeException( "Properties  are  null.   ");  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  throw  new  RuntimeException( "Properties  are  null.   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    are    null.   ");    throw  new  RuntimeException( "Properties  are  null.   ");	  	non-compiled	[CE]  unreachable  statement	7	None	add
38	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  PropertyFailure  {  throw  new  RuntimeException( "Properties  are  null.   ");  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  PropertyFailure  {  throw  new  RuntimeException( "Properties  are  null.   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    are    null.   ");    PropertyFailure  {  throw  new  RuntimeException( "Properties  are  null.   ");	  	non-compiled	[CE]  not  a  statement	7	None	add
39	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  Throwables.throw  new  RuntimeException( "Properties  are  null.   ");  [CE]  <identifier>  expected  [FE]          RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  Throwables.throw  new  RuntimeException( "Properties  are  null.   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    are    null.   ");    Throwables.throw  new  RuntimeException( "Properties  are  null.   ");	  	non-compiled	[CE]  <identifier>  expected	7	None	add
40	[BUG]  [BUGGY]  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
41	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
42	[BUG]  [BUGGY]  Properties  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
43	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  [CE]  ')'  expected  [FE]                      ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  ')'  expected	30	None	replace
44	[BUG]  [BUGGY]  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  }	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	28	None	replace
45	[BUG]  [BUGGY]  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
46	[BUG]  [BUGGY]  Properties  cmd  =  cmd.getOption(option);  [CE]  cannot  find  symbol  option  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  cmd.getOption(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  cmd.getOption(option);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	28	None	replace
47	[BUG]  [BUGGY]  throw  new  RuntimeException(   "   ");  Throw  new  RuntimeException( "   ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "   ");  Throw  new  RuntimeException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "   ");    Throw  new  RuntimeException( "   ");	  	non-compiled	[CE]  not  a  statement	1	None	add
48	[BUG]  [BUGGY]  throw  new  RuntimeException(   "   ");  throw  new  RuntimeException( "   ");  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "   ");  throw  new  RuntimeException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "   ");    throw  new  RuntimeException( "   ");	  	non-compiled	[CE]  unreachable  statement	1	None	add
49	[BUG]  [BUGGY]  throw  new  RuntimeException(   "   ");  Throwables.throw  new  RuntimeException( "   ");  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "   ");  Throwables.throw  new  RuntimeException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "   ");    Throwables.throw  new  RuntimeException( "   ");	  	non-compiled	[CE]  <identifier>  expected	1	None	add
50	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	17	None	replace
51	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalStateException( "Properties  cannot  be  null. ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	17	2	replace
52	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalStateException( "Properties  cannot  be  null. ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	17	2	replace
53	[BUG]  [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
54	[BUG]  [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
55	[BUG]  [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(!cmd.hasOption(option))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
56	[BUG]  [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
57	[BUG]  [BUGGY]      if(properties!=  null)  {  for(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties!=  null)  {  for(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties!=  null)  {  for(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
58	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ");  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
59	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [CE]  cannot  find  symbol  propertyName  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  cannot  find  symbol  propertyName	25	None	replace
60	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "' ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "' ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "' ");  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "' ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  cannot  find  symbol  option	25	None	replace
62	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	        if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
63	[BUG]  [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
64	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	        if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
65	[BUG]  [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
66	[BUG]  [BUGGY]      if(properties  ==  null)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  [CE]  cannot  find  symbol  propertyNames  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties    ==    null)    {    return;    }    if(propertyNames  ==  null)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  propertyNames	22	None	add
67	[BUG]  [BUGGY]      if(properties  ==  null)  {  return;  }  if(propertyMap  ==  null)  {  return;  }  [CE]  cannot  find  symbol  propertyMap  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(propertyMap  ==  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties    ==    null)    {    return;    }    if(propertyMap  ==  null)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  propertyMap	22	None	add
68	[BUG]  [BUGGY]      if(properties  ==  null)  {  return;  }  Property(properties  ==  null)  {  return;  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  Property(properties  ==  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties    ==    null)    {    return;    }    Property(properties  ==  null)  {  return;  }	  	non-compiled	[CE]  ';'  expected	22	None	add
69	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.properties();  [CE]  cannot  find  symbol  props  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.properties();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  props.properties();	      Enumeration    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  cannot  find  symbol  props	21	None	replace
70	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  _properties.properties();  [CE]  cannot  find  symbol  _properties  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  _properties.properties();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  _properties.properties();	      Enumeration    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  cannot  find  symbol  _properties	21	None	replace
71	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ")+ "  cannot  access  properties: "  +  properties.propertyNames();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  RuntimeException( " ")+ "  cannot  access  properties: "  +  properties.propertyNames();  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( " ")+ "  cannot  access  properties: "  +  properties.propertyNames();	  throw    new    RuntimeException(   "   ")    +   "    cannot    access    properties:   "    +    properties.propertyNames();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
72	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleMissingException( " ");	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	23	None	replace
73	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(properties);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleFailure(properties);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(properties);	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	23	None	replace
74	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  [Delete]  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	[Delete]	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
75	[BUG]  [BUGGY]  tries.add(properties);  [CE]  cannot  find  symbol  tries  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  tries.add(properties);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	tries.add(properties);	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  tries	23	None	replace
76	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ");	  throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
77	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }	  throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  RuntimeException  	6	2	replace
78	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }	  throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  RuntimeException  	6	2	replace
79	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");	  throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
80	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [FE]  IllegalArgumentException  [FE]        RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");	  throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  IllegalArgumentException  	6	2	replace
81	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
82	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
83	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]        IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	4	None	replace
84	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(propertyName);  [CE]  cannot  find  symbol  propertyName  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.get(propertyName);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(propertyName);	      Properties    cmd    =    properties.get(value);    	non-compiled	[CE]  cannot  find  symbol  propertyName	14	None	replace
85	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(key);  [CE]  cannot  find  symbol  key  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.get(key);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(key);	      Properties    cmd    =    properties.get(value);    	non-compiled	[CE]  cannot  find  symbol  key	14	None	replace
86	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(cmd);  [CE]  incompatible  types  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.get(cmd);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(cmd);	      Properties    cmd    =    properties.get(value);    	non-compiled	[CE]  incompatible  types	14	None	replace
87	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(propertyValue);  [CE]  cannot  find  symbol  propertyValue  [FE]                    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.get(propertyValue);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(propertyValue);	      Properties    cmd    =    properties.get(value);    	non-compiled	[CE]  cannot  find  symbol  propertyValue	14	None	replace
88	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null. ");  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  are  null. ");	  throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
89	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Properties  are  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalArgumentException( "Properties  are  null. ");	  throw    new    RuntimeException(   "Properties    are    null.   ");    	compilable	  [FE]  IllegalArgumentException  	8	2	replace
90	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Properties  are  null. ");  [FE]  IllegalArgumentException  [FE]      RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Properties  are  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Properties  are  null. ");	  throw    new    RuntimeException(   "Properties    are    null.   ");    	compilable	  [FE]  IllegalArgumentException  	8	2	replace
91	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  null. ");  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Properties  are  null. ");	  throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
92	[BUG]  [BUGGY]  Properties  cmd  =  properties.getPropertyValue(properties);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getPropertyValue(properties);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getPropertyValue(properties);	      Properties    cmd    =    properties.getPropertyValue(value);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
93	[BUG]  [BUGGY]  Properties  cmd  =  properties.getPropertyValue(option);  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getPropertyValue(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getPropertyValue(option);	      Properties    cmd    =    properties.getPropertyValue(value);    	non-compiled	[CE]  cannot  find  symbol  option	13	None	replace
94	[BUG]  [BUGGY]  Properties  cmd  =  properties.getPropertyValue(propertyName);  [CE]  cannot  find  symbol  propertyName  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getPropertyValue(propertyName);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getPropertyValue(propertyName);	      Properties    cmd    =    properties.getPropertyValue(value);    	non-compiled	[CE]  cannot  find  symbol  propertyName	13	None	replace
95	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions();	      Enumeration    <    String>    requiredOptions    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
96	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequires();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequires();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties.propertyRequires();	      Enumeration    <    String>    requiredOptions    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
97	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  [CE]  incompatible  types  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyNames();	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  incompatible  types	26	None	replace
98	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(option);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	27	None	replace
99	[BUG]  [BUGGY]  Property  cmd  =  cmd.nextElement().toString();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Property  cmd  =  cmd.nextElement().toString();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  cmd.nextElement().toString();	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
100	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {	      	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
101	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	      	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
102	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(option);  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.get(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(option);	      Properties    cmd    =    properties.get(value);    	non-compiled	[CE]  cannot  find  symbol  option	14	None	replace
103	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(properties);  [CE]  incompatible  types  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.get(properties);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(properties);	      Properties    cmd    =    properties.get(value);    	non-compiled	[CE]  incompatible  types	14	None	replace
104	[BUG]  [BUGGY]  Enumeration  <  Property>  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  Property>  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  Property>  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
105	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  are  null. ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throw  new  RuntimeException( "Properties  are  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  are  null. ");	  throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  not  a  statement	8	None	replace
106	[BUG]  [BUGGY]  Properties  cmd  =  properties.getPropertyValue(key);  [CE]  cannot  find  symbol  key  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getPropertyValue(key);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getPropertyValue(key);	      Properties    cmd    =    properties.getPropertyValue(value);    	non-compiled	[CE]  cannot  find  symbol  key	13	None	replace
107	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.values();  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.values();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.values();	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  incompatible  types	20	None	replace
108	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(value);  [CE]  cannot  find  symbol  value  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(value);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyName(value);	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol  value	20	None	replace
109	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet();  [CE]  incompatible  types  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.keySet();	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  incompatible  types	20	None	replace
110	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(properties,  value);  [CE]  cannot  find  symbol  value  [FE]    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleFailure(properties,  value);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(properties,  value);	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	23	None	replace
111	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  cannot  be  null. ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throw  new  RuntimeException( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  cannot  be  null. ");	  throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	6	None	replace
112	[BUG]  [BUGGY]  Properties  cmd  =  properties.getPropertyFactory();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getPropertyFactory();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getPropertyFactory();	      Properties    cmd    =    properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
113	[BUG]  [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
114	[BUG]  [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  option	22	None	add
115	[BUG]  [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  value  [FE]      ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(value))  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.hasOption(value))  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  value	22	None	add
116	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(value));  [CE]  cannot  find  symbol  value  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(value));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( " ".equals(value));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  value	4	None	replace
117	[BUG]  [BUGGY]  throw  new  RuntimeException( " ")+ ",  cannot  access  properties: "  +  properties.propertyNames();  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException( " ")+ ",  cannot  access  properties: "  +  properties.propertyNames();  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( " ")+ ",  cannot  access  properties: "  +  properties.propertyNames();	  throw    new    RuntimeException(   "   ")    +   "    cannot    access    properties:   "    +    properties.propertyNames();    	non-compiled	[CE]  incompatible  types	18	None	replace
118	[BUG]  [BUGGY]  Throw  new  RuntimeException( " ")+ "  cannot  access  properties: "  +  properties.propertyNames();  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throw  new  RuntimeException( " ")+ "  cannot  access  properties: "  +  properties.propertyNames();  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( " ")+ "  cannot  access  properties: "  +  properties.propertyNames();	  throw    new    RuntimeException(   "   ")    +   "    cannot    access    properties:   "    +    properties.propertyNames();    	non-compiled	[CE]  not  a  statement	18	None	replace
119	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "' ");  [CE]  cannot  find  symbol  property  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "' ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  cannot  find  symbol  property	25	None	replace
120	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  if(properties  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  if(properties  ==  null)  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    if(properties  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
121	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requires();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requires();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties.requires();	      Enumeration    <    String>    requiredOptions    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
122	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  if(properties  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  if(properties  ==  null)  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    are    null.   ");    if(properties  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
123	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(option,  cmd);  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleOption(option,  cmd);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleOption(option,  cmd);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  cannot  find  symbol  option	29	None	replace
124	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  if(properties  ==  null.   ");  [CE]  unclosed  string  literal  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  if(properties  ==  null.   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    if(properties  ==  null.   ");	  	non-compiled	[CE]  unclosed  string  literal	5	None	add
125	[BUG]  [BUGGY]  Context.checkState(cmd.hasOption(option));  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Context.checkState(cmd.hasOption(option));  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(cmd.hasOption(option));	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol  option	27	None	replace
126	[BUG]  [BUGGY]  if(option  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(option  ==  null)  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
127	[BUG]  [BUGGY]  if(cmd  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(cmd  ==  null)  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(cmd  ==  null)  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
128	[BUG]  [BUGGY]  Context.checkState(cmd.hasOption(value));  [CE]  cannot  find  symbol  value  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Context.checkState(cmd.hasOption(value));  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(cmd.hasOption(value));	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  cannot  find  symbol  value	26	None	replace
129	[BUG]  [BUGGY]  throw  new  RuntimeException(   "   ");  if(properties  ==  null)  {  throw  new  RuntimeException( "   ");  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "   ");  if(properties  ==  null)  {  throw  new  RuntimeException( "   ");  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "   ");    if(properties  ==  null)  {  throw  new  RuntimeException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
130	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(propertiesName);  [CE]  cannot  find  symbol  propertiesName  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getProperty(propertiesName);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(propertiesName);	      Properties    cmd    =    properties.getProperty(value);    	non-compiled	[CE]  cannot  find  symbol  propertiesName	11	None	replace
131	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(properties.values());  [CE]  incompatible  types  [FE]              ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.get(properties.values());  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(properties.values());	      Properties    cmd    =    properties.get(value);    	non-compiled	[CE]  incompatible  types	14	None	replace
132	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  return;  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  for(Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  return;  }	      	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
133	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {	      	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
134	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  for(Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {	      	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
135	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {	      	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
136	[BUG]  [BUGGY]  tries.add(cmd);  [CE]  cannot  find  symbol  tries  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  tries.add(cmd);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	tries.add(cmd);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  tries	28	None	replace
137	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  are  null.   ");  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException(   "Properties  are  null.   ");  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  are  null.   ");  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Properties    are    null.   ");    if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  are  null.   ");  }	  	non-compiled	[CE]  unreachable  statement	7	None	add
138	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException( "   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException( "   ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "   ");    new  IllegalStateException( "   ");	  	non-compiled	[CE]  unreachable  statement	16	None	add
139	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
140	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
141	[BUG]  [BUGGY]  parent  ==  null  ||  properties.properties  ==  null)  {  return;  }  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  parent  ==  null  ||  properties.properties  ==  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	parent  ==  null  ||  properties.properties  ==  null)  {  return;  }	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
142	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException( "Expected  properties  to  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  RuntimeException( "Expected  properties  to  be  null. ");	  throw    new    RuntimeException(   "   ");    	compilable	  [FE]  RuntimeException  	2	2	replace
143	[BUG]  [BUGGY]  throw  new  RuntimeException( "Expected  properties  to  be  null. ");  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException( "Expected  properties  to  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Expected  properties  to  be  null. ");	  throw    new    RuntimeException(   "   ");    	compilable	  [FE]  RuntimeException  	2	2	replace
144	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  property.properties();  [CE]  cannot  find  symbol  property  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  property.properties();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  property.properties();	      Enumeration    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  cannot  find  symbol  property	21	None	replace
145	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "' ");  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "' ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  not  a  statement	25	None	replace
146	[BUG]  [BUGGY]  Properties  cmd  =  properties.getPropertyValue(propertiesName);  [CE]  cannot  find  symbol  propertiesName  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.getPropertyValue(propertiesName);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getPropertyValue(propertiesName);	      Properties    cmd    =    properties.getPropertyValue(value);    	non-compiled	[CE]  cannot  find  symbol  propertiesName	13	None	replace
147	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "   ");    if(properties  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
148	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	        if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
149	[BUG]  [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
150	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	        if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
151	[BUG]  [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	22	2	add
152	[BUG]  [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]      if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	        if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
153	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalStateException( "Properties  must  not  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalStateException( "Properties  must  not  be  null. ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	17	2	replace
154	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Properties  must  not  be  null. ");  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalStateException( "Properties  must  not  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalStateException( "Properties  must  not  be  null. ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	17	2	replace
155	[BUG]  [BUGGY]  throw  new  RuntimeException( "Properties  are  null ".equals(properties.values()));  [CE]  no  suitable  constructor  found  for  RuntimeException(boolean)  [FE]    RuntimeException    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException( "Properties  are  null ".equals(properties.values()));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Properties  are  null ".equals(properties.values()));	  throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  RuntimeException(boolean)	8	None	replace
156	[BUG]  [BUGGY]  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(cmd.hasOption(option))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(cmd.hasOption(option))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
157	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(value);  [CE]  cannot  find  symbol  value  [FE]          ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(value);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(value);	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol  value	20	None	replace
158	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyValues();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyValues();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyValues();	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
