bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  RuntimeException( " ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  RuntimeException( " ");	return;  	compilable	  [FE]  RuntimeException  	34	2	replace
2	[BUG]  [BUGGY]  throw  new  RuntimeException( " ");  [FE]  RuntimeException  [FE]    ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  RuntimeException( " ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( " ");	return;  	compilable	  [FE]  RuntimeException  	34	2	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalArgumentException( " ");	return;  	compilable	  [FE]  IllegalArgumentException  	34	2	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]      ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( " ");	return;  	compilable	  [FE]  IllegalArgumentException  	34	2	replace
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  RuntimeException( "Properties  cannot  be  null. ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  RuntimeException( "Properties  cannot  be  null. ");	return;  	compilable	  [FE]  RuntimeException  	34	2	replace
6	[BUG]  [BUGGY]  throw  new  RuntimeException( "Properties  cannot  be  null. ");  [FE]  RuntimeException  [FE]        ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  RuntimeException( "Properties  cannot  be  null. ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Properties  cannot  be  null. ");	return;  	compilable	  [FE]  RuntimeException  	34	2	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  RuntimeException( "Properties  are  null. ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  RuntimeException( "Properties  are  null. ");	return;  	compilable	  [FE]  RuntimeException  	34	2	replace
8	[BUG]  [BUGGY]  throw  new  RuntimeException( "Properties  are  null. ");  [FE]  RuntimeException  [FE]          ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  RuntimeException( "Properties  are  null. ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Properties  are  null. ");	return;  	compilable	  [FE]  RuntimeException  	34	2	replace
9	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	  	return;  	compilable	  [FE]  NullPointerException  	34	2	replace
10	[BUG]  [BUGGY]    [FE]  NullPointerException  [FE]            ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	  	return;  	compilable	  [FE]  NullPointerException  	34	2	replace
11	[BUG]  [BUGGY]    Properties  cmd  =  properties.getProperty(value);  [CE]  cannot  find  symbol  value  [FE]    ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Properties  cmd  =  properties.getProperty(value);  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    Properties  cmd  =  properties.getProperty(value);		non-compiled	[CE]  cannot  find  symbol  value	35	None	add
12	[BUG]  [BUGGY]    Properties  cmd  =  properties.getProperties();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Properties  cmd  =  properties.getProperties();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    Properties  cmd  =  properties.getProperties();		non-compiled	[CE]  cannot  find  symbol	35	None	add
13	[BUG]  [BUGGY]    Properties  cmd  =  properties.getPropertyValue(value);  [CE]  cannot  find  symbol  value  [FE]        ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Properties  cmd  =  properties.getPropertyValue(value);  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    Properties  cmd  =  properties.getPropertyValue(value);		non-compiled	[CE]  cannot  find  symbol  value	35	None	add
14	[BUG]  [BUGGY]    Properties  cmd  =  properties.get(value);  [CE]  cannot  find  symbol  value  [FE]          ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Properties  cmd  =  properties.get(value);  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    Properties  cmd  =  properties.get(value);		non-compiled	[CE]  cannot  find  symbol  value	35	None	add
15	[BUG]  [BUGGY]    Properties  cmd  =  properties.getPropertyNames();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Properties  cmd  =  properties.getPropertyNames();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    Properties  cmd  =  properties.getPropertyNames();		non-compiled	[CE]  cannot  find  symbol	35	None	add
16	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalStateException( " ");	return;  	compilable	  [FE]  IllegalStateException  	34	2	replace
17	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  IllegalStateException  [FE]    ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalStateException( " ");	return;  	compilable	  [FE]  IllegalStateException  	34	2	replace
18	[BUG]  [BUGGY]  throw  new  RuntimeException( " ")  + "  cannot  access  properties: "  +  properties.propertyNames();  [CE]  incompatible  types  [FE]      ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  RuntimeException( " ")  + "  cannot  access  properties: "  +  properties.propertyNames();  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( " ")  + "  cannot  access  properties: "  +  properties.propertyNames();	return;  	non-compiled	[CE]  incompatible  types	34	None	replace
19	[BUG]  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.propertyNames();  [CE]  incompatible  types  [FE]    ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.propertyNames();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    Enumeration  <  String>  requiredOptions  =  properties.propertyNames();		non-compiled	[CE]  incompatible  types	35	None	add
20	[BUG]  [BUGGY]    Enumeration  <  String>  cmd  =  properties.propertyNames();  [CE]  incompatible  types  [FE]      ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Enumeration  <  String>  cmd  =  properties.propertyNames();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    Enumeration  <  String>  cmd  =  properties.propertyNames();		non-compiled	[CE]  incompatible  types	35	None	add
21	[BUG]  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.properties();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.properties();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    Enumeration  <  String>  requiredOptions  =  properties.properties();		non-compiled	[CE]  cannot  find  symbol	35	None	add
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  return;  }  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	    if(properties  ==  null)  {  return;  }		compilable	  [FE]  ComparisonFailure  	35	2	add
23	[BUG]  [BUGGY]    if(properties  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  return;  }  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    if(properties  ==  null)  {  return;  }		compilable	  [FE]  ComparisonFailure  	35	2	add
24	[BUG]  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.values();  [CE]  incompatible  types  [FE]            ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.values();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    Enumeration  <  String>  requiredOptions  =  properties.values();		non-compiled	[CE]  incompatible  types	35	None	add
25	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ");  [CE]  cannot  find  symbol  value  [FE]    ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ");	return;  	non-compiled	[CE]  cannot  find  symbol  value	34	None	replace
26	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {		non-compiled	[CE]  illegal  start  of  expression	35	None	add
27	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {		non-compiled	[CE]  illegal  start  of  expression	35	None	add
28	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	35	None	add
29	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {		non-compiled	[CE]  illegal  start  of  expression	35	None	add
30	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {		non-compiled	[CE]  illegal  start  of  expression	35	None	add
