bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Thread.currentThread().throw  new  RuntimeException( "Properties  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().throw  new  RuntimeException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().throw  new  RuntimeException( "Properties  cannot  be  null. ");	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    Throwables.throw    new    RuntimeException(   "Properties    cannot    be    null.       ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
2	[BUG]  [BUGGY]  Property  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {	  Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
3	[BUG]  [BUGGY]  Property  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {	  Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
4	[BUG]  [BUGGY]  Property  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {	  Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
5	[BUG]  [BUGGY]  Property  cmd  =  property.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  property.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  property.getOption(option);  if(cmd.hasOption(value))  {	  Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
6	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(cmd);  [CE]  method  propertyNames  in  class  Properties  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(cmd);	  Enumeration    <    String>    cmd    =    properties.propertyNames(value);    	non-compiled	[CE]  method  propertyNames  in  class  Properties  cannot  be  applied  to  given  types;	157	None	replace
7	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(name);  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(name);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(name);	  Enumeration    <    String>    cmd    =    properties.propertyNames(value);    	non-compiled	[CE]  cannot  find  symbol  name	157	None	replace
8	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(option);  [CE]  cannot  find  symbol  option  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(option);	  Enumeration    <    String>    cmd    =    properties.propertyNames(value);    	non-compiled	[CE]  cannot  find  symbol  option	157	None	replace
9	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(key);  [CE]  cannot  find  symbol  key  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(key);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(key);	  Enumeration    <    String>    cmd    =    properties.propertyNames(value);    	non-compiled	[CE]  cannot  find  symbol  key	157	None	replace
10	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyKeys();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyKeys();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyKeys();	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
11	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyCase();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyCase();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyCase();	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
12	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyName(value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyName(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyName(value);	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol  value	97	None	replace
13	[BUG]  [BUGGY]  Thread.currentThread().throw  new  RuntimeException( " ");  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().throw  new  RuntimeException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().throw  new  RuntimeException( " ");	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
14	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties!=  null)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	compilable	  [FE]  NullPointerException  	49	2	replace
15	[BUG]  [BUGGY]  if(properties!=  null)  {  throw  new  RuntimeException( " ");  }  [FE]  NullPointerException  [FE]              RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	compilable	  [FE]  NullPointerException  	49	2	replace
16	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " "));  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " "));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( " "));	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
17	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Property  ' "  +  properties.getName()  + "'  must  be  null. ");  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Property  ' "  +  properties.getName()  + "'  must  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Property  ' "  +  properties.getName()  + "'  must  be  null. ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  Throw  new  IllegalArgumentException( "Properties  are  null.   ");  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  Throw  new  IllegalArgumentException( "Properties  are  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    are    null.   ");    Throw  new  IllegalArgumentException( "Properties  are  null.   ");	  	non-compiled	[CE]  not  a  statement	89	None	add
19	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  Throwables.throw  new  IllegalArgumentException( "Properties  are  null.   ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  Throwables.throw  new  IllegalArgumentException( "Properties  are  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    are    null.   ");    Throwables.throw  new  IllegalArgumentException( "Properties  are  null.   ");	  	non-compiled	[CE]  <identifier>  expected	89	None	add
20	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  throw  new  IllegalArgumentException( "Properties  are  null.   ");  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  throw  new  IllegalArgumentException( "Properties  are  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    are    null.   ");    throw  new  IllegalArgumentException( "Properties  are  null.   ");	  	non-compiled	[CE]  unreachable  statement	89	None	add
21	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  IllegalArgumentException( "Properties  are  null.   ");  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  IllegalArgumentException( "Properties  are  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    are    null.   ");    IllegalArgumentException( "Properties  are  null.   ");	  	non-compiled	[CE]  cannot  find  symbol	89	None	add
22	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
23	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  if(c.hasMoreElements())  {  String  value  =  c.nextElement().toString();  }  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  if(c.hasMoreElements())  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyNames();  if(c.hasMoreElements())  {  String  value  =  c.nextElement().toString();  }	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  incompatible  types	101	None	replace
24	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
25	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  are  null.. ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  are  null.. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  are  null.. ");	  throw    new    RuntimeException(       "Properties    are    null.       ");    Throw    new    RuntimeException(   "Properties    are    null.       ");    	non-compiled	[CE]  not  a  statement	36	None	replace
26	[BUG]  [BUGGY]  Throw  new  RuntimeException( " ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( " ");	  throw    new    RuntimeException(       "       ");    Throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  not  a  statement	47	None	replace
27	[BUG]  [BUGGY]  timeout  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	Thread.currentThread().interrupt();	  throw    new    RuntimeException(       "       ");    Throw    new    RuntimeException(   "       ");    	compilable	timeout	47	1	replace
28	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  timeout  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().interrupt();	  throw    new    RuntimeException(       "       ");    Throw    new    RuntimeException(   "       ");    	compilable	timeout	47	1	replace
29	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().setContextClassLoader(this);	  throw    new    RuntimeException(       "       ");    Throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	47	None	replace
30	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	115	None	replace
31	[BUG]  [BUGGY]  If(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  If(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	If(properties  ==  null  ||  properties.hasOption(option))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(value))    {    return;    }    	non-compiled	[CE]  ';'  expected	115	None	replace
32	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null  ||  properties.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null  ||  properties.hasOption(value))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	115	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( "Properties  cannot  be  null. ");	  throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	52	None	replace
34	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  }	  throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  IllegalStateException  	52	2	replace
35	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  }	  throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  IllegalStateException  	52	2	replace
36	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().toString();  if(value.equals(value))  {  return;  }  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().toString();  if(value.equals(value))  {  return;  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  value  =  properties.propertyNames().toString();  if(value.equals(value))  {  return;  }	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
37	[BUG]  [BUGGY]  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  return;  }  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  return;  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  return;  }	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
38	[BUG]  [BUGGY]  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  return;  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  return;  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  return;	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
39	[BUG]  [BUGGY]  Context.checkState(e.hasMoreElements());  [CE]  cannot  find  symbol  e  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Context.checkState(e.hasMoreElements());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(e.hasMoreElements());	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  e	132	None	replace
40	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet(),  value);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet(),  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties.keySet(),  value);	  Properties    cmd    =    properties.getProperty(properties.keySet());    	non-compiled	[CE]  cannot  find  symbol  value	25	None	replace
41	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet(),  values);  [CE]  cannot  find  symbol  values  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet(),  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties.keySet(),  values);	  Properties    cmd    =    properties.getProperty(properties.keySet());    	non-compiled	[CE]  cannot  find  symbol  values	25	None	replace
42	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet(),  props);  [CE]  cannot  find  symbol  props  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet(),  props);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties.keySet(),  props);	  Properties    cmd    =    properties.getProperty(properties.keySet());    	non-compiled	[CE]  cannot  find  symbol  props	25	None	replace
43	[BUG]  [BUGGY]  Property  cmd  =  property.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  property.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  property.nextElement().toString();  if(!cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  Property  cmd  =  properties.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  properties.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  properties.nextElement().toString();  if(!cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  Property  cmd  =  properties.propertyNames().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  properties.propertyNames().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  properties.propertyNames().toString();  if(!cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  Property  cmd  =  properties.getOption(option);  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  properties.getOption(option);  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  properties.getOption(option);  if(!cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  Throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  Throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    Throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  not  a  statement	79	None	add
48	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  Throwables.throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  Throwables.throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    Throwables.throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  <identifier>  expected	79	None	add
49	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  unreachable  statement	79	None	add
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  IllegalArgumentException( "Properties  cannot  be  null.   ");  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  IllegalArgumentException( "Properties  cannot  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    IllegalArgumentException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
51	[BUG]  [BUGGY]  Throwables.throw(new  RuntimeException( "Properties  are  null. "));  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw(new  RuntimeException( "Properties  are  null. "));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw(new  RuntimeException( "Properties  are  null. "));	  throw    new    RuntimeException(       "Properties    are    null.       ");    throw    new    RuntimeException(   "Properties    are    null.       ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
52	[BUG]  [BUGGY]  Throwables.throw(new  RuntimeException( "Properties  are  null. "),  e);  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw(new  RuntimeException( "Properties  are  null. "),  e);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw(new  RuntimeException( "Properties  are  null. "),  e);	  throw    new    RuntimeException(       "Properties    are    null.       ");    throw    new    RuntimeException(   "Properties    are    null.       ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
53	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties!=  null)  {  return;  }	          if(properties    ==    null)    {    return;    }    if(propertyNames    ==    null)    {    return;    }    	compilable	  [FE]  NullPointerException  	66	2	replace
54	[BUG]  [BUGGY]  if(properties!=  null)  {  return;  }  [FE]  NullPointerException  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  return;  }	          if(properties    ==    null)    {    return;    }    if(propertyNames    ==    null)    {    return;    }    	compilable	  [FE]  NullPointerException  	66	2	replace
55	[BUG]  [BUGGY]  if(propertyNames  ==  null)  {  return;  }  [CE]  cannot  find  symbol  propertyNames  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(propertyNames  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(propertyNames  ==  null)  {  return;  }	          if(properties    ==    null)    {    return;    }    if(propertyNames    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  propertyNames	66	None	replace
56	[BUG]  [BUGGY]  if(propertyNames!=  null)  {  return;  }  [CE]  cannot  find  symbol  propertyNames  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(propertyNames!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(propertyNames!=  null)  {  return;  }	          if(properties    ==    null)    {    return;    }    if(propertyNames    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  propertyNames	66	None	replace
57	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasValue(value))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasValue(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);  if(cmd.hasValue(value))  {	  Option    cmd    =    options.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
58	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {	  Option    cmd    =    options.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(option);  if(option.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(option);  if(option.hasOption(value))  {	  Option    cmd    =    options.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
60	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
61	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  ')'  expected	54	None	replace
62	[BUG]  [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
63	[BUG]  [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  ')'  expected	54	None	replace
64	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Property  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Property  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Property  cannot  be  null. ");	  Throwables.throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
65	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null! ");  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null! ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  cannot  be  null! ");	  Throwables.throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
66	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null ".   ");  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null ".   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  cannot  be  null ".   ");	  Throwables.throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
67	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.propertyRequiredOptions();  [CE]  cannot  find  symbol  props  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.propertyRequiredOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  props.propertyRequiredOptions();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol  props	95	None	replace
68	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  _properties.propertyRequiredOptions();  [CE]  cannot  find  symbol  _properties  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  _properties.propertyRequiredOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  _properties.propertyRequiredOptions();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol  _properties	95	None	replace
69	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  property.propertyRequiredOptions();  [CE]  cannot  find  symbol  property  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  property.propertyRequiredOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  property.propertyRequiredOptions();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol  property	95	None	replace
70	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
71	[BUG]  [BUGGY]  Context.checkState(cmd.hasOption(opt));  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Context.checkState(cmd.hasOption(opt));  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(cmd.hasOption(opt));	  Context.checkState(cmd.hasOption(value));    	non-compiled	[CE]  cannot  find  symbol  opt	128	None	replace
72	[BUG]  [BUGGY]  Context.checkState(cmd.hasOption(options));  [CE]  no  suitable  method  found  for  hasOption(Options)  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Context.checkState(cmd.hasOption(options));  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(cmd.hasOption(options));	  Context.checkState(cmd.hasOption(value));    	non-compiled	[CE]  no  suitable  method  found  for  hasOption(Options)	128	None	replace
73	[BUG]  [BUGGY]  Context.checkState(properties.hasOption(value));  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Context.checkState(properties.hasOption(value));  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(properties.hasOption(value));	  Context.checkState(cmd.hasOption(value));    	non-compiled	[CE]  cannot  find  symbol  value	128	None	replace
74	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }	  	compilable	  [FE]  RuntimeException  	77	2	add
75	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }	  	compilable	  [FE]  RuntimeException  	77	2	add
76	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }	  	compilable	  [FE]  RuntimeException  	77	2	add
77	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }	  	compilable	  [FE]  RuntimeException  	77	2	add
78	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.. ");  }	  	compilable	  [FE]  RuntimeException  	77	2	add
79	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.. ");  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.. ");  }	  	compilable	  [FE]  RuntimeException  	77	2	add
80	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(properties.values(),  values);  [CE]  cannot  find  symbol  values  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(properties.values(),  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(properties.values(),  values);	  Properties    cmd    =    properties.get(properties.values());    	non-compiled	[CE]  cannot  find  symbol  values	131	None	replace
81	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(properties.values(),  value);  [CE]  cannot  find  symbol  value  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(properties.values(),  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(properties.values(),  value);	  Properties    cmd    =    properties.get(properties.values());    	non-compiled	[CE]  cannot  find  symbol  value	131	None	replace
82	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(properties.keySet());  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(properties.keySet());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(properties.keySet());	  Properties    cmd    =    properties.get(properties.values());    	non-compiled	[CE]  incompatible  types	131	None	replace
83	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(propertyNames());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(propertyNames());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(propertyNames());	  Properties    cmd    =    properties.get(properties.values());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
84	[BUG]  [BUGGY]  Properties  cmd  =  options.getPropertyValue(option);  [CE]  cannot  find  symbol  option  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.getPropertyValue(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.getPropertyValue(option);	  Properties    cmd    =    properties.getPropertyValue(option);    	non-compiled	[CE]  cannot  find  symbol  option	93	None	replace
85	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	80	None	replace
86	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  }	  throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  IllegalArgumentException  	80	2	replace
87	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  }	  throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  IllegalArgumentException  	80	2	replace
88	[BUG]  [BUGGY]  Properties  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
89	[BUG]  [BUGGY]  Properties  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
90	[BUG]  [BUGGY]  Properties  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
91	[BUG]  [BUGGY]  Properties  cmd  =  properties.getOption(option);  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getOption(option);  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getOption(option);  if(!cmd.hasOption(value))  {	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
92	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	43	None	replace
93	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	43	None	replace
94	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  }  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  }	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	43	None	replace
95	[BUG]  [BUGGY]  Properties  cmd  =  properties.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.nextElement().toString();  if(cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
96	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyNames().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyNames().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.propertyNames().toString();  if(cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
97	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(option);  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(option);  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(option);  if(cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
98	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  parameters);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  parameters);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(),  parameters);	  Enumeration    <    String>    cmd    =    properties.propertyNames(),    values);    	non-compiled	[CE]  ';'  expected	2	None	replace
99	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  value.toString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  value.toString());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(),  value.toString());	  Enumeration    <    String>    cmd    =    properties.propertyNames(),    values);    	non-compiled	[CE]  ';'  expected	2	None	replace
100	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  options);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  options);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(),  options);	  Enumeration    <    String>    cmd    =    properties.propertyNames(),    values);    	non-compiled	[CE]  ';'  expected	2	None	replace
101	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  options.getOption(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(value);	  Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  value	35	None	replace
102	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  _properties.propertyValues();  [CE]  cannot  find  symbol  _properties  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  _properties.propertyValues();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  _properties.propertyValues();	  Enumeration    <    String>    cmd    =    properties.propertyValues();    	non-compiled	[CE]  cannot  find  symbol  _properties	158	None	replace
103	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  property.propertyValues();  [CE]  cannot  find  symbol  property  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  property.propertyValues();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  property.propertyValues();	  Enumeration    <    String>    cmd    =    properties.propertyValues();    	non-compiled	[CE]  cannot  find  symbol  property	158	None	replace
104	[BUG]  [BUGGY]  Properties  properties  =  properties.get(properties.size()  -  1);  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.get(properties.size()  -  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  properties.get(properties.size()  -  1);	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	151	None	replace
105	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingProperty(property,  value);  [CE]  cannot  find  symbol  property  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingProperty(property,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleMissingProperty(property,  value);	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  property	151	None	replace
106	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingProperty(property);  [CE]  cannot  find  symbol  property  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingProperty(property);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleMissingProperty(property);	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  property	151	None	replace
107	[BUG]  [BUGGY]  throw  new  RuntimeException( "Properties  are  null. ".equals(properties.values()));  [CE]  no  suitable  constructor  found  for  RuntimeException(boolean)  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Properties  are  null. ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Properties  are  null. ".equals(properties.values()));	  throw    new    RuntimeException(   "Properties    are    null   ".equals(properties.values()));    	non-compiled	[CE]  no  suitable  constructor  found  for  RuntimeException(boolean)	155	None	replace
108	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null. ".equals(properties.values()));  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null. ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  are  null. ".equals(properties.values()));	  throw    new    RuntimeException(   "Properties    are    null   ".equals(properties.values()));    	non-compiled	[CE]  <identifier>  expected	155	None	replace
109	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null   ".equals(properties.values()));  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null   ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  are  null   ".equals(properties.values()));	  throw    new    RuntimeException(   "Properties    are    null   ".equals(properties.values()));    	non-compiled	[CE]  <identifier>  expected	155	None	replace
110	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null ").equals(properties.values()));  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null ").equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  are  null ").equals(properties.values()));	  throw    new    RuntimeException(   "Properties    are    null   ".equals(properties.values()));    	non-compiled	[CE]  <identifier>  expected	155	None	replace
111	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.keySet();  [CE]  cannot  find  symbol  properties  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.keySet();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.properties.keySet();	  Enumeration    <    String>    cmd    =    properties.keySet();    	non-compiled	[CE]  cannot  find  symbol  properties	109	None	replace
112	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.properties();	  Enumeration    <    String>    cmd    =    properties.keySet();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
113	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null ".equals(properties.propertyNames()));  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null ".equals(properties.propertyNames()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  are  null ".equals(properties.propertyNames()));	  Throwables.throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
114	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null! ");  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null! ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  are  null! ");	  Throwables.throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
115	[BUG]  [BUGGY]  Thread.currentThread().throw  new  RuntimeException( "Properties  are  null. ");  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().throw  new  RuntimeException( "Properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().throw  new  RuntimeException( "Properties  are  null. ");	  throw    new    RuntimeException(       "Properties    are    null.       ");    Throwables.throw    new    RuntimeException(   "Properties    are    null.       ");    	non-compiled	[CE]  <identifier>  expected	39	None	replace
116	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties!=  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }	  throw    new    RuntimeException(       "Properties    are    null.       ");    Throwables.throw    new    RuntimeException(   "Properties    are    null.       ");    	compilable	  [FE]  NullPointerException  	39	2	replace
117	[BUG]  [BUGGY]  if(properties!=  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }  [FE]  NullPointerException  [FE]                RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }	  throw    new    RuntimeException(       "Properties    are    null.       ");    Throwables.throw    new    RuntimeException(   "Properties    are    null.       ");    	compilable	  [FE]  NullPointerException  	39	2	replace
118	[BUG]  [BUGGY]  Throwables.warning( "Properties  are  null. ");  [CE]  cannot  find  symbol  Throwables  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.warning( "Properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.warning( "Properties  are  null. ");	  throw    new    IllegalArgumentException(   "Properties    are    null.   ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	90	None	replace
119	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "));  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " "));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	81	None	replace
120	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  must  be  null. ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  must  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Properties  must  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	81	None	replace
121	[BUG]  [BUGGY]  Throwables.throwException( " ");  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throwException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throwException( " ");	  throw    new    IllegalStateException(       "       ");    Throwables.throwException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	replace
122	[BUG]  [BUGGY]  Throwables.throwException( ", ");  [CE]  cannot  find  symbol  Throwables  [FE]                IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throwException( ", ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throwException( ", ");	  throw    new    IllegalStateException(       "       ");    Throwables.throwException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	replace
123	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(cmd.toString());  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(cmd.toString());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(cmd.toString());	  Properties    cmd    =    properties.get(cmd);    	non-compiled	[CE]  incompatible  types	86	None	replace
124	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(cmd.name);  [CE]  cannot  find  symbol  name  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(cmd.name);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(cmd.name);	  Properties    cmd    =    properties.get(cmd);    	non-compiled	[CE]  cannot  find  symbol  name	86	None	replace
125	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ")+ ",  cannot  access  properties: "  +  properties.propertyNames();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ")+ ",  cannot  access  properties: "  +  properties.propertyNames();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( " ")+ ",  cannot  access  properties: "  +  properties.propertyNames();	  throw    new    RuntimeException(   "   ")+   ",    cannot    access    properties:   "    +    properties.propertyNames();    	non-compiled	[CE]  <identifier>  expected	117	None	replace
126	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());	  throw    new    RuntimeException(   "   ")+   ",    cannot    access    properties:   "    +    properties.propertyNames();    	compilable	  [FE]  NullPointerException  	117	2	replace
127	[BUG]  [BUGGY]  throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());	  throw    new    RuntimeException(   "   ")+   ",    cannot    access    properties:   "    +    properties.propertyNames();    	compilable	  [FE]  NullPointerException  	117	2	replace
128	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(   "       ");    	compilable	  [FE]  NullPointerException  	138	2	replace
129	[BUG]  [BUGGY]  new  IllegalStateException( " ");  [FE]  NullPointerException  [FE]        IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(   "       ");    	compilable	  [FE]  NullPointerException  	138	2	replace
130	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(properties.propertyNames()));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]          IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( " ".equals(properties.propertyNames()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	new  IllegalStateException( " ".equals(properties.propertyNames()));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	138	None	replace
131	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(property.getValue()));  [CE]  cannot  find  symbol  property  [FE]            IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( " ".equals(property.getValue()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	new  IllegalStateException( " ".equals(property.getValue()));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  property	138	None	replace
132	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");	  Throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	111	None	replace
133	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Property  cannot  be  null. ");  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Property  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Property  cannot  be  null. ");	  Throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	111	None	replace
134	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Properties  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Properties  must  not  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( "Properties  must  not  be  null. ");	  throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	154	None	replace
135	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  must  not  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  must  not  be  null. ");  }	  throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    	compilable	  [FE]  IllegalStateException  	154	2	replace
136	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  must  not  be  null. ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  must  not  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  must  not  be  null. ");  }	  throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    	compilable	  [FE]  IllegalStateException  	154	2	replace
137	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
138	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
139	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
140	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
142	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.size()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
143	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
144	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
145	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()!=  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()!=  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
146	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()!=  0)  {  return;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()!=  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()!=  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	148	2	add
147	[BUG]  [BUGGY]  if(cmd  ==  null  ||!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd  ==  null  ||!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(cmd  ==  null  ||!cmd.hasOption(option))  {	  if(cmd    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
148	[BUG]  [BUGGY]  if(properties  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {	  if(cmd    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
149	[BUG]  [BUGGY]  if(value  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(value  ==  null)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(value  ==  null)  {	  if(cmd    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
150	[BUG]  [BUGGY]  Properties  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	44	None	replace
151	[BUG]  [BUGGY]  Properties  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {  return;  }	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	44	None	replace
152	[BUG]  [BUGGY]  Properties  cmd  =  option.getOption(cmd);  if(cmd.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  option.getOption(cmd);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  option.getOption(cmd);  if(cmd.hasOption(value))  {  return;  }	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	44	None	replace
153	[BUG]  [BUGGY]  Properties  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {  return;  }	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	44	None	replace
154	[BUG]  [BUGGY]  Property  cmd  =  property.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  property.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  property.nextElement().toString();  if(cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
155	[BUG]  [BUGGY]  Property  cmd  =  properties.propertyNames().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  properties.propertyNames().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  properties.propertyNames().toString();  if(cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
156	[BUG]  [BUGGY]  Property  cmd  =  properties.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  properties.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  properties.nextElement().toString();  if(cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
157	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.propertyRequires();  [CE]  cannot  find  symbol  props  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.propertyRequires();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  props.propertyRequires();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequires();    	non-compiled	[CE]  cannot  find  symbol  props	96	None	replace
158	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  _properties.propertyRequires();  [CE]  cannot  find  symbol  _properties  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  _properties.propertyRequires();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  _properties.propertyRequires();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequires();    	non-compiled	[CE]  cannot  find  symbol  _properties	96	None	replace
159	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  property.propertyRequires();  [CE]  cannot  find  symbol  property  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  property.propertyRequires();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  property.propertyRequires();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequires();    	non-compiled	[CE]  cannot  find  symbol  property	96	None	replace
160	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties!=  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	compilable	  [FE]  NullPointerException  	5	2	replace
161	[BUG]  [BUGGY]  if(properties!=  null)  {  throw  new  IllegalStateException( " ");  }  [FE]  NullPointerException  [FE]          IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	compilable	  [FE]  NullPointerException  	5	2	replace
162	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  throw  new  IllegalStateException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( " ");  throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
163	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "'. ");  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "'. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "'. ");	  Throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    property    +   "'   ");    	non-compiled	[CE]  not  a  statement	145	None	replace
164	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + ",' ");  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + ",' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + ",' ");	  Throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    property    +   "'   ");    	non-compiled	[CE]  not  a  statement	145	None	replace
165	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ");  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ");	  Throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    property    +   "'   ");    	non-compiled	[CE]  not  a  statement	145	None	replace
166	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "'. ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "'. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "'. ");	  Throwables.throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    option    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	60	None	replace
167	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + ",' ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + ",' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + ",' ");	  Throwables.throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    option    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	60	None	replace
168	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "' ",  value);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "' ",  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  option  + "' ",  value);	  Throwables.throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    option    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	60	None	replace
169	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    if(properties    ==    null.       ");    	compilable	  [FE]  NullPointerException  	124	2	replace
170	[BUG]  [BUGGY]  if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [FE]  NullPointerException  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    if(properties    ==    null.       ");    	compilable	  [FE]  NullPointerException  	124	2	replace
171	[BUG]  [BUGGY]  if(properties  ==  null. ")  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null. ")  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null. ")  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    if(properties    ==    null.       ");    	non-compiled	[CE]  <identifier>  expected	124	None	replace
172	[BUG]  [BUGGY]  Throwables.throwAsIgnoredException( " ");  [CE]  cannot  find  symbol  Throwables  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throwAsIgnoredException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throwAsIgnoredException( " ");	  throw    new    RuntimeException(       "       ");    throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	48	None	replace
173	[BUG]  [BUGGY]  throw  new  RuntimeException( "Properties  cannot  be  null. ");  if(properties!=  null)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Properties  cannot  be  null. ");  if(properties!=  null)  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Properties  cannot  be  null. ");  if(properties!=  null)  {	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    if(properties    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
174	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ");  if(properties  ==  null)  {  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ");  if(properties  ==  null)  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ");  if(properties  ==  null)  {	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    if(properties    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
175	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  NullPointerException  	28	2	replace
176	[BUG]  [BUGGY]  if(properties!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  NullPointerException  	28	2	replace
177	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(propertyNames));  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(propertyNames));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(propertyNames));	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
178	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  values().properties();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  values().properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  values().properties();	  Enumeration    <    String>    requiredOptions    =    property.properties();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
179	[BUG]  [BUGGY]  Properties  cmd  =  properties.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.nextElement().toString();  if(!cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
180	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyNames().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyNames().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.propertyNames().toString();  if(!cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
181	[BUG]  [BUGGY]  Properties  cmd  =  options.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.nextElement().toString();  if(!cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
182	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(option);  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(option);  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(option);  if(!cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
183	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	113	None	replace
184	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	113	None	replace
185	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(cmd);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyName(cmd);	  Enumeration    <    String>    cmd    =    properties.propertyName(value);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
186	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(option);  [CE]  cannot  find  symbol  option  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyName(option);	  Enumeration    <    String>    cmd    =    properties.propertyName(value);    	non-compiled	[CE]  cannot  find  symbol  option	108	None	replace
187	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(name);  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(name);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyName(name);	  Enumeration    <    String>    cmd    =    properties.propertyName(value);    	non-compiled	[CE]  cannot  find  symbol  name	108	None	replace
188	[BUG]  [BUGGY]  properties.add(properties);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  properties.add(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	properties.add(properties);	  tries.add(properties);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
189	[BUG]  [BUGGY]  Properties  properties  =  properties.get(properties);  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.get(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  properties.get(properties);	  tries.add(properties);    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	75	None	replace
190	[BUG]  [BUGGY]  Properties  properties  =  properties.clone();  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.clone();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  properties.clone();	  tries.add(properties);    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	75	None	replace
191	[BUG]  [BUGGY]  Properties  properties  =  properties.get(0);  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.get(0);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  properties.get(0);	  tries.add(properties);    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	75	None	replace
192	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Expected  properties  to  be  null.   ");  Throw  new  RuntimeException( "Expected  properties  to  be  null.   ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException(   "Expected  properties  to  be  null.   ");  Throw  new  RuntimeException( "Expected  properties  to  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Expected    properties    to    be    null.   ");    Throw  new  RuntimeException( "Expected  properties  to  be  null.   ");	  	non-compiled	[CE]  not  a  statement	142	None	add
193	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Expected  properties  to  be  null.   ");  throw  new  RuntimeException( "Expected  properties  to  be  null.   ");  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException(   "Expected  properties  to  be  null.   ");  throw  new  RuntimeException( "Expected  properties  to  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Expected    properties    to    be    null.   ");    throw  new  RuntimeException( "Expected  properties  to  be  null.   ");	  	non-compiled	[CE]  unreachable  statement	142	None	add
194	[BUG]  [BUGGY]  tries  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  tries  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	tries  ==  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }	  if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    	non-compiled	[CE]  not  a  statement	78	None	replace
195	[BUG]  [BUGGY]  Thread.currentThread().setContext(new  RuntimeException( "Properties  cannot  be  null. "));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().setContext(new  RuntimeException( "Properties  cannot  be  null. "));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().setContext(new  RuntimeException( "Properties  cannot  be  null. "));	  if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
196	[BUG]  [BUGGY]  Properties  properties  ==  null  ||  properties.properties  ==  null)  {  return;  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  ==  null  ||  properties.properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  ==  null  ||  properties.properties  ==  null)  {  return;  }	  parent    ==    null    ||    properties.properties    ==    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	141	None	replace
197	[BUG]  [BUGGY]  Property  props  ==  null  ||  properties.properties  ==  null)  {  return;  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  props  ==  null  ||  properties.properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  props  ==  null  ||  properties.properties  ==  null)  {  return;  }	  parent    ==    null    ||    properties.properties    ==    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	141	None	replace
198	[BUG]  [BUGGY]  parent  ==  null  ||  properties.properties!=  null)  {  return;  }  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  parent  ==  null  ||  properties.properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	parent  ==  null  ||  properties.properties!=  null)  {  return;  }	  parent    ==    null    ||    properties.properties    ==    null)    {    return;    }    	non-compiled	[CE]  not  a  statement	141	None	replace
199	[BUG]  [BUGGY]  Properties  cmd  =  options.getOption(option);  [CE]  cannot  find  symbol  option  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.getOption(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.getOption(option);	  Properties    cmd    =    cmd.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  option	46	None	replace
200	[BUG]  [BUGGY]  Properties  cmd  =  options.getOption(cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.getOption(cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.getOption(cmd);	  Properties    cmd    =    cmd.getOption(option);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	46	None	replace
201	[BUG]  [BUGGY]  Properties  cmd  =  properties.getOption(option);  [CE]  cannot  find  symbol  option  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getOption(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getOption(option);	  Properties    cmd    =    cmd.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  option	46	None	replace
202	[BUG]  [BUGGY]  Properties  cmd  =  cmd.getOption(value);  [CE]  cannot  find  symbol  value  [FE]                          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  cmd.getOption(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  cmd.getOption(value);	  Properties    cmd    =    cmd.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  value	46	None	replace
203	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(propertyNames);  [CE]  cannot  find  symbol  propertyNames  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(propertyNames);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(propertyNames);	  Properties    cmd    =    properties.get(properties);    	non-compiled	[CE]  cannot  find  symbol  propertyNames	103	None	replace
204	[BUG]  [BUGGY]  owner.handleMissingException( " ");  [CE]  cannot  find  symbol  owner  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  owner.handleMissingException( " ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	owner.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  owner	72	None	replace
205	[BUG]  [BUGGY]  Helfer.handleMissingException( " ");  [CE]  cannot  find  symbol  Helfer  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Helfer.handleMissingException( " ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Helfer.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  Helfer	72	None	replace
206	[BUG]  [BUGGY]  professionals.handleMissingException( " ");  [CE]  cannot  find  symbol  professionals  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  professionals.handleMissingException( " ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	professionals.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  professionals	72	None	replace
207	[BUG]  [BUGGY]  Property  cmd  =  properties.nextElement().toString();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  properties.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  properties.nextElement().toString();	  Property    cmd    =    cmd.nextElement().toString();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
208	[BUG]  [BUGGY]  Property  cmd  =  property.nextElement().toString();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  property.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  property.nextElement().toString();	  Property    cmd    =    cmd.nextElement().toString();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
209	[BUG]  [BUGGY]  Property  cmd  =  this.cmd.nextElement().toString();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  this.cmd.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  this.cmd.nextElement().toString();	  Property    cmd    =    cmd.nextElement().toString();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
210	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(properties.propertyNames()));  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(properties.propertyNames()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( " ".equals(properties.propertyNames()));	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
211	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "'. ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "'. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "'. ");	  Throwables.throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	58	None	replace
212	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + ",' ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + ",' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + ",' ");	  Throwables.throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	58	None	replace
213	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ",  requiredOptions);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ",  requiredOptions);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "' ",  requiredOptions);	  Throwables.throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	58	None	replace
214	[BUG]  [BUGGY]  if(properties!=  null  ||  properties.hasOption(option))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null  ||  properties.hasOption(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null  ||  properties.hasOption(option))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(option))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	114	None	replace
215	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  null! ");  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  null! ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Properties  are  null! ");	  Throwables.throw    new    IllegalArgumentException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
216	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	26	None	replace
217	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	26	None	replace
218	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(properties,  requiredOptions);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailure(properties,  requiredOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(properties,  requiredOptions);	  aughtExceptionHandler.handleFailure(properties,    value);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	110	None	replace
219	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(properties,  null);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailure(properties,  null);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(properties,  null);	  aughtExceptionHandler.handleFailure(properties,    value);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	110	None	replace
220	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(properties,  options);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailure(properties,  options);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(properties,  options);	  aughtExceptionHandler.handleFailure(properties,    value);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	110	None	replace
221	[BUG]  [BUGGY]  if(option  ==  null  ||  value.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null  ||  value.length()  ==  0)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null  ||  value.length()  ==  0)  {	  if(option    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
222	[BUG]  [BUGGY]  if(option  ==  null  ||  option.equals(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null  ||  option.equals(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null  ||  option.equals(value))  {	  if(option    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
223	[BUG]  [BUGGY]  Properties  cmd  =  this.properties.getPropertyValue(properties);  [CE]  cannot  find  symbol  properties  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  this.properties.getPropertyValue(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  this.properties.getPropertyValue(properties);	  Properties    cmd    =    properties.getPropertyValue(properties);    	non-compiled	[CE]  cannot  find  symbol  properties	92	None	replace
224	[BUG]  [BUGGY]  Properties  cmd  =  property.getPropertyValue(properties);  [CE]  cannot  find  symbol  property  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  property.getPropertyValue(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  property.getPropertyValue(properties);	  Properties    cmd    =    properties.getPropertyValue(properties);    	non-compiled	[CE]  cannot  find  symbol  property	92	None	replace
225	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(key);  [CE]  cannot  find  symbol  key  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(key);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(key);	  Properties    cmd    =    properties.getProperty(propertyName);    	non-compiled	[CE]  cannot  find  symbol  key	22	None	replace
226	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(propertyValue);  [CE]  cannot  find  symbol  propertyValue  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(propertyValue);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(propertyValue);	  Properties    cmd    =    properties.getProperty(propertyName);    	non-compiled	[CE]  cannot  find  symbol  propertyValue	22	None	replace
227	[BUG]  [BUGGY]  Property(properties  ==  null)  {  return;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property(properties  ==  null)  {  return;  }	          if(properties    ==    null)    {    return;    }    Property(properties    ==    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
228	[BUG]  [BUGGY]  ||(properties!=  null  &&  properties.propertyNames().size()  >  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||(properties!=  null  &&  properties.propertyNames().size()  >  0))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	||(properties!=  null  &&  properties.propertyNames().size()  >  0))  {	          if(properties    ==    null)    {    return;    }    Property(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
229	[BUG]  [BUGGY]  ||(properties!=  null  &&  properties.getPropertyNames().size()  >  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||(properties!=  null  &&  properties.getPropertyNames().size()  >  0))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	||(properties!=  null  &&  properties.getPropertyNames().size()  >  0))  {	          if(properties    ==    null)    {    return;    }    Property(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
230	[BUG]  [BUGGY]  ||(properties  ==  null  &&  properties.getPropertyNames().size()  >  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||(properties  ==  null  &&  properties.getPropertyNames().size()  >  0))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	||(properties  ==  null  &&  properties.getPropertyNames().size()  >  0))  {	          if(properties    ==    null)    {    return;    }    Property(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
231	[BUG]  [BUGGY]  artisans.handleFailure(properties);  [CE]  cannot  find  symbol  artisans  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  artisans.handleFailure(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	artisans.handleFailure(properties);	  aughtExceptionHandler.handleFailure(properties);    	non-compiled	[CE]  cannot  find  symbol  artisans	73	None	replace
232	[BUG]  [BUGGY]  PropertyHandler.handleFailure(properties);  [CE]  cannot  find  symbol  PropertyHandler  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  PropertyHandler.handleFailure(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	PropertyHandler.handleFailure(properties);	  aughtExceptionHandler.handleFailure(properties);    	non-compiled	[CE]  cannot  find  symbol  PropertyHandler	73	None	replace
233	[BUG]  [BUGGY]  owner.handleFailure(properties);  [CE]  cannot  find  symbol  owner  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  owner.handleFailure(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	owner.handleFailure(properties);	  aughtExceptionHandler.handleFailure(properties);    	non-compiled	[CE]  cannot  find  symbol  owner	73	None	replace
234	[BUG]  [BUGGY]  professionals.handleFailure(properties);  [CE]  cannot  find  symbol  professionals  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  professionals.handleFailure(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	professionals.handleFailure(properties);	  aughtExceptionHandler.handleFailure(properties);    	non-compiled	[CE]  cannot  find  symbol  professionals	73	None	replace
235	[BUG]  [BUGGY]  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(!cmd.hasOption(option))  {	  if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
236	[BUG]  [BUGGY]  if(option.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option.hasOption(option))  {	  if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
237	[BUG]  [BUGGY]  if(properties.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties.hasOption(option))  {	  if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
238	[BUG]  [BUGGY]  if(opt.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt.hasOption(option))  {	  if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
239	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty( "cmd ",  value);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty( "cmd ",  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty( "cmd ",  value);	  Properties    cmd    =    properties.getProperty(   "cmd   ");    	non-compiled	[CE]  cannot  find  symbol  value	14	None	replace
240	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty( "cmd ",  null);  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty( "cmd ",  null);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty( "cmd ",  null);	  Properties    cmd    =    properties.getProperty(   "cmd   ");    	non-compiled	[CE]  incompatible  types	14	None	replace
241	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty( "properties ");  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty( "properties ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty( "properties ");	  Properties    cmd    =    properties.getProperty(   "cmd   ");    	non-compiled	[CE]  incompatible  types	14	None	replace
242	[BUG]  [BUGGY]  properties.add(cmd);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  properties.add(cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	properties.add(cmd);	  tries.add(cmd);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
243	[BUG]  [BUGGY]  Properties  properties  =  properties.get(cmd);  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.get(cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  properties.get(cmd);	  tries.add(cmd);    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	136	None	replace
244	[BUG]  [BUGGY]  Properties  properties  =  cmd.getProperties();  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  cmd.getProperties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  cmd.getProperties();	  tries.add(cmd);    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	136	None	replace
245	[BUG]  [BUGGY]  List  requiredOptions  =  properties.get(cmd);  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  requiredOptions  =  properties.get(cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	List  requiredOptions  =  properties.get(cmd);	  tries.add(cmd);    	non-compiled	[CE]  incompatible  types	136	None	replace
246	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames());  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
247	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  properties.propertyNames());  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  properties.propertyNames());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
248	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames()));  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames()));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
249	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	140	None	replace
250	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  }	  throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    	compilable	  [FE]  IllegalArgumentException  	140	2	replace
251	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  }	  throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    	compilable	  [FE]  IllegalArgumentException  	140	2	replace
252	[BUG]  [BUGGY]  For(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	For(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }	          if(properties!=    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
253	[BUG]  [BUGGY]  For(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.remove(cmd);  }  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.remove(cmd);  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	For(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.remove(cmd);  }	          if(properties!=    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
254	[BUG]  [BUGGY]  For(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	For(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);	          if(properties!=    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
255	[BUG]  [BUGGY]  For(Enumeration  cmd  :  properties.propertyNames())  {  neededOptions.add(cmd);  }  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  cmd  :  properties.propertyNames())  {  neededOptions.add(cmd);  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	For(Enumeration  cmd  :  properties.propertyNames())  {  neededOptions.add(cmd);  }	          if(properties!=    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  ')'  expected	57	None	replace
256	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  cannot  be  null.. ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  cannot  be  null.. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  cannot  be  null.. ");	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    Throw    new    RuntimeException(   "Properties    cannot    be    null.       ");    	non-compiled	[CE]  not  a  statement	17	None	replace
257	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
258	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
259	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
260	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
261	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
262	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
263	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [CE]  cannot  find  symbol  propertyNames  [FE]          ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(propertyNames  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  propertyNames	64	None	add
264	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
265	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
266	[BUG]  [BUGGY]  Thread.currentThread().setContextClassIndex(properties.values().iterator().next());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassIndex(properties.values().iterator().next());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().setContextClassIndex(properties.values().iterator().next());	          if(properties    ==    null)    {    return;    }    if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
267	[BUG]  [BUGGY]  Thread.currentThread().setContextClassIndex(properties.getClass().getName());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassIndex(properties.getClass().getName());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().setContextClassIndex(properties.getClass().getName());	          if(properties    ==    null)    {    return;    }    if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
268	[BUG]  [BUGGY]  Thread.currentThread().setContextClassIndex(properties.values().iterator().next().toString());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassIndex(properties.values().iterator().next().toString());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().setContextClassIndex(properties.values().iterator().next().toString());	          if(properties    ==    null)    {    return;    }    if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
269	[BUG]  [BUGGY]  Properties  properties  =  properties.getPropertyNames();  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.getPropertyNames();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  properties.getPropertyNames();	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	53	None	replace
270	[BUG]  [BUGGY]  Properties  properties  =  properties.getProperties();  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.getProperties();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  properties.getProperties();	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	53	None	replace
271	[BUG]  [BUGGY]  Property  prop  =  properties.property(value);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  prop  =  properties.property(value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  prop  =  properties.property(value);	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
272	[BUG]  [BUGGY]  Property  prop  =  properties.getProperty(value);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  prop  =  properties.getProperty(value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  prop  =  properties.getProperty(value);	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
273	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
274	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
275	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
276	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
277	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
278	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
279	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
280	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.isEmpty())  {  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
281	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties!=  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties!=  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
282	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties!=  null  ||  properties.isEmpty())  {  return;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties!=  null  ||  properties.isEmpty())  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties!=  null  ||  properties.isEmpty())  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
283	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  Throw  new  IllegalStateException( "Properties  must  not  be  null.   ");  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  Throw  new  IllegalStateException( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    Throw  new  IllegalStateException( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  not  a  statement	153	None	add
284	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  throw  new  IllegalStateException( "Properties  must  not  be  null.   ");  [CE]  unreachable  statement  [FE]      IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  throw  new  IllegalStateException( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    throw  new  IllegalStateException( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  unreachable  statement	153	None	add
285	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  Throwables.throw  new  IllegalStateException( "Properties  must  not  be  null.   ");  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  Throwables.throw  new  IllegalStateException( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    Throwables.throw  new  IllegalStateException( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  <identifier>  expected	153	None	add
286	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  IllegalStateException( "Properties  must  not  be  null.   ");  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  IllegalStateException( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    IllegalStateException( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  cannot  find  symbol	153	None	add
287	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
288	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value)  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value)  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value)	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  ')'  expected	100	None	replace
289	[BUG]  [BUGGY]  If(properties!=  null)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  If(properties!=  null)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	If(properties!=  null)  {  return;  }  if(propertyNames  ==  null)  {  return;  }	          if(properties    ==    null)    {    return;    }    if(propertyMap    ==    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
290	[BUG]  [BUGGY]  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  e.nextElement().toString();  if(value.equals(value))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  value  =  e.nextElement().toString();  if(value.equals(value))  {	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
291	[BUG]  [BUGGY]  Property  value  =  e.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  e.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  value  =  e.nextElement().toString();  if(!cmd.hasOption(option))  {	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
292	[BUG]  [BUGGY]  Property  value  =  e.nextElement().toString();  if(value.equals(value)&&!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  e.nextElement().toString();  if(value.equals(value)&&!cmd.hasOption(option))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  value  =  e.nextElement().toString();  if(value.equals(value)&&!cmd.hasOption(option))  {	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
293	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(propertyNames));  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(propertyNames));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( " ".equals(propertyNames));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
294	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( " "));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
295	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties.values(),  value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(properties.values(),  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties.values(),  value);	  Properties    cmd    =    properties.getProperty(properties.values());    	non-compiled	[CE]  cannot  find  symbol  value	24	None	replace
296	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties.values(),  values);  [CE]  cannot  find  symbol  values  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(properties.values(),  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties.values(),  values);	  Properties    cmd    =    properties.getProperty(properties.values());    	non-compiled	[CE]  cannot  find  symbol  values	24	None	replace
297	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(value,  properties.values());  [CE]  cannot  find  symbol  value  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(value,  properties.values());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(value,  properties.values());	  Properties    cmd    =    properties.getProperty(properties.values());    	non-compiled	[CE]  cannot  find  symbol  value	24	None	replace
298	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames().iterator();	  Enumeration    <    String>    cmd    =    properties.propertyNames().iterator().next();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
299	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator(),  properties.next();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator(),  properties.next();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames().iterator(),  properties.next();	  Enumeration    <    String>    cmd    =    properties.propertyNames().iterator().next();    	non-compiled	[CE]  ';'  expected	1	None	replace
300	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator(),  property.next();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator(),  property.next();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames().iterator(),  property.next();	  Enumeration    <    String>    cmd    =    properties.propertyNames().iterator().next();    	non-compiled	[CE]  ';'  expected	1	None	replace
301	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.properties.keySet();  [CE]  cannot  find  symbol  properties  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.properties.keySet();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties.properties.keySet();	  Enumeration    <    String>    requiredOptions    =    properties.keySet();    	non-compiled	[CE]  cannot  find  symbol  properties	16	None	replace
302	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  Throw  new  IllegalStateException( "Properties  cannot  be  null.   ");  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  Throw  new  IllegalStateException( "Properties  cannot  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    Throw  new  IllegalStateException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  not  a  statement	51	None	add
303	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  IllegalStateException( "Properties  cannot  be  null.   ");  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  IllegalStateException( "Properties  cannot  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    IllegalStateException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  cannot  find  symbol	51	None	add
304	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  Throwables.throw  new  IllegalStateException( "Properties  cannot  be  null.   ");  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  Throwables.throw  new  IllegalStateException( "Properties  cannot  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    Throwables.throw  new  IllegalStateException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  <identifier>  expected	51	None	add
305	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  throw  new  IllegalStateException( "Properties  cannot  be  null.   ");  [CE]  unreachable  statement  [FE]          IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  throw  new  IllegalStateException( "Properties  cannot  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    throw  new  IllegalStateException( "Properties  cannot  be  null.   ");	  	non-compiled	[CE]  unreachable  statement	51	None	add
306	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames()  [0];  [CE]  array  required,  but  Enumeration<CAP#1>  found  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames()  [0];  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames()  [0];	  Enumeration    <    String>    cmd    =    properties.propertyNames()    +    1;    	non-compiled	[CE]  array  required,  but  Enumeration<CAP#1>  found	3	None	replace
307	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames()  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames()  /  1;  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames()  /  1;	  Enumeration    <    String>    cmd    =    properties.propertyNames()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	3	None	replace
308	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.values().iterator().next();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.values().iterator().next();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.values().iterator().next();	  Enumeration    <    String>    cmd    =    properties.values();    	non-compiled	[CE]  incompatible  types	107	None	replace
309	[BUG]  [BUGGY]  if(option!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
310	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    properties.propertyName    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	59	None	replace
311	[BUG]  [BUGGY]  Throwables.warning( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [CE]  cannot  find  symbol  propertyName  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.warning( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.warning( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    properties.propertyName    +   "'   ");    	non-compiled	[CE]  cannot  find  symbol  propertyName	59	None	replace
312	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "'. ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "'. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "'. ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    properties.propertyName    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	59	None	replace
313	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties,  value);  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(properties,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties,  value);	  Properties    cmd    =    properties.getProperty(properties);    	non-compiled	[CE]  cannot  find  symbol  value	23	None	replace
314	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties,  values);  [CE]  cannot  find  symbol  values  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(properties,  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties,  values);	  Properties    cmd    =    properties.getProperty(properties);    	non-compiled	[CE]  cannot  find  symbol  values	23	None	replace
315	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.requires();  [CE]  cannot  find  symbol  props  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.requires();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  props.requires();	  Enumeration    <    String>    requiredOptions    =    properties.requires();    	non-compiled	[CE]  cannot  find  symbol  props	121	None	replace
316	[BUG]  [BUGGY]  Properties  cmd  =  this.properties.properties();  [CE]  cannot  find  symbol  properties  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  this.properties.properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  this.properties.properties();	  Properties    cmd    =    properties.properties();    	non-compiled	[CE]  cannot  find  symbol  properties	13	None	replace
317	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyChanges();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyChanges();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.propertyChanges();	  Properties    cmd    =    properties.properties();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
318	[BUG]  [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.size());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.size());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	List  requiredOptions  =  new  ArrayList(properties.size());	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
319	[BUG]  [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.values());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.values());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	List  requiredOptions  =  new  ArrayList(properties.values());	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
320	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option))  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    c.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
321	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option)  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option)  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option)	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    c.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  ')'  expected	56	None	replace
322	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(cmd.hasOption(option))  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    c.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
323	[BUG]  [BUGGY]  Context.checkState(options.hasOption(option));  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Context.checkState(options.hasOption(option));  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(options.hasOption(option));	  Context.checkState(cmd.hasOption(option));    	non-compiled	[CE]  cannot  find  symbol  option	125	None	replace
324	[BUG]  [BUGGY]  Context.checkState(properties.hasOption(option));  [CE]  cannot  find  symbol  option  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Context.checkState(properties.hasOption(option));  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(properties.hasOption(option));	  Context.checkState(cmd.hasOption(option));    	non-compiled	[CE]  cannot  find  symbol  option	125	None	replace
325	[BUG]  [BUGGY]  Properties  cmd  =  _properties.getPropertyNames();  [CE]  cannot  find  symbol  _properties  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  _properties.getPropertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  _properties.getPropertyNames();	  Properties    cmd    =    this.properties.getPropertyNames();    	non-compiled	[CE]  cannot  find  symbol  _properties	31	None	replace
326	[BUG]  [BUGGY]  Properties  cmd  =  this.properties.getPropertyFactory();  [CE]  cannot  find  symbol  properties  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  this.properties.getPropertyFactory();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  this.properties.getPropertyFactory();	  Properties    cmd    =    this.properties.getPropertyNames();    	non-compiled	[CE]  cannot  find  symbol  properties	31	None	replace
327	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
328	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Properties  are  null. ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( "Properties  are  null. ");	  Throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
329	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  are  null. "  + "properties  are  null. ");  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  are  null. "  + "properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  are  null. "  + "properties  are  null. ");	  Throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
330	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	11	None	replace
331	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	11	None	replace
332	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  cmd  =  properties.propertyNames();  cmd.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  cmd  =  properties.propertyNames();  cmd.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  cmd  =  properties.propertyNames();  cmd.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option)	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	11	None	replace
333	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "' ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  property  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    property    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	119	None	replace
334	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(value));  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(value));	  throw    new    IllegalArgumentException(   "   ".equals(value));    	non-compiled	[CE]  <identifier>  expected	116	None	replace
335	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  value.equals(value));  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  value.equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  value.equals(value));	  throw    new    IllegalArgumentException(   "   ".equals(value));    	non-compiled	[CE]  <identifier>  expected	116	None	replace
336	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  value.equals(value));  [CE]  cannot  find  symbol  value  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  value.equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( " "  +  value.equals(value));	  throw    new    IllegalArgumentException(   "   ".equals(value));    	non-compiled	[CE]  cannot  find  symbol  value	116	None	replace
337	[BUG]  [BUGGY]  PropertyFailure  {  throw  new  RuntimeException( "Properties  are  null. ");  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  PropertyFailure  {  throw  new  RuntimeException( "Properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	PropertyFailure  {  throw  new  RuntimeException( "Properties  are  null. ");	  throw    new    RuntimeException(       "Properties    are    null.       ");    PropertyFailure    {    throw    new    RuntimeException(   "Properties    are    null.       ");    	non-compiled	[CE]  not  a  statement	38	None	replace
338	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  properties  to  be  null. ");  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  properties  to  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Expected  properties  to  be  null. ");	  throw    new    RuntimeException(   "Expected    properties    to    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	143	None	replace
339	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Expected  properties  to  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalArgumentException( "Expected  properties  to  be  null. ");	  throw    new    RuntimeException(   "Expected    properties    to    be    null.   ");    	compilable	  [FE]  IllegalArgumentException  	143	2	replace
340	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Expected  properties  to  be  null. ");  [FE]  IllegalArgumentException  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Expected  properties  to  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Expected  properties  to  be  null. ");	  throw    new    RuntimeException(   "Expected    properties    to    be    null.   ");    	compilable	  [FE]  IllegalArgumentException  	143	2	replace
341	[BUG]  [BUGGY]  Properties  cmd  =  property.getPropertyFactory();  [CE]  cannot  find  symbol  property  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  property.getPropertyFactory();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  property.getPropertyFactory();	  Properties    cmd    =    properties.getPropertyFactory();    	non-compiled	[CE]  cannot  find  symbol  property	112	None	replace
342	[BUG]  [BUGGY]  throw  new  RuntimeException( "Properties  are  null. ");  if(properties!=  null)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Properties  are  null. ");  if(properties!=  null)  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Properties  are  null. ");  if(properties!=  null)  {	  throw    new    RuntimeException(       "Properties    are    null.       ");    if(properties    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
343	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null. ");  if(properties!=  null)  {  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null. ");  if(properties!=  null)  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  are  null. ");  if(properties!=  null)  {	  throw    new    RuntimeException(       "Properties    are    null.       ");    if(properties    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
344	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
345	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
346	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
347	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
348	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
349	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
350	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [CE]  cannot  find  symbol  propertyNames  [FE]          ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(propertyNames  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  propertyNames	62	None	add
351	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
352	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
353	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(!cmd.hasOption(option))  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    c.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
354	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(!cmd.hasOption(option)  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(!cmd.hasOption(option)  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString();  if(!cmd.hasOption(option)	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    c.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  ')'  expected	55	None	replace
355	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(option);  if(option!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  c.nextElement().toString	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    c.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
356	[BUG]  [BUGGY]  if(option!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option))  {	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
357	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalStateException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  not  a  statement	4	None	replace
358	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalStateException( "Properties  cannot  be  null. ");	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  not  a  statement	4	None	replace
359	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(value);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  value	98	None	replace
360	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(option,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(option,  value);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  value	98	None	replace
361	[BUG]  [BUGGY]  Option  option  =  options.getOption(value,  option);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(value,  option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(value,  option);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  value	98	None	replace
362	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(cmd);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	98	None	replace
363	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  Throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  Throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    Throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  not  a  statement	139	None	add
364	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  Throwables.throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  Throwables.throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    Throwables.throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  <identifier>  expected	139	None	add
365	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  IllegalArgumentException( "Properties  must  not  be  null.   ");  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  IllegalArgumentException( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    IllegalArgumentException( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  cannot  find  symbol	139	None	add
366	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  Throwables.warning( "Properties  must  not  be  null.   ");  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  Throwables.warning( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    Throwables.warning( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	139	None	add
367	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  Throwables.log( "Properties  must  not  be  null.   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  Throwables.log( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    Throwables.log( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	139	None	add
368	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.requiredOptions();  [CE]  cannot  find  symbol  props  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.requiredOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  props.requiredOptions();	  Enumeration    <    String>    requiredOptions    =    properties.requiredOptions();    	non-compiled	[CE]  cannot  find  symbol  props	15	None	replace
369	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());	  Throw    new    RuntimeException(   "   ")+   "    cannot    access    properties:   "    +    properties.propertyNames();    	non-compiled	[CE]  not  a  statement	118	None	replace
370	[BUG]  [BUGGY]  Enumeration  <  Property>  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  Property>  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  Property>  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {	  Enumeration    <    Property>    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
371	[BUG]  [BUGGY]  Enumeration  <  Property>  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  Property>  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  Property>  cmd  =  properties.getOption(option);  if(cmd.hasOption(value))  {	  Enumeration    <    Property>    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
372	[BUG]  [BUGGY]  Enumeration  <  Property>  cmd  =  properties.get(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  Property>  cmd  =  properties.get(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  Property>  cmd  =  properties.get(option);  if(cmd.hasOption(value))  {	  Enumeration    <    Property>    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
373	[BUG]  [BUGGY]  Enumeration  <  Property>  cmd  =  properties.propertyNames();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  Property>  cmd  =  properties.propertyNames();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  Property>  cmd  =  properties.propertyNames();  if(cmd.hasOption(option))  {	  Enumeration    <    Property>    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
374	[BUG]  [BUGGY]  Properties  cmd  =  _properties.getProperties();  [CE]  cannot  find  symbol  _properties  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  _properties.getProperties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  _properties.getProperties();	  Properties    cmd    =    this.properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol  _properties	12	None	replace
375	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(value,  cmd);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(value,  cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleOption(value,  cmd);	  aughtExceptionHandler.handleOption(option,    cmd);    	non-compiled	[CE]  cannot  find  symbol  value	123	None	replace
376	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(cmd,  option);  [CE]  cannot  find  symbol  option  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(cmd,  option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleOption(cmd,  option);	  aughtExceptionHandler.handleOption(option,    cmd);    	non-compiled	[CE]  cannot  find  symbol  option	123	None	replace
377	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(option,  value);  [CE]  cannot  find  symbol  option  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(option,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleOption(option,  value);	  aughtExceptionHandler.handleOption(option,    cmd);    	non-compiled	[CE]  cannot  find  symbol  option	123	None	replace
378	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyCmd();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyCmd();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.propertyCmd();	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
379	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyChildren();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyChildren();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.propertyChildren();	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
380	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyNames(),  null;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyNames(),  null;  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.propertyNames(),  null;	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
381	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreElement(value);  [CE]  cannot  find  symbol  value  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMoreElement(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleMoreElement(value);	          if(properties    ==    null)    {    return;    }    if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	63	None	replace
382	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreElements(value);  [CE]  cannot  find  symbol  value  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMoreElements(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleMoreElements(value);	          if(properties    ==    null)    {    return;    }    if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	63	None	replace
383	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(value));  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( " ".equals(value));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
384	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	new  IllegalStateException( "Properties  cannot  be  null. ");	  throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  NullPointerException  	52	2	replace
385	[BUG]  [BUGGY]  new  IllegalStateException( "Properties  cannot  be  null. ");  [FE]  NullPointerException  [FE]    IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	new  IllegalStateException( "Properties  cannot  be  null. ");	  throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    	compilable	  [FE]  NullPointerException  	52	2	replace
386	[BUG]  [BUGGY]  Throw  new  RuntimeException( " ".equals(value));  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( " ".equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( " ".equals(value));	  throw    new    RuntimeException(       "       ");    Throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  not  a  statement	47	None	replace
387	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Expected  properties: "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalArgumentException( "Expected  properties: "  +  properties.propertyNames());	  throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	compilable	  [FE]  NullPointerException  	83	2	replace
388	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Expected  properties: "  +  properties.propertyNames());  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Expected  properties: "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Expected  properties: "  +  properties.propertyNames());	  throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	compilable	  [FE]  NullPointerException  	83	2	replace
389	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(value));  [CE]  cannot  find  symbol  value  [FE]        IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( " ".equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	new  IllegalStateException( " ".equals(value));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  value	138	None	replace
390	[BUG]  [BUGGY]  new  IllegalStateException( " ".equalsIgnoreCase(value));  [CE]  cannot  find  symbol  value  [FE]          IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( " ".equalsIgnoreCase(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	new  IllegalStateException( " ".equalsIgnoreCase(value));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  value	138	None	replace
391	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  RuntimeException( "Properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	Throwable  cause  =  new  RuntimeException( "Properties  are  null. ");	  throw    new    RuntimeException(       "Properties    are    null.       ");    throw    new    RuntimeException(   "Properties    are    null.       ");    	compilable	  [FE]  NullPointerException  	37	2	replace
392	[BUG]  [BUGGY]  Throwable  cause  =  new  RuntimeException( "Properties  are  null. ");  [FE]  NullPointerException  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  RuntimeException( "Properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwable  cause  =  new  RuntimeException( "Properties  are  null. ");	  throw    new    RuntimeException(       "Properties    are    null.       ");    throw    new    RuntimeException(   "Properties    are    null.       ");    	compilable	  [FE]  NullPointerException  	37	2	replace
393	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
394	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
395	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(value  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(value  ==  null)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(value  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
396	[BUG]  [BUGGY]  Enumeration  <  String>  e  =  cmd.getOptions();  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  e  =  cmd.getOptions();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  e  =  cmd.getOptions();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  incompatible  types	133	None	replace
397	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  cmd.getOptions();  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  cmd.getOptions();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  cmd.getOptions();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  incompatible  types	133	None	replace
398	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  cmd.getOption(option);  [CE]  cannot  find  symbol  option  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  cmd.getOption(option);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  cmd.getOption(option);	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  cannot  find  symbol  option	133	None	replace
399	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  cannot  be  null.   ");  }  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  cannot  be  null.   ");  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  cannot  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    cannot    be    null.   ");    if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  cannot  be  null.   ");  }	  	non-compiled	[CE]  unreachable  statement	51	None	add
400	[BUG]  [BUGGY]  if(option  ==  null  ||  value.equals(option))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null  ||  value.equals(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null  ||  value.equals(option))  {	  if(option    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
401	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	11	None	replace
402	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option)    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
403	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [CE]  cannot  find  symbol  propertyNames  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(propertyNames  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(propertyNames  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  propertyNames	148	None	add
404	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
405	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");	  	non-compiled	[CE]  unreachable  statement	139	None	add
406	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(propertyNames,  value);  [CE]  cannot  find  symbol  propertyNames  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailure(propertyNames,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(propertyNames,  value);	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.size()    ==    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  propertyNames	149	None	replace
407	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
408	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  ')'  expected	54	None	replace
409	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
410	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  ')'  expected	54	None	replace
411	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ".equals(value));  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalStateException( " ".equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalStateException( " ".equals(value));	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  not  a  statement	4	None	replace
412	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ".equalsIgnoreCase(value));  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalStateException( " ".equalsIgnoreCase(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalStateException( " ".equalsIgnoreCase(value));	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  not  a  statement	4	None	replace
413	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(value  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(value  ==  null)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(value  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
414	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
415	[BUG]  [BUGGY]  String  value  =  properties.getValue(value);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  String  value  =  properties.getValue(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	String  value  =  properties.getValue(value);	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
416	[BUG]  [BUGGY]  String  value  =  properties.getStringValue(value);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  String  value  =  properties.getStringValue(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	String  value  =  properties.getStringValue(value);	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
417	[BUG]  [BUGGY]  Properties  cmd  =  properties.getOption(value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getOption(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getOption(value);	  [Delete]    	non-compiled	[CE]  cannot  find  symbol  value	74	None	replace
418	[BUG]  [BUGGY]  Properties  cmd  =  properties.getOptions();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getOptions();	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
419	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ".equals(value));  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( " ".equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( " ".equals(value));	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	26	None	replace
420	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ".equals(properties.values()));  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( " ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( " ".equals(properties.values()));	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	26	None	replace
421	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  are  null. ".equals(properties.values()));  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  are  null. ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  are  null. ".equals(properties.values()));	  throw    new    RuntimeException(   "Properties    are    null   ".equals(properties.values()));    	non-compiled	[CE]  not  a  statement	155	None	replace
422	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Properties  are  null. "  +  properties.values());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  RuntimeException( "Properties  are  null. "  +  properties.values());	  throw    new    RuntimeException(   "Properties    are    null   ".equals(properties.values()));    	compilable	  [FE]  NullPointerException  	155	2	replace
423	[BUG]  [BUGGY]  throw  new  RuntimeException( "Properties  are  null. "  +  properties.values());  [FE]  NullPointerException  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Properties  are  null. "  +  properties.values());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Properties  are  null. "  +  properties.values());	  throw    new    RuntimeException(   "Properties    are    null   ".equals(properties.values()));    	compilable	  [FE]  NullPointerException  	155	2	replace
424	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
425	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOpti  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOpti  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOpti	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
426	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
427	[BUG]  [BUGGY]  Properties  option  =  options.getOption(option);  if(option.hasOption(value))  {  return;  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  option  =  options.getOption(option);  if(option.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  option  =  options.getOption(option);  if(option.hasOption(value))  {  return;  }	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	44	None	replace
428	[BUG]  [BUGGY]  Properties  option  =  cmd.getOption(option);  if(option.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  option  =  cmd.getOption(option);  if(option.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  option  =  cmd.getOption(option);  if(option.hasOption(value))  {  return;  }	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
429	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(opt,  cmd);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(opt,  cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleOption(opt,  cmd);	  aughtExceptionHandler.handleOption(option,    cmd);    	non-compiled	[CE]  cannot  find  symbol  opt	123	None	replace
430	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null. "  + "properties  are  null. ");  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  null. "  + "properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  are  null. "  + "properties  are  null. ");	  Throwables.throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
431	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  not  supported. ");  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  are  not  supported. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  are  not  supported. ");	  Throwables.throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
432	[BUG]  [BUGGY]  if(options  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options  ==  null)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options  ==  null)  {	  if(cmd    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
433	[BUG]  [BUGGY]  Properties  cmd  =  options.get(option);  [CE]  cannot  find  symbol  option  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.get(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.get(option);	  Properties    cmd    =    properties.get(option);    	non-compiled	[CE]  cannot  find  symbol  option	102	None	replace
434	[BUG]  [BUGGY]  Parent  <  null  ||  properties.properties  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Parent  <  null  ||  properties.properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Parent  <  null  ||  properties.properties  ==  null)  {  return;  }	  parent    ==    null    ||    properties.properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
435	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ",  exp);  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ",  exp);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ",  exp);	  Throwables.throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
436	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  are  null ".   ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  are  null ".   ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  are  null ".   ");	  Throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
437	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  are  null! ");  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  are  null! ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  are  null! ");	  Throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
438	[BUG]  [BUGGY]  if(properties!=  null)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties!=  null)  {	  throw    new    RuntimeException(       "Properties    are    null.       ");    if(properties    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
439	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Could  not  support  property  ' "  +  value  + "' ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Could  not  support  property  ' "  +  value  + "' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Could  not  support  property  ' "  +  value  + "' ");	  Throwables.throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	58	None	replace
440	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "'  on  the  same  line. ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "'  on  the  same  line. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  value  + "'  on  the  same  line. ");	  Throwables.throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    value    +   "'   ");    	non-compiled	[CE]  <identifier>  expected	58	None	replace
441	[BUG]  [BUGGY]  Context.checkState(cmd.hasOption(properties));  [CE]  no  suitable  method  found  for  hasOption(Properties)  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Context.checkState(cmd.hasOption(properties));  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(cmd.hasOption(properties));	  Context.checkState(cmd.hasOption(value));    	non-compiled	[CE]  no  suitable  method  found  for  hasOption(Properties)	128	None	replace
442	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties._properties();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties._properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties._properties();	  Enumeration    <    String>    requiredOptions    =    _properties.properties();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
443	[BUG]  [BUGGY]  homeowners.handleFailure(properties);  [CE]  cannot  find  symbol  homeowners  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  homeowners.handleFailure(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	homeowners.handleFailure(properties);	  aughtExceptionHandler.handleFailure(properties);    	non-compiled	[CE]  cannot  find  symbol  homeowners	73	None	replace
444	[BUG]  [BUGGY]  NullPointerException.for(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  NullPointerException.for(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	NullPointerException.for(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }	          if(properties!=    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
445	[BUG]  [BUGGY]  safeMultiply(properties.values())  {  for(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  safeMultiply(properties.values())  {  for(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	safeMultiply(properties.values())  {  for(Enumeration  cmd  :  properties.propertyNames())  {  requiredOptions.add(cmd);  }	          if(properties!=    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
446	[BUG]  [BUGGY]  NullPointerException.for(Enumeration  e  :  properties.propertyNames())  {  requiredOptions.add(e);  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  NullPointerException.for(Enumeration  e  :  properties.propertyNames())  {  requiredOptions.add(e);  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	NullPointerException.for(Enumeration  e  :  properties.propertyNames())  {  requiredOptions.add(e);  }	          if(properties!=    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
447	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Property  does  not  support  property  ' "  +  property  + "' ");  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Property  does  not  support  property  ' "  +  property  + "' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( "Property  does  not  support  property  ' "  +  property  + "' ");	  Throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    property    +   "'   ");    	non-compiled	[CE]  not  a  statement	145	None	replace
448	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasArg(value))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasArg(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);  if(cmd.hasArg(value))  {	  Option    cmd    =    options.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
449	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasProperty(value))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd.hasProperty(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);  if(cmd.hasProperty(value))  {	  Option    cmd    =    options.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
450	[BUG]  [BUGGY]  Enumeration  <  String>  e  =  cmd.nextElement().toString();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  e  =  cmd.nextElement().toString();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  e  =  cmd.nextElement().toString();	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
451	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  options.getOption(option);  [CE]  cannot  find  symbol  option  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  options.getOption(option);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  options.getOption(option);	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	113	None	replace
452	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  cannot  be  null.  If  not  a  statement, ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  cannot  be  null.  If  not  a  statement, ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  cannot  be  null.  If  not  a  statement, ");	  Throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	111	None	replace
453	[BUG]  [BUGGY]  Throwables.throwException( " ".equals(properties.propertyNames()));  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throwException( " ".equals(properties.propertyNames()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throwException( " ".equals(properties.propertyNames()));	  throw    new    IllegalStateException(       "       ");    Throwables.throwException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	replace
454	[BUG]  [BUGGY]  Throwables.throwException( " ".equals(value));  [CE]  cannot  find  symbol  value  [FE]                IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throwException( " ".equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throwException( " ".equals(value));	  throw    new    IllegalStateException(       "       ");    Throwables.throwException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  value	7	None	replace
455	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Expected  properties  to  be  null. ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Expected  properties  to  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Expected  properties  to  be  null. ");	  throw    new    RuntimeException(   "Expected    properties    to    be    null.   ");    	non-compiled	[CE]  not  a  statement	143	None	replace
456	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Expected  properties  to  be  null. "  + "properties  to  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  RuntimeException( "Expected  properties  to  be  null. "  + "properties  to  be  null. ");	  throw    new    RuntimeException(   "Expected    properties    to    be    null.   ");    	compilable	  [FE]  RuntimeException  	143	2	replace
457	[BUG]  [BUGGY]  throw  new  RuntimeException( "Expected  properties  to  be  null. "  + "properties  to  be  null. ");  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Expected  properties  to  be  null. "  + "properties  to  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Expected  properties  to  be  null. "  + "properties  to  be  null. ");	  throw    new    RuntimeException(   "Expected    properties    to    be    null.   ");    	compilable	  [FE]  RuntimeException  	143	2	replace
458	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.getOptions();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.getOptions();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.getOptions();	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    c.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
459	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.getOption(option);  [CE]  cannot  find  symbol  option  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.getOption(option);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.getOption(option);	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    c.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol  option	56	None	replace
460	[BUG]  [BUGGY]  Properties  cmd  =  options.getOption(option);  if(cmd.hasValue(value))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.getOption(option);  if(cmd.hasValue(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.getOption(option);  if(cmd.hasValue(value))  {	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
461	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  throwable  =  new  RuntimeException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	Throwable  throwable  =  new  RuntimeException( "Properties  cannot  be  null. ");	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    throw    new    RuntimeException(   "Properties    cannot    be    null.       ");    	compilable	  [FE]  NullPointerException  	20	2	replace
462	[BUG]  [BUGGY]  Throwable  throwable  =  new  RuntimeException( "Properties  cannot  be  null. ");  [FE]  NullPointerException  [FE]              RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  throwable  =  new  RuntimeException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwable  throwable  =  new  RuntimeException( "Properties  cannot  be  null. ");	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    throw    new    RuntimeException(   "Properties    cannot    be    null.       ");    	compilable	  [FE]  NullPointerException  	20	2	replace
463	[BUG]  [BUGGY]  Property  cmd  =  options.getOption(option);  if(cmd.hasValue(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  options.getOption(option);  if(cmd.hasValue(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  options.getOption(option);  if(cmd.hasValue(value))  {	  Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
464	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Properties  must  not  be  null. ");  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalStateException( "Properties  must  not  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalStateException( "Properties  must  not  be  null. ");	  throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	154	None	replace
465	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( "Properties  must  not  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	new  IllegalStateException( "Properties  must  not  be  null. ");	  throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    	compilable	  [FE]  NullPointerException  	154	2	replace
466	[BUG]  [BUGGY]  new  IllegalStateException( "Properties  must  not  be  null. ");  [FE]  NullPointerException  [FE]      IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalStateException( "Properties  must  not  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	new  IllegalStateException( "Properties  must  not  be  null. ");	  throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    	compilable	  [FE]  NullPointerException  	154	2	replace
467	[BUG]  [BUGGY]  Properties  cmd  =  property.properties();  [CE]  cannot  find  symbol  property  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  property.properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  property.properties();	  Properties    cmd    =    properties.properties();    	non-compiled	[CE]  cannot  find  symbol  property	13	None	replace
468	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty( "cmd ",  values);  [CE]  cannot  find  symbol  values  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty( "cmd ",  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty( "cmd ",  values);	  Properties    cmd    =    properties.getProperty(   "cmd   ");    	non-compiled	[CE]  cannot  find  symbol  values	14	None	replace
469	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.getOption(option);  [CE]  cannot  find  symbol  option  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.getOption(option);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.getOption(option);	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    	non-compiled	[CE]  cannot  find  symbol  option	134	None	replace
470	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.getOptions();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.getOptions();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.getOptions();	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
471	[BUG]  [BUGGY]  Enumeration  <  Property>  cmd  =  properties.getOptions();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  Property>  cmd  =  properties.getOptions();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  Property>  cmd  =  properties.getOptions();	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
472	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.getOptions(option);  [CE]  cannot  find  symbol  option  [FE]                  NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.getOptions(option);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.getOptions(option);	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    	non-compiled	[CE]  cannot  find  symbol  option	134	None	replace
473	[BUG]  [BUGGY]  if(option!=  null)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option!=  null)  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option!=  null)  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    c.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
474	[BUG]  [BUGGY]  if(value!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(value!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(value!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
475	[BUG]  [BUGGY]  if(c.hasMoreElements())  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(c.hasMoreElements())  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(c.hasMoreElements())  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
476	[BUG]  [BUGGY]  Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
477	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertiesRequiredOptions();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertiesRequiredOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties.propertiesRequiredOptions();	  Enumeration    <    String>    requiredOptions    =    properties.requiredOptions();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
478	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  are  null.   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  are  null.   ");  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  are  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    are    null.   ");    if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  are  null.   ");  }	  	non-compiled	[CE]  unreachable  statement	89	None	add
479	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  options.propertyRequiredOptions();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  options.propertyRequiredOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  options.propertyRequiredOptions();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
480	[BUG]  [BUGGY]  Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
481	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.values();  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.values();	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  incompatible  types	97	None	replace
482	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyChildren();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyChildren();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyChildren();	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
483	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(property));  [CE]  cannot  find  symbol  property  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(property));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( " ".equals(property));	  throw    new    IllegalArgumentException(   "   ".equals(value));    	non-compiled	[CE]  cannot  find  symbol  property	116	None	replace
484	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(properties));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(properties));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( " ".equals(properties));	  throw    new    IllegalArgumentException(   "   ".equals(value));    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	116	None	replace
485	[BUG]  [BUGGY]  Option  options  =  options.getOption(value);  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  options  =  options.getOption(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  options  =  options.getOption(value);	  Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  value	35	None	replace
486	[BUG]  [BUGGY]  experts.handleMissingException( " ");  [CE]  cannot  find  symbol  experts  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  experts.handleMissingException( " ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	experts.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  experts	72	None	replace
487	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  values.properties();  [CE]  cannot  find  symbol  values  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  values.properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  values.properties();	  Enumeration    <    String>    requiredOptions    =    property.properties();    	non-compiled	[CE]  cannot  find  symbol  values	144	None	replace
488	[BUG]  [BUGGY]  Properties  properties  =  cmd.getOptions();  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  cmd.getOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  cmd.getOptions();	  tries.add(cmd);    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	136	None	replace
489	[BUG]  [BUGGY]  tries.add(value);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  tries.add(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	tries.add(value);	  tries.add(cmd);    	non-compiled	[CE]  cannot  find  symbol  value	136	None	replace
490	[BUG]  [BUGGY]  if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.hasOption(option))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.hasOption(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  return;  }  if(properties!=  null  ||  properties.hasOption(option))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	115	None	replace
491	[BUG]  [BUGGY]  if(propertyNames  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  propertyNames  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(propertyNames  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(propertyNames  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(value))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  propertyNames	115	None	replace
492	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties  ==  null)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(       "       ");    throw    new    RuntimeException(   "       ");    	compilable	  [FE]  RuntimeException  	48	2	replace
493	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException( " ");  }  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(       "       ");    throw    new    RuntimeException(   "       ");    	compilable	  [FE]  RuntimeException  	48	2	replace
494	[BUG]  [BUGGY]  Property  cmd  =  e.nextElement().toString();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  e.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  e.nextElement().toString();	  Property    cmd    =    cmd.nextElement().toString();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
495	[BUG]  [BUGGY]  Properties  cmd  =  e.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  e.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  e.nextElement().toString();  if(cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
496	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
497	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties  ==  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	150	2	add
498	[BUG]  [BUGGY]  Enumeration  <  Property>  cmd  =  properties.keySet();  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  Property>  cmd  =  properties.keySet();  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  Property>  cmd  =  properties.keySet();  if(cmd.hasOption(value))  {	  Enumeration    <    Property>    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
499	[BUG]  [BUGGY]  Enumeration  <  Property>  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  Property>  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  Property>  cmd  =  values.getOption(option);  if(cmd.hasOption(value))  {	  Enumeration    <    Property>    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
500	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(value,  properties);  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(value,  properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(value,  properties);	  Properties    cmd    =    properties.getProperty(properties);    	non-compiled	[CE]  cannot  find  symbol  value	23	None	replace
501	[BUG]  [BUGGY]  if(value  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [CE]  cannot  find  symbol  value  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(value  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(value  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(option))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	114	None	replace
502	[BUG]  [BUGGY]  if(options  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.hasOption(option))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(option))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	114	None	replace
503	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  return  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  return  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  return	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
504	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  return  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  return  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  return	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
505	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
506	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)!=	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
507	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreElements(properties);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMoreElements(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleMoreElements(properties);	          if(properties    ==    null)    {    return;    }    Property(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	68	None	replace
508	[BUG]  [BUGGY]  Property  cmd  =  e.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  e.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  e.nextElement().toString();  if(!cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
509	[BUG]  [BUGGY]  Property  cmd  =  options.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  options.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  options.nextElement().toString();  if(!cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
510	[BUG]  [BUGGY]  Property  cmd  =  e.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  e.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  e.nextElement().toString();  if(cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
511	[BUG]  [BUGGY]  Properties  cmd  =  e.nextElement().toString();  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  e.nextElement().toString();  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  e.nextElement().toString();  if(!cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
512	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(properties,  properties);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailure(properties,  properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(properties,  properties);	  aughtExceptionHandler.handleFailure(properties,    value);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	110	None	replace
513	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(properties,  option);  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailure(properties,  option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(properties,  option);	  aughtExceptionHandler.handleFailure(properties,    value);    	non-compiled	[CE]  cannot  find  symbol  option	110	None	replace
514	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  null ".equals(value));  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  null ".equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Properties  are  null ".equals(value));	  Throwables.throw    new    IllegalArgumentException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
515	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    properties.propertyName    +   "'   ");    	non-compiled	[CE]  not  a  statement	59	None	replace
516	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [CE]  cannot  find  symbol  propertyName  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwable  cause  =  new  IllegalArgumentException( "Cmd  constructor  does  not  support  property  ' "  +  properties.propertyName  + "' ");	  throw    new    IllegalArgumentException(   "Cmd    constructor    does    not    support    property    '   "    +    properties.propertyName    +   "'   ");    	non-compiled	[CE]  cannot  find  symbol  propertyName	59	None	replace
517	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ",  requiredOptions);  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ",  requiredOptions);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( " ",  requiredOptions);	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
518	[BUG]  [BUGGY]  Properties  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
519	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(propertyNames());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailure(propertyNames());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(propertyNames());	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
520	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  options.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  options.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  options.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option))  {	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
521	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(key,  properties.keySet());  [CE]  cannot  find  symbol  key  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(key,  properties.keySet());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(key,  properties.keySet());	  Properties    cmd    =    properties.getProperty(properties.keySet());    	non-compiled	[CE]  cannot  find  symbol  key	25	None	replace
522	[BUG]  [BUGGY]  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(cmd.hasOption(value))  {	  if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
523	[BUG]  [BUGGY]  Properties  properties  =  properties.values();  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  properties.values();	  tries.add(properties);    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	75	None	replace
524	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext());	  if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
525	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(null);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	Thread.currentThread().setContextClassLoader(null);	  if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    	compilable	  [FE]  NullPointerException  	78	2	replace
526	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(null);  [FE]  NullPointerException  [FE]      RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(null);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Thread.currentThread().setContextClassLoader(null);	  if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    	compilable	  [FE]  NullPointerException  	78	2	replace
527	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties  {  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [CE]  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException(   "Properties  cannot  be  null.   ");  }  if(properties  {  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    if(properties  {  null)  {  throw  new  RuntimeException( "Properties  cannot  be  null.   ");  }	  	non-compiled	[CE]  	77	None	add
528	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  values.values();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  values.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(),  values.values();	  Enumeration    <    String>    cmd    =    properties.propertyNames(),    values);    	non-compiled	[CE]  ';'  expected	2	None	replace
529	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Property  ' "  +  properties.getName()  + "'  is  null. ");  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Property  ' "  +  properties.getName()  + "'  is  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Property  ' "  +  properties.getName()  + "'  is  null. ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
530	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Properties  are  null. "  + "properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalArgumentException( "Properties  are  null. "  + "properties  are  null. ");	  throw    new    IllegalArgumentException(   "Properties    are    null.   ");    	compilable	  [FE]  IllegalArgumentException  	90	2	replace
531	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Properties  are  null. "  + "properties  are  null. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Properties  are  null. "  + "properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Properties  are  null. "  + "properties  are  null. ");	  throw    new    IllegalArgumentException(   "Properties    are    null.   ");    	compilable	  [FE]  IllegalArgumentException  	90	2	replace
532	[BUG]  [BUGGY]  Properties  cmd  =  option.getOption(cmd);  [CE]  cannot  find  symbol  option  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  option.getOption(cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  option.getOption(cmd);	  Properties    cmd    =    cmd.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  option	46	None	replace
533	[BUG]  [BUGGY]  Throwable  throw  new  RuntimeException( "Properties  cannot  be  null. ");  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  throw  new  RuntimeException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwable  throw  new  RuntimeException( "Properties  cannot  be  null. ");	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.       ");    }    	non-compiled	[CE]  not  a  statement	18	None	replace
534	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  this.properties.propertyRequires();  [CE]  cannot  find  symbol  properties  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  this.properties.propertyRequires();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  this.properties.propertyRequires();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequires();    	non-compiled	[CE]  cannot  find  symbol  properties	96	None	replace
535	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Properties  are  null ".equals(properties.values()));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( "Properties  are  null ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( "Properties  are  null ".equals(properties.values()));	  throw    new    IllegalArgumentException(   "Properties    are    null.   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	90	None	replace
536	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  property.propertyNames());  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  property.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  property.propertyNames());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
537	[BUG]  [BUGGY]  if(properties  ==  null)  {  return;  }  else  if(properties.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  value  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  return;  }  else  if(properties.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  return;  }  else  if(properties.hasOption(value))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(option))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	114	None	replace
538	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  cannot  be  null.   ");  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  cannot  be  null.   ");  }	  	non-compiled	[CE]  unreachable  statement	79	None	add
539	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "The  properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  RuntimeException( "The  properties  are  null. ");	  throw    new    RuntimeException(       "Properties    are    null.       ");    throw    new    RuntimeException(   "Properties    are    null.       ");    	compilable	  [FE]  RuntimeException  	37	2	replace
540	[BUG]  [BUGGY]  throw  new  RuntimeException( "The  properties  are  null. ");  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "The  properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "The  properties  are  null. ");	  throw    new    RuntimeException(       "Properties    are    null.       ");    throw    new    RuntimeException(   "Properties    are    null.       ");    	compilable	  [FE]  RuntimeException  	37	2	replace
541	[BUG]  [BUGGY]  Properties  cmd  =  _properties.properties();  [CE]  cannot  find  symbol  _properties  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  _properties.properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  _properties.properties();	  Properties    cmd    =    properties.properties();    	non-compiled	[CE]  cannot  find  symbol  _properties	13	None	replace
542	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  non-null. ");  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  non-null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Properties  cannot  be  non-null. ");	  Throwables.throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
543	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(properties.toArray(new  Properties[properties.size()  ]));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(properties.toArray(new  Properties[properties.size()  ]));  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(properties.toArray(new  Properties[properties.size()  ]));	  Properties    cmd    =    properties.get(properties);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
544	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(properties.size()  -  1);  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(properties.size()  -  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(properties.size()  -  1);	  Properties    cmd    =    properties.get(properties);    	non-compiled	[CE]  incompatible  types	103	None	replace
545	[BUG]  [BUGGY]  foundElements(cmd);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  foundElements(cmd);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	foundElements(cmd);	          if(properties!=    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
546	[BUG]  [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  option  =  options.getOption(option);  if(!option.hasOption(option))  {  return;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  option  =  options.getOption(option);  if(!option.hasOption(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  option  =  options.getOption(option);  if(!option.hasOption(option))  {  return;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
547	[BUG]  [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
548	[BUG]  [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Properties  cmd  =  cmd.getOption(option);  if(cmd.hasOption(value))  {  return;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
549	[BUG]  [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  option  =  options.getOption(option);  if(!opt.hasOption(option))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  option  =  options.getOption(option);  if(!opt.hasOption(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Option  option  =  options.getOption(option);  if(!opt.hasOption(option))  {  return;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
550	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value);  [CE]  cannot  find  symbol  e  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleMissingName(e,  value);	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  cannot  find  symbol  e	53	None	replace
551	[BUG]  [BUGGY]  if(properties  ==  null)  {  return;  }  else  if(properties.hasOption(option))  {  return;  }  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  return;  }  else  if(properties.hasOption(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  return;  }  else  if(properties.hasOption(option))  {  return;  }	          if(properties    ==    null)    {    return;    }    if(properties    ==    null    ||    properties.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  option	115	None	replace
552	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null  ||  properties.size()  ==  0)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties  ==  null  ||  properties.size()  ==  0)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    if(properties    ==    null.       ");    	compilable	  [FE]  RuntimeException  	124	2	replace
553	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.size()  ==  0)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null  ||  properties.size()  ==  0)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null  ||  properties.size()  ==  0)  {  throw  new  RuntimeException( "Properties  cannot  be  null. ");  }	  throw    new    RuntimeException(       "Properties    cannot    be    null.       ");    if(properties    ==    null.       ");    	compilable	  [FE]  RuntimeException  	124	2	replace
554	[BUG]  [BUGGY]  Properties  cmd  =  options.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.nextElement().toString();  if(cmd.hasOption(option))  {	  Properties    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
555	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Properties  must  not  be  null.   ");  if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    if(properties  ==  null)  {  throw  new  IllegalArgumentException( "Properties  must  not  be  null.   ");  }	  	non-compiled	[CE]  unreachable  statement	139	None	add
556	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  throwable  =  new  IllegalArgumentException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	Throwable  throwable  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    if(properties    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  NullPointerException  	147	2	replace
557	[BUG]  [BUGGY]  Throwable  throwable  =  new  IllegalArgumentException( " ");  [FE]  NullPointerException  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  throwable  =  new  IllegalArgumentException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwable  throwable  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    if(properties    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  NullPointerException  	147	2	replace
558	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }	  throw    new    RuntimeException(       "Properties    are    null.       ");    Throwables.throw    new    RuntimeException(   "Properties    are    null.       ");    	compilable	  [FE]  RuntimeException  	39	2	replace
559	[BUG]  [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null)  {  throw  new  RuntimeException( "Properties  are  null. ");  }	  throw    new    RuntimeException(       "Properties    are    null.       ");    Throwables.throw    new    RuntimeException(   "Properties    are    null.       ");    	compilable	  [FE]  RuntimeException  	39	2	replace
560	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "The  properties  are  null. ");  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "The  properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "The  properties  are  null. ");	  throw    new    RuntimeException(       "Properties    are    null.       ");    Throwables.throw    new    RuntimeException(   "Properties    are    null.       ");    	non-compiled	[CE]  <identifier>  expected	39	None	replace
561	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  continue;  }  [CE]  continue  outside  of  loop  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.isEmpty())  {  return;  }  if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  continue;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null    ||    properties.isEmpty())    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.isEmpty())  {  continue;  }	  	non-compiled	[CE]  continue  outside  of  loop	150	None	add
562	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  this.properties.properties();  [CE]  cannot  find  symbol  properties  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  this.properties.properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  this.properties.properties();	  Enumeration    <    String>    requiredOptions    =    _properties.properties();    	non-compiled	[CE]  cannot  find  symbol  properties	70	None	replace
563	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertiesRequired();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertiesRequired();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties.propertiesRequired();	  Enumeration    <    String>    requiredOptions    =    properties.requiredOptions();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
564	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
565	[BUG]  [BUGGY]  Parent  <?>  parent  ==  null  ||  properties.properties  ==  null)  {  return;  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Parent  <?>  parent  ==  null  ||  properties.properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Parent  <?>  parent  ==  null  ||  properties.properties  ==  null)  {  return;  }	  parent    ==    null    ||    properties.properties    ==    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	141	None	replace
566	[BUG]  [BUGGY]  Parent  {  null  ||  properties.properties  ==  null)  {  return;  }  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Parent  {  null  ||  properties.properties  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Parent  {  null  ||  properties.properties  ==  null)  {  return;  }	  parent    ==    null    ||    properties.properties    ==    null)    {    return;    }    	non-compiled	[CE]  not  a  statement	141	None	replace
567	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
568	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
569	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
570	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties  ==  null)  {  return;  }  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties    ==    null)    {    return;    }    if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	2	add
571	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ".equals(properties.values()));  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalStateException( " ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalStateException( " ".equals(properties.values()));	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  not  a  statement	4	None	replace
572	[BUG]  [BUGGY]  Properties  cmd  =  option.getOption(value);  if(cmd.hasOption(value))  {  return;  }  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  option.getOption(value);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  option.getOption(value);  if(cmd.hasOption(value))  {  return;  }	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	44	None	replace
573	[BUG]  [BUGGY]  Throw  new  RuntimeException( " ")  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( " ")  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( " ")	  throw    new    RuntimeException(       "       ");    Throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  not  a  statement	47	None	replace
574	[BUG]  [BUGGY]  Enumeration  <  Property>  cmd  =  properties.properties.get(option);  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  Property>  cmd  =  properties.properties.get(option);  if(cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  Property>  cmd  =  properties.properties.get(option);  if(cmd.hasOption(value))  {	  Enumeration    <    Property>    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
575	[BUG]  [BUGGY]  if(propertyMap  ==  null)  {  return;  }  [CE]  cannot  find  symbol  propertyMap  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(propertyMap  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(propertyMap  ==  null)  {  return;  }	          if(properties    ==    null)    {    return;    }    if(propertyMap    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  propertyMap	67	None	replace
576	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties.propertyName);  [CE]  cannot  find  symbol  propertyName  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(properties.propertyName);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties.propertyName);	  Properties    cmd    =    properties.getProperty(propertyName);    	non-compiled	[CE]  cannot  find  symbol  propertyName	22	None	replace
577	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ")  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ")  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( " ")	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
578	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  properties: ");  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  properties: ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  RuntimeException( "Expected  properties: ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
579	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertiesRequires();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertiesRequires();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  requiredOptions  =  properties.propertiesRequires();	  Enumeration    <    String>    requiredOptions    =    properties.requires();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
580	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(option);  if(option!=  null  &&  option.hasOption(value))  {	  Option    cmd    =    options.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
581	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.hasValue(value))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.hasValue(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(option);  if(option!=  null  &&  option.hasValue(value))  {	  Option    cmd    =    options.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
582	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(option);  if(!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(option);  if(!cmd.hasOption(option))  {	  Option    cmd    =    options.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
583	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Option  option  =  options.getOption(option);  if(!cmd.hasOption(value))  {	  Option    cmd    =    options.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
584	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  IllegalArgumentException( "Properties  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "Properties    must    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	140	None	replace
585	[BUG]  [BUGGY]  if(value  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(value  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(value  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option)	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	43	None	replace
586	[BUG]  [BUGGY]  if(value  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(value  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(value  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	43	None	replace
587	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(cmd.hasOption(option	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	43	None	replace
588	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( " ")	  throw    new    IllegalArgumentException(       "       ");    Throwables.throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
589	[BUG]  [BUGGY]  Properties  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {	  Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
590	[BUG]  [BUGGY]  if(option  ==  null  ||  options.getOption(option)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null  ||  options.getOption(option)!=  null)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null  ||  options.getOption(option)!=  null)  {	  if(option    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
591	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.propertyNames  ==  null)  {  return;  }  [CE]  cannot  find  symbol  propertyNames  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null  ||  properties.propertyNames  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(properties  ==  null  ||  properties.propertyNames  ==  null)  {  return;  }	          if(properties    ==    null)    {    return;    }    if(propertyNames    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  propertyNames	66	None	replace
592	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  must  not  be  null.   ");  }  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException(   "Properties  must  not  be  null.   ");  if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  must  not  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    IllegalStateException(   "Properties    must    not    be    null.   ");    if(properties  ==  null)  {  throw  new  IllegalStateException( "Properties  must  not  be  null.   ");  }	  	non-compiled	[CE]  unreachable  statement	153	None	add
593	[BUG]  [BUGGY]  if(options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options.hasOption(option))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options.hasOption(option))  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
594	[BUG]  [BUGGY]  if(options.getOption(option)!=  null)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options.getOption(option)!=  null)  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options.getOption(option)!=  null)  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
595	[BUG]  [BUGGY]  if(options!=  null)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(options!=  null)  {	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
596	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator(),  options.next();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator(),  options.next();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames().iterator(),  options.next();	  Enumeration    <    String>    cmd    =    properties.propertyNames().iterator().next();    	non-compiled	[CE]  ';'  expected	1	None	replace
597	[BUG]  [BUGGY]  Properties  properties  =  cmd.values();  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  cmd.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  properties  =  cmd.values();	  tries.add(cmd);    	non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	136	None	replace
598	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	throw  new  IllegalArgumentException( " "  +  properties.propertyNames());	  throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	compilable	  [FE]  NullPointerException  	83	2	replace
599	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  properties.propertyNames());  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  IllegalArgumentException( " "  +  properties.propertyNames());	  throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	compilable	  [FE]  NullPointerException  	83	2	replace
600	[BUG]  [BUGGY]  if(cmd.hasOption(option)||!cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd.hasOption(option)||!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(cmd.hasOption(option)||!cmd.hasOption(option))  {	  if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
601	[BUG]  [BUGGY]  if(cmd  ==  null  ||  value.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd  ==  null  ||  value.length()  ==  0)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(cmd  ==  null  ||  value.length()  ==  0)  {	  if(cmd    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
602	[BUG]  [BUGGY]  if(cmd  ==  null  ||  cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd  ==  null  ||  cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(cmd  ==  null  ||  cmd.hasOption(option))  {	  if(cmd    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
603	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  NullPointerException  	28	2	replace
604	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [FE]  NullPointerException  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  NullPointerException  	28	2	replace
605	[BUG]  [BUGGY]  >>  [Delete]  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  >>  [Delete]  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	>>  [Delete]	          if(properties    ==    null)    {    return;    }    if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
606	[BUG]  [BUGGY]  ==  [Delete]  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ==  [Delete]  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	==  [Delete]	          if(properties    ==    null)    {    return;    }    if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
607	[BUG]  [BUGGY]  >=  [Delete]  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  >=  [Delete]  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	>=  [Delete]	          if(properties    ==    null)    {    return;    }    if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
608	[BUG]  [BUGGY]  Property  return  =  cmd.getOption(option);  if(!cmd.hasOption(value))  {  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  return  =  cmd.getOption(option);  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  return  =  cmd.getOption(option);  if(!cmd.hasOption(value))  {	  Property    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	non-compiled	[CE]  not  a  statement	32	None	replace
609	[BUG]  [BUGGY]  Helfer.handleFailure(properties);  [CE]  cannot  find  symbol  Helfer  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Helfer.handleFailure(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Helfer.handleFailure(properties);	  aughtExceptionHandler.handleFailure(properties);    	non-compiled	[CE]  cannot  find  symbol  Helfer	73	None	replace
610	[BUG]  [BUGGY]  Builder.handleFailure(properties);  [CE]  cannot  find  symbol  Builder  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Builder.handleFailure(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Builder.handleFailure(properties);	  aughtExceptionHandler.handleFailure(properties);    	non-compiled	[CE]  cannot  find  symbol  Builder	73	None	replace
611	[BUG]  [BUGGY]  dépannage.handleFailure(properties);  [CE]  cannot  find  symbol  d  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  dépannage.handleFailure(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	dépannage.handleFailure(properties);	  aughtExceptionHandler.handleFailure(properties);    	non-compiled	[CE]  cannot  find  symbol  d	73	None	replace
612	[BUG]  [BUGGY]  Context.checkState(e.hasNext());  [CE]  cannot  find  symbol  e  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Context.checkState(e.hasNext());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(e.hasNext());	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  e	132	None	replace
613	[BUG]  [BUGGY]  Context.checkState(e.nextElement()!=  null);  [CE]  cannot  find  symbol  e  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Context.checkState(e.nextElement()!=  null);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Context.checkState(e.nextElement()!=  null);	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  e	132	None	replace
614	[BUG]  [BUGGY]  Properties  cmd  =  properties.get(properties.propertyName);  [CE]  cannot  find  symbol  propertyName  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.get(properties.propertyName);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.get(properties.propertyName);	  Properties    cmd    =    properties.get(propertyName);    	non-compiled	[CE]  cannot  find  symbol  propertyName	84	None	replace
615	[BUG]  [BUGGY]  Properties  cmd  =  properties.getPropertyFactory(properties);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getPropertyFactory(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getPropertyFactory(properties);	  Properties    cmd    =    properties.getPropertyFactory();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
616	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <?>  e  =  properties.propertyNames();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	Enumeration  <?>  e  =  properties.propertyNames();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	compilable	  [FE]  NullPointerException  	133	2	replace
617	[BUG]  [BUGGY]  Enumeration  <?>  e  =  properties.propertyNames();  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <?>  e  =  properties.propertyNames();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <?>  e  =  properties.propertyNames();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Properties    cmd    =    cmd.getOption(option);    if(cmd.hasOption(value))    {    	compilable	  [FE]  NullPointerException  	133	2	replace
618	[BUG]  [BUGGY]  List  requiredOptions  =  properties.values();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  requiredOptions  =  properties.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	List  requiredOptions  =  properties.values();	  tries.add(properties);    	non-compiled	[CE]  incompatible  types	75	None	replace
619	[BUG]  [BUGGY]  Throwables.throwException( " ".equals(properties.values()));  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throwException( " ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throwException( " ".equals(properties.values()));	  throw    new    IllegalStateException(       "       ");    Throwables.throwException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	replace
620	[BUG]  [BUGGY]  Throwables.throwException( " ",  Arrays.asList(properties));  [CE]  cannot  find  symbol  Throwables  [FE]                IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throwException( " ",  Arrays.asList(properties));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throwException( " ",  Arrays.asList(properties));	  throw    new    IllegalStateException(       "       ");    Throwables.throwException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	replace
621	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(value,  null);  [CE]  cannot  find  symbol  value  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailure(value,  null);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(value,  null);	          if(properties    ==    null)    {    return;    }    if(properties!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	65	None	replace
622	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  not  null. ");  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  not  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Properties  are  not  null. ");	  Throwables.throw    new    IllegalArgumentException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
623	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  not  supported. ");  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  not  supported. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Properties  are  not  supported. ");	  Throwables.throw    new    IllegalArgumentException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
624	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  null. "  + "properties  are  null. ");  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  are  null. "  + "properties  are  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalArgumentException( "Properties  are  null. "  + "properties  are  null. ");	  Throwables.throw    new    IllegalArgumentException(   "Properties    are    null.   ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
625	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  this.properties.propertyValues();  [CE]  cannot  find  symbol  properties  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  this.properties.propertyValues();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  this.properties.propertyValues();	  Enumeration    <    String>    cmd    =    properties.propertyValues();    	non-compiled	[CE]  cannot  find  symbol  properties	158	None	replace
626	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  values.propertyValues();  [CE]  cannot  find  symbol  values  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  values.propertyValues();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  values.propertyValues();	  Enumeration    <    String>    cmd    =    properties.propertyValues();    	non-compiled	[CE]  cannot  find  symbol  values	158	None	replace
627	[BUG]  [BUGGY]  Property  cmd  =  options.nextElement().toString();  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  cmd  =  options.nextElement().toString();  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  cmd  =  options.nextElement().toString();  if(cmd.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
628	[BUG]  [BUGGY]  Property  option  =  cmd.nextElement().toString();  if(option.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  option  =  cmd.nextElement().toString();  if(option.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  option  =  cmd.nextElement().toString();  if(option.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
629	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
630	[BUG]  [BUGGY]  Property  value  =  e.nextElement().toString();  if(!value.equals(value))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  e.nextElement().toString();  if(!value.equals(value))  {  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  value  =  e.nextElement().toString();  if(!value.equals(value))  {	  if(properties!=    null)    {    for(Enumeration    e    =    properties.propertyNames();    e.hasMoreElements();)    {    Property    value    =    e.nextElement().toString();    if(value.equals(value))    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
631	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(properties,  value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(properties,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleMissingName(properties,  value);	          if(properties    ==    null)    {    return;    }    Property(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	68	None	replace
632	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingProperty(value,  null);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingProperty(value,  null);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleMissingProperty(value,  null);	          if(properties    ==    null)    {    return;    }    Property(properties    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  value	68	None	replace
633	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyValues();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyValues();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  c  =  properties.propertyValues();	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
634	[BUG]  [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	if(option  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  cmd  =  cmd.nextElement().toString();  if(!cmd.hasOption(option	  if(option    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option)    	non-compiled	[CE]  ')'  expected	11	None	replace
635	[BUG]  [BUGGY]  Enumeration  <  String>  e  =  properties.propertyNames();  [CE]  incompatible  types  [FE]        NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  e  =  properties.propertyNames();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  e  =  properties.propertyNames();	          if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    cmd    =    cmd.nextElement().toString();    if(cmd.hasOption(option))    {    	non-compiled	[CE]  incompatible  types	152	None	replace
636	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(properties,  cmd);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(properties,  cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleOption(properties,  cmd);	  aughtExceptionHandler.handleOption(option,    cmd);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	123	None	replace
637	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  property.propertyNames();  [CE]  cannot  find  symbol  property  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  property.propertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  property.propertyNames();	  Enumeration    <    String>    cmd    =    properties.propertyNames()    +    1;    	non-compiled	[CE]  cannot  find  symbol  property	3	None	replace
638	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(key);  [CE]  cannot  find  symbol  key  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyName(key);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyName(key);	  Enumeration    <    String>    cmd    =    properties.propertyName(value);    	non-compiled	[CE]  cannot  find  symbol  key	108	None	replace
639	[BUG]  [BUGGY]  {  [Delete]  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  {  [Delete]  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	{  [Delete]	  if(properties    ==    null)    {    throw    new    RuntimeException(   "Properties    cannot    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
640	[BUG]  [BUGGY]  Properties  cmd  =  property.getPropertyValue(value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  property.getPropertyValue(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  property.getPropertyValue(value);	  Properties    cmd    =    properties.getPropertyValue(key);    	non-compiled	[CE]  cannot  find  symbol  value	106	None	replace
641	[BUG]  [BUGGY]  throw  new  RuntimeException(   "Expected  properties  to  be  null.   ");  if(properties  ==  null)  {  throw  new  RuntimeException( "Expected  properties  to  be  null.   ");  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException(   "Expected  properties  to  be  null.   ");  if(properties  ==  null)  {  throw  new  RuntimeException( "Expected  properties  to  be  null.   ");  }  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw    new    RuntimeException(   "Expected    properties    to    be    null.   ");    if(properties  ==  null)  {  throw  new  RuntimeException( "Expected  properties  to  be  null.   ");  }	  	non-compiled	[CE]  unreachable  statement	142	None	add
642	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(properties);  [CE]  method  propertyNames  in  class  Properties  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(properties);	  Enumeration    <    String>    cmd    =    properties.propertyNames(value);    	non-compiled	[CE]  method  propertyNames  in  class  Properties  cannot  be  applied  to  given  types;	157	None	replace
643	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  value);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames(),  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <  String>  cmd  =  properties.propertyNames(),  value);	  Enumeration    <    String>    cmd    =    properties.propertyNames(),    values);    	non-compiled	[CE]  ';'  expected	2	None	replace
644	[BUG]  [BUGGY]  throw  new  RuntimeException( "Properties  are  null ",  property.values());  [CE]  cannot  find  symbol  property  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Properties  are  null ",  property.values());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "Properties  are  null ",  property.values());	  throw    new    RuntimeException(   "Properties    are    null   ".equals(properties.values()));    	non-compiled	[CE]  cannot  find  symbol  property	155	None	replace
645	[BUG]  [BUGGY]  throw  new  RuntimeException( "The  property  ' "  +  properties.getName()  + "'  does  not  exist. ");  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "The  property  ' "  +  properties.getName()  + "'  does  not  exist. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	throw  new  RuntimeException( "The  property  ' "  +  properties.getName()  + "'  does  not  exist. ");	  throw    new    RuntimeException(       "       ");    throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
646	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	Throwable  cause  =  new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	compilable	  [FE]  NullPointerException  	5	2	replace
647	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [FE]  NullPointerException  [FE]          IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwable  cause  =  new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	compilable	  [FE]  NullPointerException  	5	2	replace
648	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet(),  property);  [CE]  cannot  find  symbol  property  [FE]                  ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperty(properties.keySet(),  property);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Properties  cmd  =  properties.getProperty(properties.keySet(),  property);	  Properties    cmd    =    properties.getProperty(properties.keySet());    	non-compiled	[CE]  cannot  find  symbol  property	25	None	replace
649	[BUG]  [BUGGY]  Property  option  =  cmd.nextElement().toString();  if(!option.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  option  =  cmd.nextElement().toString();  if(!option.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Property  option  =  cmd.nextElement().toString();  if(!option.hasOption(option))  {	  Property    cmd    =    cmd.nextElement().toString();    if(!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
650	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailure(properties,  property);  [CE]  cannot  find  symbol  property  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailure(properties,  property);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	aughtExceptionHandler.handleFailure(properties,  property);	  aughtExceptionHandler.handleFailure(properties,    value);    	non-compiled	[CE]  cannot  find  symbol  property	110	None	replace
651	[BUG]  [BUGGY]  Iterator  <  String>  it  =  properties.propertyNames();  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  String>  it  =  properties.propertyNames();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Iterator  <  String>  it  =  properties.propertyNames();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  incompatible  types	101	None	replace
652	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <?>  c  =  properties.propertyNames();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	Enumeration  <?>  c  =  properties.propertyNames();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	compilable	  [FE]  NullPointerException  	101	2	replace
653	[BUG]  [BUGGY]  Enumeration  <?>  c  =  properties.propertyNames();  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <?>  c  =  properties.propertyNames();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Enumeration  <?>  c  =  properties.propertyNames();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	compilable	  [FE]  NullPointerException  	101	2	replace
654	[BUG]  [BUGGY]  dépannageExceptionHandler.handleMissingException( " ");  [CE]  cannot  find  symbol  d  [FE]        ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  dépannageExceptionHandler.handleMissingException( " ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	dépannageExceptionHandler.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  d	72	None	replace
655	[BUG]  [BUGGY]  Methods.handleMissingException( " ");  [CE]  cannot  find  symbol  Methods  [FE]          ComparisonFailure      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Methods.handleMissingException( " ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Methods.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  Methods	72	None	replace
656	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(properties.values()));  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throwables.throw  new  IllegalStateException( " ".equals(properties.values()));	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
657	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  are  null ".equals(properties.values()));  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  are  null ".equals(properties.values()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  are  null ".equals(properties.values()));	  Throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
658	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  are  null ".equals(properties.get(0)));  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  are  null ".equals(properties.get(0)));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	Throw  new  RuntimeException( "Properties  are  null ".equals(properties.get(0)));	  Throw    new    RuntimeException(   "Properties    are    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
659	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
660	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
661	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  else  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	add	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties  ==  null)  {  return;  }  else  if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
662	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  else  if(properties!=  null)  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(properties  ==  null)  {  return;  }  else  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(properties  ==  null)  {  return;  }  else  if(properties!=  null)  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	64	2	add
663	[BUG]  [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(property  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [CE]  cannot  find  symbol  property  [FE]        ComparisonFailure    [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]          if(properties    ==    null)    {    return;    }    if(properties!=  null)  {  return;  }  if(property  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	240	240	2	replace	                if(properties        ==        null)        {        return;        }        if(properties!=    null)    {    return;    }    if(property  ==  null)  {  return;  }  if(properties!=  null)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  property	64	None	add
