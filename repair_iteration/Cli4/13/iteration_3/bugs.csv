bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  iterator  =(this.options  ==  null)?  this.options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options  ==  null)?  this.options.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options  ==  null)?  this.options.iterator()  :  null;	  Iterator    iterator    =(this.options!=    null)?    this.options.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
2	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  null;	  Iterator    iterator    =(this.options!=    null)?    this.options.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
3	[BUG]  [BUGGY]  Iterator  iterator  =(this.options  ==  null)?  options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options  ==  null)?  options.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options  ==  null)?  options.iterator()  :  null;	  Iterator    iterator    =(this.options!=    null)?    this.options.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
4	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  blockAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  blockAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  blockAtNonOption);	  Option    cmd    =    options.getOption(this.options,    blockAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
5	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  blockAtNonOption,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  blockAtNonOption,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  blockAtNonOption,  stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    blockAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
6	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(options,  blockAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(options,  blockAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(options,  blockAtNonOption);	  Option    cmd    =    options.getOption(this.options,    blockAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
7	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  null,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  null,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  null,  stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    null,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
8	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  arguments,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  null,  arguments,  stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    null,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
9	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  iterator,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  iterator,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  null,  iterator,  stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    null,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
10	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  argument,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  argument,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  null,  argument,  stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    null,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
11	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  opt);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  opt);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
12	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(stopAtNonOption);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
13	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  option);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  option);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
14	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]          iterator.next();    iterator.next();  iterator.next();  iterator.next();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	add	                iterator.next();        iterator.next();    iterator.next();  iterator.next();	  	compilable	  [FE]  NoSuchElementException  	10	2	add
15	[BUG]  [BUGGY]          iterator.next();    iterator.next();  iterator.next();  iterator.next();  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]          iterator.next();    iterator.next();  iterator.next();  iterator.next();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	                iterator.next();        iterator.next();    iterator.next();  iterator.next();	  	compilable	  [FE]  NoSuchElementException  	10	2	add
16	[BUG]  [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator.next();  iterator.next();  [CE]  ';'  expected  [FE]      NoSuchElementException    [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator.next();  iterator.next();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	                iterator.next();        iterator.next();    Iterator  iterator.next();  iterator.next();	  	non-compiled	[CE]  ';'  expected	10	None	add
17	[BUG]  [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator  =  this.options.iterator();  iterator.next();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        NoSuchElementException    [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator  =  this.options.iterator();  iterator.next();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	                iterator.next();        iterator.next();    Iterator  iterator  =  this.options.iterator();  iterator.next();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	add
18	[BUG]  [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator  =  tokenList.listIterator();  iterator.next();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          NoSuchElementException    [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator  =  tokenList.listIterator();  iterator.next();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	                iterator.next();        iterator.next();    Iterator  iterator  =  tokenList.listIterator();  iterator.next();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	add
19	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  this.stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  this.stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  this.stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    this.stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
20	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.stopAtNonOption,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  this.stopAtNonOption,  iterator);	  Option    cmd    =    options.getOption(this.options,    this.stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
21	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.stopAtNonOption,  arguments);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.stopAtNonOption,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  this.stopAtNonOption,  arguments);	  Option    cmd    =    options.getOption(this.options,    this.stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
22	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.keySet().listIterator(this.options);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.keySet().listIterator(this.options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.keySet().listIterator(this.options);	  Iterator    iterator    =    this.options.keySet().listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
23	[BUG]  [BUGGY]  Iterator  iterator  =  options.keySet().listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.keySet().listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  options.keySet().listIterator();	  Iterator    iterator    =    this.options.keySet().listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
24	[BUG]  [BUGGY]  Option  cmd  =(Option)iterator.next(),  stopAtNonOption;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =(Option)iterator.next(),  stopAtNonOption;  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =(Option)iterator.next(),  stopAtNonOption;	  Option    cmd    =(Option)iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
25	[BUG]  [BUGGY]  Option  cmd  =(Option)iterator.next(),  stopAtNonOption);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =(Option)iterator.next(),  stopAtNonOption);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =(Option)iterator.next(),  stopAtNonOption);	  Option    cmd    =(Option)iterator.next();    	non-compiled	[CE]  	19	None	replace
26	[BUG]  [BUGGY]  Option  cmd  =(Option)iterator.next(),  blockAtNonOption;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =(Option)iterator.next(),  blockAtNonOption;  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =(Option)iterator.next(),  blockAtNonOption;	  Option    cmd    =(Option)iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
27	[BUG]  [BUGGY]  While  (iterator.hasNext()  ||  iterator.hasNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  While  (iterator.hasNext()  ||  iterator.hasNext())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	While  (iterator.hasNext()  ||  iterator.hasNext())  {	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    While    (iterator.hasNext()    ||    iterator.hasNext())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
28	[BUG]  [BUGGY]  Iterator  iterator  =  options.values().iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.values().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  options.values().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
29	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.next().toString())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while  (iterator.hasNext()  &&  iterator.next().toString())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while  (iterator.hasNext()  &&  iterator.next().toString())  {	  while    (iterator.hasNext()    &&    iterator.next())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	34	None	replace
30	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.next().startsWith( "- "))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while  (iterator.hasNext()  &&  iterator.next().startsWith( "- "))  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while  (iterator.hasNext()  &&  iterator.next().startsWith( "- "))  {	  while    (iterator.hasNext()    &&    iterator.next())    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
31	[BUG]  [BUGGY]  Ilerator  iterator  =  options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Ilerator  iterator  =  options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Ilerator  iterator  =  options.iterator();	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
32	[BUG]  [BUGGY]  iterator  =  options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator  =  options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	iterator  =  options.iterator();	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
33	[BUG]  [BUGGY]  while(iterator.hasNext())  {  Iterator  iterator  =  options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  Iterator  iterator  =  options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  Iterator  iterator  =  options.iterator();	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	25	None	replace
34	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.listIterator(this.options,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.listIterator(this.options,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.listIterator(this.options,  stopAtNonOption);	  Iterator    iterator    =    this.options.listIterator(stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
35	[BUG]  [BUGGY]  Iterator  iterator  =  options.listIterator(stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.listIterator(stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  options.listIterator(stopAtNonOption);	  Iterator    iterator    =    this.options.listIterator(stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
36	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.listIterator(arguments,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.listIterator(arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.listIterator(arguments,  stopAtNonOption);	  Iterator    iterator    =    this.options.listIterator(stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
37	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.listIterator(arguments);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.listIterator(arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.listIterator(arguments);	  Iterator    iterator    =    this.options.listIterator(stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
38	[BUG]  [BUGGY]  Iterator  iterator  =  this.tokenList.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.tokenList.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.tokenList.listIterator();	  Iterator    iterator    =    tokenList.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
39	[BUG]  [BUGGY]  Iterator  iterator  =  this.parameters.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]          NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.parameters.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.parameters.listIterator();	  Iterator    iterator    =    tokenList.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(this.options,  opt);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  options.getOption(this.options,  opt);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(this.options);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  options.getOption(this.options);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  options.getOption(stopAtNonOption);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenList);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(tokenList);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  options.getOption(tokenList);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
44	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =  options.keySet().iterator();	  Iterator    <    String>    iterator    =    this.options.keySet().iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
45	[BUG]  [BUGGY]  While  (iterator.hasNext()  &&  iterator.hasNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  While  (iterator.hasNext()  &&  iterator.hasNext())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	While  (iterator.hasNext()  &&  iterator.hasNext())  {	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    While    (iterator.hasNext()    &&    iterator.hasNext())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
46	[BUG]  [BUGGY]  while(iterator.hasNext()  &&  iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.hasNext())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext()  &&  iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.hasNext())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext()  &&  iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.hasNext())  {	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    if(iterator.hasNext()    ||    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
47	[BUG]  [BUGGY]  while(iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.hasNext())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.hasNext())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.hasNext())  {	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    if(iterator.hasNext()    ||    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
48	[BUG]  [BUGGY]  while(iterator.hasNext()  &&  iterator.hasNext())  {  if(iterator.hasNext()  &&  iterator.hasNext())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext()  &&  iterator.hasNext())  {  if(iterator.hasNext()  &&  iterator.hasNext())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext()  &&  iterator.hasNext())  {  if(iterator.hasNext()  &&  iterator.hasNext())  {	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    if(iterator.hasNext()    ||    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
49	[BUG]  [BUGGY]  iterator  =  this.options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator  =  this.options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	iterator  =  this.options.iterator();	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
50	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.iterator();  while  (iterator.hasNext()  ||  iterator.hasNext())  {  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.iterator();  while  (iterator.hasNext()  ||  iterator.hasNext())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.iterator();  while  (iterator.hasNext()  ||  iterator.hasNext())  {	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    iterator    =    this.options.iterator();    while    (iterator.hasNext()    ||    iterator.hasNext())    {    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	33	None	replace
51	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.iterator();  while  (iterator.hasNext()  &&  iterator.hasNext())  {  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.iterator();  while  (iterator.hasNext()  &&  iterator.hasNext())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.iterator();  while  (iterator.hasNext()  &&  iterator.hasNext())  {	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    iterator    =    this.options.iterator();    while    (iterator.hasNext()    ||    iterator.hasNext())    {    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	33	None	replace
52	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  arguments,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.options,  arguments,  stopAtNonOption);	  Option    cmd    =    this.options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
53	[BUG]  [BUGGY]  Option  cmd  =  iterator.getOption(options,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  iterator.getOption(options,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  iterator.getOption(options,  stopAtNonOption);	  Option    cmd    =    this.options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
54	[BUG]  [BUGGY]  while(iterator.hasNext())  {  Iterator  <  String>  iterator  =  this.options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  Iterator  <  String>  iterator  =  this.options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  Iterator  <  String>  iterator  =  this.options.iterator();	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
55	[BUG]  [BUGGY]  iterator  <  String>  iterator  =  this.options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator  <  String>  iterator  =  this.options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	iterator  <  String>  iterator  =  this.options.iterator();	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
56	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption,  iterator);	  Option    cmd    =    options.getOption(this.options,    argument,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
57	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption,  arguments);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption,  arguments);	  Option    cmd    =    options.getOption(this.options,    argument,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
58	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(argument,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(argument,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(argument,  stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    argument,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
59	[BUG]  [BUGGY]  Iterator  iterator  =(this.requiredOptions  ==  null)?  this.requiredOptions.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.requiredOptions  ==  null)?  this.requiredOptions.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.requiredOptions  ==  null)?  this.requiredOptions.iterator()  :  null;	  Iterator    iterator    =(this.requiredOptions!=    null)?    this.requiredOptions.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
60	[BUG]  [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.options.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.requiredOptions!=  null)?  this.options.iterator()  :  null;	  Iterator    iterator    =(this.requiredOptions!=    null)?    this.requiredOptions.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
61	[BUG]  [BUGGY]  Iterator  iterator  =(this.requiredOptions  ==  null)?  this.options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.requiredOptions  ==  null)?  this.options.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.requiredOptions  ==  null)?  this.options.iterator()  :  null;	  Iterator    iterator    =(this.requiredOptions!=    null)?    this.requiredOptions.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
62	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption;  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  iterator.next(),  stopAtNonOption;	  Option    option    =    iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
63	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  iterator.next(),  stopAtNonOption);	  Option    option    =    iterator.next();    	non-compiled	[CE]  	20	None	replace
64	[BUG]  [BUGGY]  Option  option  =  iterator.next()  :  null;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  iterator.next()  :  null;  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  iterator.next()  :  null;	  Option    option    =    iterator.next();    	non-compiled	[CE]  	20	None	replace
65	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments);	  Option    cmd    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
66	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.options,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.options,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  this.options,  stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
67	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.options,  options);	  Option    cmd    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
68	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =  arguments.iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
69	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator(),  stopAtNonOption;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  options.iterator(),  stopAtNonOption;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =  options.iterator(),  stopAtNonOption;	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
70	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();	  Iterator    iterator    =(this.options!=    null)?    options.iterator()    :    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
71	[BUG]  [BUGGY]  Iterator  iterator  =(this.options  ==  null)?  options.iterator()  :  this.options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options  ==  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options  ==  null)?  options.iterator()  :  this.options.iterator();	  Iterator    iterator    =(this.options!=    null)?    options.iterator()    :    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
72	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  arguments.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  arguments.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  arguments.iterator();	  Iterator    iterator    =(this.options!=    null)?    options.iterator()    :    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
73	[BUG]  [BUGGY]  Iterator  iterator  =  iterator.next();  [CE]  invalid  method  declaration;  return  type  required  [FE]            NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  iterator.next();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  iterator.next();	          iterator.next();    Iterator    iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
74	[BUG]  [BUGGY]  Iterator  iterator.next();  [CE]  [FE]              NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator.next();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator.next();	          iterator.next();    Iterator    iterator.next();    	non-compiled	[CE]  	13	None	replace
75	[BUG]  [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.arguments.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
76	[BUG]  [BUGGY]  Iterator  iterator  =  this.parameters.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.parameters.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.parameters.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
77	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =  options.values().iterator();	  Iterator    <    String>    iterator    =    this.options.values().iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
78	[BUG]  [BUGGY]  while(iterator.hasNext()  &&  iterator.hasNext())  {  Iterator  <  String>  iterator  =  options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext()  &&  iterator.hasNext())  {  Iterator  <  String>  iterator  =  options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext()  &&  iterator.hasNext())  {  Iterator  <  String>  iterator  =  options.iterator();	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	48	None	replace
79	[BUG]  [BUGGY]  Option  cmd  =  iterator.getOption(this.options,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  iterator.getOption(this.options,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  iterator.getOption(this.options,  stopAtNonOption);	  Option    cmd    =    this.options.getOption(this.options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
80	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  this.options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  this.options.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options  ==  null)?  this.options.iterator()  :  null;	  Iterator    <    String>    iterator    =(this.options!=    null)?    this.options.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
81	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  null;	  Iterator    <    String>    iterator    =(this.options!=    null)?    this.options.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
82	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  options.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options  ==  null)?  options.iterator()  :  null;	  Iterator    <    String>    iterator    =(this.options!=    null)?    this.options.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
83	[BUG]  [BUGGY]  Iterator  iterator  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  Iterator    iterator    =    Arrays.asList(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
84	[BUG]  [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  cmd);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  cmd);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  cmd);	  Iterator    iterator    =    Arrays.asList(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
85	[BUG]  [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  options);	  Iterator    iterator    =    Arrays.asList(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
86	[BUG]  [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  requiredOptions);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  requiredOptions);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  requiredOptions);	  Iterator    iterator    =    Arrays.asList(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
87	[BUG]  [BUGGY]  Iterator  iterator  =  this.tokenList.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.tokenList.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.tokenList.iterator();	  Iterator    iterator    =    tokenList.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
88	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(this.options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.options);	  Option    cmd    =    this.options.getOption(options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
89	[BUG]  [BUGGY]  Iterator  iterator  =(this.options  ==  null?  this.options.iterator()  :  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options  ==  null?  this.options.iterator()  :  null);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options  ==  null?  this.options.iterator()  :  null);	  Iterator    iterator    =(this.options!=    null?    this.options.iterator()    :    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
90	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null?  this.options.iterator()  :  null,  stopAtNonOption);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options!=  null?  this.options.iterator()  :  null,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options!=  null?  this.options.iterator()  :  null,  stopAtNonOption);	  Iterator    iterator    =(this.options!=    null?    this.options.iterator()    :    null);    	non-compiled	[CE]  	51	None	replace
91	[BUG]  [BUGGY]  Iterator  iterator  =  options.values().listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.values().listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  options.values().listIterator();	  Iterator    iterator    =    this.options.values().listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
92	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while  (iterator.hasNext()  &&  iterator.next()  ==  null)  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	add	while  (iterator.hasNext()  &&  iterator.next()  ==  null)  {	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    while    (iterator.hasNext()    &&    iterator.hasNext())    {    	compilable	  [FE]  ComparisonFailure  	23	2	replace
93	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.next()  ==  null)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while  (iterator.hasNext()  &&  iterator.next()  ==  null)  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while  (iterator.hasNext()  &&  iterator.next()  ==  null)  {	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    while    (iterator.hasNext()    &&    iterator.hasNext())    {    	compilable	  [FE]  ComparisonFailure  	23	2	replace
94	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options,  stopAtNonOption,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options,  stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.options,  options,  stopAtNonOption,  iterator);	  Option    cmd    =    this.options.getOption(this.options,    options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
95	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  options.iterator()  :  this.options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options  ==  null)?  options.iterator()  :  this.options.iterator();	  Iterator    <    String>    iterator    =(this.options!=    null)?    options.iterator()    :    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
96	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();	  Iterator    <    String>    iterator    =(this.options!=    null)?    options.iterator()    :    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
97	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  this.options.iterator()  :  options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  this.options.iterator()  :  options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options  ==  null)?  this.options.iterator()  :  options.iterator();	  Iterator    <    String>    iterator    =(this.options!=    null)?    options.iterator()    :    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
98	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  iterator);	  Option    cmd    =    options.getOption(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
99	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  eatTheRest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  eatTheRest);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  eatTheRest);	  Option    cmd    =    options.getOption(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
100	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  tokenList);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  tokenList);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  tokenList);	  Option    cmd    =    options.getOption(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
101	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  option);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  option);	  Option    cmd    =    options.getOption(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
102	[BUG]  [BUGGY]  Iterator  iterator  =(this.requiredOptions  ==  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.requiredOptions  ==  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.requiredOptions  ==  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();	  Iterator    iterator    =(this.requiredOptions!=    null)?    this.requiredOptions.iterator()    :    tokenList.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
103	[BUG]  [BUGGY]  Iterator  iterator  =(tokenList!=  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(tokenList!=  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(tokenList!=  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();	  Iterator    iterator    =(this.requiredOptions!=    null)?    this.requiredOptions.iterator()    :    tokenList.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
104	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  iterator,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  iterator,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  iterator,  stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    iterator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
105	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  iterator);	  Option    cmd    =    options.getOption(this.options,    iterator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
106	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(options,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(options,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(options,  iterator);	  Option    cmd    =    options.getOption(this.options,    iterator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
107	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  iterator,  this.stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  iterator,  this.stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  iterator,  this.stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    iterator);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
108	[BUG]  [BUGGY]  Iterator  iterator  =  this.requiredOptions.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.requiredOptions.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.requiredOptions.listIterator();	          iterator.next();    Iterator    iterator    =    this.requiredOptions.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
109	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  Iterator.hasNext())  {  [CE]  non-static  method  hasNext()  cannot  be  referenced  from  a  static  context  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while  (iterator.hasNext()  &&  Iterator.hasNext())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while  (iterator.hasNext()  &&  Iterator.hasNext())  {	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    while    (iterator.hasNext()    &&    Iterator.hasNext())    {    	non-compiled	[CE]  non-static  method  hasNext()  cannot  be  referenced  from  a  static  context	55	None	replace
110	[BUG]  [BUGGY]  Iterator  iterator  =  options.listIterator(this.options);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.listIterator(this.options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  options.listIterator(this.options);	  Iterator    iterator    =    options.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
111	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption,  eatTheRest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption,  eatTheRest);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption,  eatTheRest);	  Option    cmd    =    options.getOption(this.options,    argument,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
112	[BUG]  [BUGGY]  Ilerator  iterator  =  this.requiredOptions.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Ilerator  iterator  =  this.requiredOptions.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Ilerator  iterator  =  this.requiredOptions.iterator();	          iterator.next();    Iterator    iterator    =    this.requiredOptions.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
113	[BUG]  [BUGGY]  Option  option  =  iterator.getOption(this.options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  iterator.getOption(this.options);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  iterator.getOption(this.options);	  Option    option    =    iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
114	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  arguments);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.options,  arguments);	  Option    cmd    =    this.options.getOption(this.options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
115	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options,  stopAtNonOption,  eatTheRest);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options,  stopAtNonOption,  eatTheRest);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.options,  options,  stopAtNonOption,  eatTheRest);	  Option    cmd    =    this.options.getOption(this.options,    options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
116	[BUG]  [BUGGY]  Iterator  iterator  =  options.options.keySet().iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.options.keySet().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  options.options.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
117	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.values().listIterator(stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.values().listIterator(stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.values().listIterator(stopAtNonOption);	  Iterator    iterator    =    this.options.values().listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
118	[BUG]  [BUGGY]  while(iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.next()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.next()  ==  null)  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.next()  ==  null)  {	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    if(iterator.hasNext()    ||    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
119	[BUG]  [BUGGY]  iterator.clear();  [CE]  invalid  method  declaration;  return  type  required  [FE]          NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator.clear();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	iterator.clear();	  iterator.remove();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
120	[BUG]  [BUGGY]  Option  cmd  =(Option)iterator.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =(Option)iterator.clone();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =(Option)iterator.clone();	  Option    cmd    =(Option)iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
121	[BUG]  [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator  =  tokenList.listIterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    NoSuchElementException    [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator  =  tokenList.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	                iterator.next();        iterator.next();    Iterator  iterator  =  tokenList.listIterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	add
122	[BUG]  [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator  =  this.options.listIterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      NoSuchElementException    [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]          iterator.next();    iterator.next();  Iterator  iterator  =  this.options.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	                iterator.next();        iterator.next();    Iterator  iterator  =  this.options.listIterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	add
123	[BUG]  [BUGGY]  Ilerator  iterator  =  tokenList.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Ilerator  iterator  =  tokenList.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Ilerator  iterator  =  tokenList.listIterator();	          iterator.next();    Iterator    iterator    =    tokenList.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
124	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  options;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  options;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  options;	  Iterator    <    String>    iterator    =(this.options!=    null)?    this.options.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
125	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.listIterator(this.options);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.listIterator(this.options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.listIterator(this.options);	  Iterator    iterator    =    this.options.listIterator(stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
126	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.listIterator(opt,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.listIterator(opt,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.listIterator(opt,  stopAtNonOption);	  Iterator    iterator    =    this.options.listIterator(stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
127	[BUG]  [BUGGY]  Iterator  iterator  =(this.options  ==  null)?  this.options.iterator()  :  options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options  ==  null)?  this.options.iterator()  :  options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options  ==  null)?  this.options.iterator()  :  options.iterator();	  Iterator    iterator    =(this.options!=    null)?    options.iterator()    :    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
128	[BUG]  [BUGGY]  while(iterator.hasNext())  {  Iterator  iterator  =  this.options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  Iterator  iterator  =  this.options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  Iterator  iterator  =  this.options.iterator();	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	31	None	replace
129	[BUG]  [BUGGY]  while(iterator.hasNext()  &&  iterator.hasNext())  {  ListIterator  iterator  =  this.options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext()  &&  iterator.hasNext())  {  ListIterator  iterator  =  this.options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext()  &&  iterator.hasNext())  {  ListIterator  iterator  =  this.options.iterator();	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	31	None	replace
130	[BUG]  [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  opt);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption,  opt);	  Iterator    iterator    =    Arrays.asList(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
131	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  this.stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  this.stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  null,  this.stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    null,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
132	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  options;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  options;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  options;	  Iterator    iterator    =(this.options!=    null)?    this.options.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
133	[BUG]  [BUGGY]  Ilerator  iterator  =  this.options.iterator(stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Ilerator  iterator  =  this.options.iterator(stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Ilerator  iterator  =  this.options.iterator(stopAtNonOption);	  Ilerator    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
134	[BUG]  [BUGGY]  while(iterator.hasNext()  ||  iterator.next())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext()  ||  iterator.next())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext()  ||  iterator.next())  {	  while    (iterator.hasNext()    &&    iterator.next())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	34	None	replace
135	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  opt);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption,  opt);	  Option    cmd    =    options.getOption(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
136	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.opts.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.opts.listIterator();	  Iterator    iterator    =    tokenList.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
137	[BUG]  [BUGGY]  while(iterator.hasNext())  {  if(iterator.hasNext())  {  iterator  =  this.options.iterator();  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  if(iterator.hasNext())  {  iterator  =  this.options.iterator();  }  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  if(iterator.hasNext())  {  iterator  =  this.options.iterator();  }	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
138	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
139	[BUG]  [BUGGY]  ListIterator  <  String>  iterator  =  options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  ListIterator  <  String>  iterator  =  options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	ListIterator  <  String>  iterator  =  options.iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
140	[BUG]  [BUGGY]  Ilerator  iterator  =  this.options.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Ilerator  iterator  =  this.options.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Ilerator  iterator  =  this.options.listIterator();	  Iterator    iterator    =    options.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
141	[BUG]  [BUGGY]  iterator  =  this.requiredOptions.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator  =  this.requiredOptions.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	iterator  =  this.requiredOptions.iterator();	          iterator.next();    Iterator    iterator    =    this.requiredOptions.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
142	[BUG]  [BUGGY]  Ilerator  iterator  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Ilerator  iterator  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Ilerator  iterator  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  Iterator    iterator    =    Arrays.asList(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
143	[BUG]  [BUGGY]  Iterator  iterator  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));	  Iterator    iterator    =    Arrays.asList(this.options,    arguments,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
144	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.options,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.options,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  this.options,  iterator);	  Option    cmd    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
145	[BUG]  [BUGGY]  iterator  =  this.requiredOptions.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator  =  this.requiredOptions.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	iterator  =  this.requiredOptions.listIterator();	          iterator.next();    Iterator    iterator    =    this.requiredOptions.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
146	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(tokenList);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(tokenList);  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(tokenList);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
147	[BUG]  [BUGGY]  iterator  =  this.options.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator  =  this.options.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	iterator  =  this.options.listIterator();	          iterator.next();    Iterator    iterator    =    this.options.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
148	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  null,  iterator);	  Option    cmd    =    options.getOption(this.options,    null,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
149	[BUG]  [BUGGY]  while(iterator.hasNext())  {  iterator  =  iterator.next();  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  iterator  =  iterator.next();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  iterator  =  iterator.next();	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  incompatible  types	32	None	replace
150	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.requiredOptions.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  this.requiredOptions.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =  this.requiredOptions.iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
151	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.values().listIterator(this.options);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.values().listIterator(this.options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.values().listIterator(this.options);	  Iterator    iterator    =    this.options.values().listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
152	[BUG]  [BUGGY]  Option  cmd  =(Option)iterator.get();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =(Option)iterator.get();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =(Option)iterator.get();	  Option    cmd    =(Option)iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
153	[BUG]  [BUGGY]  while(iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.next())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.next())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.next())  {	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    if(iterator.hasNext()    ||    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
154	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  iterator;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  iterator;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  iterator;	  Iterator    iterator    =(this.options!=    null)?    options.iterator()    :    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
155	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.options,  options,  iterator);	  Option    cmd    =    this.options.getOption(this.options,    options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
156	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(tokenList);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(tokenList);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(tokenList);	  Option    cmd    =    this.options.getOption(options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
157	[BUG]  [BUGGY]  ListIterator  iterator  =  this.options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  ListIterator  iterator  =  this.options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	ListIterator  iterator  =  this.options.iterator();	  Ilerator    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
158	[BUG]  [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  new  HashSet  <  String>();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  new  HashSet  <  String>();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  new  HashSet  <  String>();	  Iterator    iterator    =(this.requiredOptions!=    null)?    this.requiredOptions.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
159	[BUG]  [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  that.requiredOptions.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  that.requiredOptions.iterator()  :  null;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.requiredOptions!=  null)?  that.requiredOptions.iterator()  :  null;	  Iterator    iterator    =(this.requiredOptions!=    null)?    this.requiredOptions.iterator()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
160	[BUG]  [BUGGY]  while(iterator.hasNext())  {  Object  iterator  =  this.options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  Object  iterator  =  this.options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  Object  iterator  =  this.options.iterator();	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	24	None	replace
161	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.values().iterator()  :  iterator;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.values().iterator()  :  iterator;  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.values().iterator()  :  iterator;	  Iterator    <    String>    iterator    =    this.options.values().iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
162	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  blockAtNonOption,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(this.options,  blockAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  blockAtNonOption,  iterator);	  Option    cmd    =    options.getOption(this.options,    blockAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
163	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =(Option)iterator.next();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =(Option)iterator.next();	  Option    option    =    iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
164	[BUG]  [BUGGY]  Iterator  iterator  =  this.params.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.params.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.params.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
165	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.listIterator(tokenList);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.listIterator(tokenList);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.listIterator(tokenList);	  Iterator    iterator    =    this.options.listIterator(stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
166	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.listIterator(this.stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.options.listIterator(this.stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.listIterator(this.stopAtNonOption);	  Iterator    iterator    =    this.options.listIterator(stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
167	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(this.stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.stopAtNonOption);	  Option    cmd    =    options.getOption(this.options,    this.stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
168	[BUG]  [BUGGY]  while(iterator.hasNext())  {  Object  <  String>  iterator  =  this.options.iterator();  [CE]  type  Object  does  not  take  parameters  [FE]        ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext())  {  Object  <  String>  iterator  =  this.options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext())  {  Object  <  String>  iterator  =  this.options.iterator();	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  type  Object  does  not  take  parameters	48	None	replace
169	[BUG]  [BUGGY]  Iterator  iterator  =  this.tables.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        NoSuchElementException      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.tables.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.tables.iterator();	  Iterator    iterator    =    tokenList.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
170	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(opt,  options,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  this.options.getOption(opt,  options,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(opt,  options,  stopAtNonOption);	  Option    cmd    =    this.options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
171	[BUG]  [BUGGY]  while(iterator.hasNext()  &&  iterator.next())  {  Iterator  iterator  =  this.options.iterator();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          ComparisonFailure      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext()  &&  iterator.next())  {  Iterator  iterator  =  this.options.iterator();  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while(iterator.hasNext()  &&  iterator.next())  {  Iterator  iterator  =  this.options.iterator();	  while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	31	None	replace
