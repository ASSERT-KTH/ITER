bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  arguments,  stopAtNonOption);	      Option    cmd    =    options.getOption(this.options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
2	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(options,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  this.options.getOption(options,  stopAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(options,  stopAtNonOption);	      Option    cmd    =    options.getOption(this.options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
3	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  argument,  stopAtNonOption);	      Option    cmd    =    options.getOption(this.options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
4	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  options.getOption(this.options,  null,  stopAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  null,  stopAtNonOption);	      Option    cmd    =    options.getOption(this.options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
5	[BUG]  [BUGGY]  Iterator  iterator  =  tokenList.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]    NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  tokenList.iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  tokenList.iterator();	      iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
6	[BUG]  [BUGGY]  iterator.remove();  [CE]  invalid  method  declaration;  return  type  required  [FE]      NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  iterator.remove();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	iterator.remove();	      iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
7	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  this.options.getOption(options);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(options);	      Option    cmd    =    options.getOption(this.options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
8	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  iterator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  options.getOption(this.options,  iterator);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  iterator);	      Option    cmd    =    options.getOption(this.options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
9	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.stopAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  this.stopAtNonOption);	      Option    cmd    =    options.getOption(this.options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
10	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]      iterator.next();  iterator.next();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	add	        iterator.next();    iterator.next();	  	compilable	  [FE]  NoSuchElementException  	8	2	add
11	[BUG]  [BUGGY]      iterator.next();  iterator.next();  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]      iterator.next();  iterator.next();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	        iterator.next();    iterator.next();	  	compilable	  [FE]  NoSuchElementException  	8	2	add
12	[BUG]  [BUGGY]      iterator.next();  Iterator  iterator  =  this.options.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]      iterator.next();  Iterator  iterator  =  this.options.iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	        iterator.next();    Iterator  iterator  =  this.options.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
13	[BUG]  [BUGGY]      iterator.next();  Iterator  iterator.next();  [CE]  ';'  expected  [FE]        NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]      iterator.next();  Iterator  iterator.next();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	        iterator.next();    Iterator  iterator.next();	  	non-compiled	[CE]  ';'  expected	8	None	add
14	[BUG]  [BUGGY]      iterator.next();  Iterator  iterator  =  this.options.listIterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]      iterator.next();  Iterator  iterator  =  this.options.listIterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	        iterator.next();    Iterator  iterator  =  this.options.listIterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
15	[BUG]  [BUGGY]      iterator.next();  Iterator  iterator  =  this.requiredOptions.iterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]      iterator.next();  Iterator  iterator  =  this.requiredOptions.iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	        iterator.next();    Iterator  iterator  =  this.requiredOptions.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
16	[BUG]  [BUGGY]  Iterator  iterator  =  arguments.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  arguments.iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  arguments.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
17	[BUG]  [BUGGY]  Ilerator  iterator  =  this.options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Ilerator  iterator  =  this.options.iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Ilerator  iterator  =  this.options.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
18	[BUG]  [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  Arrays.asList(this.options,  arguments,  stopAtNonOption);	      Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
19	[BUG]  [BUGGY]  Option  cmd  =(Option)iterator.next();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =(Option)iterator.next();  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =(Option)iterator.next();	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
20	[BUG]  [BUGGY]  Option  option  =  iterator.next();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  option  =  iterator.next();  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  iterator.next();	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
21	[BUG]  [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  options.keySet().iterator();	      Iterator    iterator    =    this.options.keySet().iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
22	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.values().iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  this.options.values().iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.values().iterator();	      Iterator    iterator    =    this.options.keySet().iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
23	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  while  (iterator.hasNext()  &&  iterator.hasNext())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  while  (iterator.hasNext()  &&  iterator.hasNext())  {  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    &&    iterator.hasNext())    {    while  (iterator.hasNext()  &&  iterator.hasNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
24	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  Iterator  iterator  =  this.options.iterator();  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  Iterator  iterator  =  this.options.iterator();  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    &&    iterator.hasNext())    {    Iterator  iterator  =  this.options.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
25	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  Iterator  iterator  =  options.iterator();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  Iterator  iterator  =  options.iterator();  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    &&    iterator.hasNext())    {    Iterator  iterator  =  options.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
26	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  &&  iterator.hasNext())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  &&  iterator.hasNext())  {  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    &&    iterator.hasNext())    {    &&  iterator.hasNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
27	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =  options.iterator();	      Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
28	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();	      Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
29	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  null;  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  null;	      Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
30	[BUG]  [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  while  (iterator.hasNext()  ||  iterator.hasNext())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  while  (iterator.hasNext()  ||  iterator.hasNext())  {  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    ||    iterator.hasNext())    {    while  (iterator.hasNext()  ||  iterator.hasNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
31	[BUG]  [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  Iterator  iterator  =  this.options.iterator();  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  Iterator  iterator  =  this.options.iterator();  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator  iterator  =  this.options.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
32	[BUG]  [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  Iterator  <  String>  iterator  =  this.options.iterator();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  Iterator  <  String>  iterator  =  this.options.iterator();  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator  <  String>  iterator  =  this.options.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
33	[BUG]  [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  Iterator  iterator  =  this.options.iterator();  while  (iterator.hasNext()  ||  iterator.hasNext())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  Iterator  iterator  =  this.options.iterator();  while  (iterator.hasNext()  ||  iterator.hasNext())  {  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator  iterator  =  this.options.iterator();  while  (iterator.hasNext()  ||  iterator.hasNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
34	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.next())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  &&  iterator.next())  {  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while  (iterator.hasNext()  &&  iterator.next())  {	  while    (iterator.hasNext()    &&    iterator.hasNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	2	None	replace
35	[BUG]  [BUGGY]  Iterator  iterator  =  options.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  options.listIterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  options.listIterator();	      Iterator    iterator    =    this.options.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
36	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.values().listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  this.options.values().listIterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.values().listIterator();	      Iterator    iterator    =    this.options.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
37	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.keySet().listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  this.options.keySet().listIterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.keySet().listIterator();	      Iterator    iterator    =    this.options.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
38	[BUG]  [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  Iterator  iterator  =  options.iterator();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  Iterator  iterator  =  options.iterator();  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    ||    iterator.hasNext())    {    Iterator  iterator  =  options.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
39	[BUG]  [BUGGY]  Iterator  iterator  =  tokenList.listIterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]    NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  tokenList.listIterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  tokenList.listIterator();	      iterator.next();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
40	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  blockAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  options.getOption(this.options,  blockAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  blockAtNonOption);	      Option    cmd    =    options.getOption(this.options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
41	[BUG]  [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();	      Iterator    iterator    =    this.requiredOptions.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
42	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  options.getOption(opt);  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(opt);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  option  =  options.getOption(opt);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
44	[BUG]  [BUGGY]      iterator.next();  Iterator  iterator  =  tokenList.listIterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]      iterator.next();  Iterator  iterator  =  tokenList.listIterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	        iterator.next();    Iterator  iterator  =  tokenList.listIterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
45	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  stopAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.options,  stopAtNonOption);	      Option    cmd    =    options.getOption(this.options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
46	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.options.values().iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  <  String>  iterator  =  this.options.values().iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =  this.options.values().iterator();	      Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
47	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.options.keySet().iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  <  String>  iterator  =  this.options.keySet().iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  <  String>  iterator  =  this.options.keySet().iterator();	      Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
48	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  Iterator  <  String>  iterator  =  this.options.iterator();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  Iterator  <  String>  iterator  =  this.options.iterator();  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    &&    iterator.hasNext())    {    Iterator  <  String>  iterator  =  this.options.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
49	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  options.getOption(this.options,  this.options);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  options.getOption(this.options,  this.options);	      Option    cmd    =    options.getOption(this.options);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
50	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();	      Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
51	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null?  this.options.iterator()  :  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =(this.options!=  null?  this.options.iterator()  :  null);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options!=  null?  this.options.iterator()  :  null);	      Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
52	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  null;  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.options!=  null)?  this.options.iterator()  :  null;	      Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
53	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options,  stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Option  cmd  =  this.options.getOption(this.options,  options,  stopAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Option  cmd  =  this.options.getOption(this.options,  options,  stopAtNonOption);	      Option    cmd    =    options.getOption(this.options,    stopAtNonOption);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
54	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  While  (iterator.hasNext()  &&  iterator.hasNext())  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  While  (iterator.hasNext()  &&  iterator.hasNext())  {  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    &&    iterator.hasNext())    {    While  (iterator.hasNext()  &&  iterator.hasNext())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
55	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  while  (iterator.hasNext()  &&  Iterator.hasNext())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  &&  iterator.hasNext())  {  while  (iterator.hasNext()  &&  Iterator.hasNext())  {  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    &&    iterator.hasNext())    {    while  (iterator.hasNext()  &&  Iterator.hasNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
56	[BUG]  [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  While  (iterator.hasNext()  ||  iterator.hasNext())  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  While  (iterator.hasNext()  ||  iterator.hasNext())  {  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    ||    iterator.hasNext())    {    While  (iterator.hasNext()  ||  iterator.hasNext())  {	  	non-compiled	[CE]  ';'  expected	3	None	add
57	[BUG]  [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.hasNext())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  while  (iterator.hasNext()  ||  iterator.hasNext())  {  if(iterator.hasNext()  ||  iterator.hasNext())  {  [BUGGY]    {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	while    (iterator.hasNext()    ||    iterator.hasNext())    {    if(iterator.hasNext()  ||  iterator.hasNext())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
58	[BUG]  [BUGGY]      iterator.next();  Iterator  iterator  =  this.requiredOptions.listIterator();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    NoSuchElementException    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]      iterator.next();  Iterator  iterator  =  this.requiredOptions.listIterator();  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	        iterator.next();    Iterator  iterator  =  this.requiredOptions.listIterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
59	[BUG]  [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  null;  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  null;	      Iterator    iterator    =    this.requiredOptions.iterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
60	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.listIterator(stopAtNonOption);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();      [BUGGY]  Iterator  iterator  =  this.options.listIterator(stopAtNonOption);  [BUGGY]    while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	160	161	2	replace	Iterator  iterator  =  this.options.listIterator(stopAtNonOption);	      Iterator    iterator    =    this.options.listIterator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
