bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  requiredOptions.length);  [CE]  cannot  find  symbol  length  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  requiredOptions.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  requiredOptions.length);	  cmd    =    new    CommandLine(requiredOptions,    str.length);    	non-compiled	[CE]  cannot  find  symbol  length	30	None	replace
2	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  option.length);  [CE]  cannot  find  symbol  option  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  option.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  option.length);	  cmd    =    new    CommandLine(requiredOptions,    str.length);    	non-compiled	[CE]  cannot  find  symbol  option	30	None	replace
3	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  options.length);  [CE]  cannot  find  symbol  length  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  options.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  options.length);	  cmd    =    new    CommandLine(requiredOptions,    str.length);    	non-compiled	[CE]  cannot  find  symbol  length	30	None	replace
4	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions.length);  [CE]  cannot  find  symbol  length  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  requiredOptions.length);	  cmd    =    new    CommandLine(requiredOptions,    str.length);    	non-compiled	[CE]  cannot  find  symbol  length	30	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  requiredOptions);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(opt,  requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(opt,  requiredOptions);	  Option    option    =    options.getOption(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  opt	38	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options,  requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(options,  requiredOptions);	  Option    option    =    options.getOption(requiredOptions);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	38	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  neededOptions);  [CE]  cannot  find  symbol  opt  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(opt,  neededOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(opt,  neededOptions);	  Option    option    =    options.getOption(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  opt	38	None	replace
8	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.length  -  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.length  -  1);	  cmd    =    new    CommandLine(requiredOptions.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
9	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt.length  -  1);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt.length  -  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt.length  -  1);	  cmd    =    new    CommandLine(requiredOptions.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  opt	29	None	replace
10	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions.length  -  2);  [CE]  cannot  find  symbol  length  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions.length  -  2);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions.length  -  2);	  cmd    =    new    CommandLine(requiredOptions.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
11	[BUG]  [BUGGY]  Option  cmd  =(Option)options.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =(Option)options.clone();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)options.clone();	  Option    cmd    =(Option)opt.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	42	None	replace
12	[BUG]  [BUGGY]  Option  cmd  =(Option)requiredOptions.clone();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =(Option)requiredOptions.clone();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)requiredOptions.clone();	  Option    cmd    =(Option)opt.clone();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
13	[BUG]  [BUGGY]  Option  cmd  =(Option)option.clone();  [CE]  cannot  find  symbol  option  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =(Option)option.clone();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)option.clone();	  Option    cmd    =(Option)opt.clone();    	non-compiled	[CE]  cannot  find  symbol  option	42	None	replace
14	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  stopAtNonOption,  requiredOptions);  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt,  stopAtNonOption,  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  stopAtNonOption,  requiredOptions);	  cmd    =    new    CommandLine(stopAtNonOption,    requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  opt	39	None	replace
15	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption,  requiredOptions);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption,  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  stopAtNonOption,  requiredOptions);	  cmd    =    new    CommandLine(stopAtNonOption,    requiredOptions);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	39	None	replace
16	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  stopAtNonOption,  requiredOptions);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(t,  stopAtNonOption,  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t,  stopAtNonOption,  requiredOptions);	  cmd    =    new    CommandLine(stopAtNonOption,    requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  t	39	None	replace
17	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str.length);  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(str.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(str.length);	  cmd    =    new    CommandLine(t.length);    	non-compiled	[CE]  cannot  find  symbol  str	41	None	replace
18	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions.toString());  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions.toString());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions.toString());	  cmd    =    new    CommandLine(opt.toString());    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	12	None	replace
19	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  opt);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(t,  opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(t,  opt);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  t	58	None	replace
20	[BUG]  [BUGGY]  Option  opt  =  options.getOption(opt,  requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(opt,  requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(opt,  requiredOptions);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	58	None	replace
21	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str,  opt);  [CE]  cannot  find  symbol  str  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(str,  opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(str,  opt);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  str	58	None	replace
22	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  option);  [CE]  cannot  find  symbol  option  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  option);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  option);	  cmd    =    new    CommandLine(requiredOptions,    str);    	non-compiled	[CE]  cannot  find  symbol  option	53	None	replace
23	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  t);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  t);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  t);	  cmd    =    new    CommandLine(requiredOptions,    str);    	non-compiled	[CE]  cannot  find  symbol  t	53	None	replace
24	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  options);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  options);	  cmd    =    new    CommandLine(requiredOptions,    str);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	53	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  options);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(opt,  options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(opt,  options);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  opt	23	None	replace
26	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  options.length);  [CE]  cannot  find  symbol  length  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  options.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  options.length);	  cmd    =    new    CommandLine(options.length);    	non-compiled	[CE]  cannot  find  symbol  length	28	None	replace
27	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.length,  requiredOptions.length);  [CE]  cannot  find  symbol  length  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.length,  requiredOptions.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.length,  requiredOptions.length);	  cmd    =    new    CommandLine(options.length);    	non-compiled	[CE]  cannot  find  symbol  length	28	None	replace
28	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.length  +  1);  [CE]  cannot  find  symbol  length  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.length  +  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.length  +  1);	  cmd    =    new    CommandLine(options.length);    	non-compiled	[CE]  cannot  find  symbol  length	28	None	replace
29	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(t.getParser());  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.parseOption(t.getParser());  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.parseOption(t.getParser());	  Option    cmd    =    options.parseOption(opt.getParser());    	non-compiled	[CE]  cannot  find  symbol  t	37	None	replace
30	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(opt.getParser(),  str);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.parseOption(opt.getParser(),  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.parseOption(opt.getParser(),  str);	  Option    cmd    =    options.parseOption(opt.getParser());    	non-compiled	[CE]  cannot  find  symbol  opt	37	None	replace
31	[BUG]  [BUGGY]  Option  cmd  =  option.parseOption(opt.getParser());  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  option.parseOption(opt.getParser());  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  option.parseOption(opt.getParser());	  Option    cmd    =    options.parseOption(opt.getParser());    	non-compiled	[CE]  cannot  find  symbol  opt	37	None	replace
32	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  options,  requiredOptions);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  options,  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  options,  requiredOptions);	  cmd    =    new    CommandLine(options,    requiredOptions);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	2	None	replace
33	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  options,  requiredOptions);  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt,  options,  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  options,  requiredOptions);	  cmd    =    new    CommandLine(options,    requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  opt	2	None	replace
34	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  option,  requiredOptions);  [CE]  cannot  find  symbol  option  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  option,  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  option,  requiredOptions);	  cmd    =    new    CommandLine(options,    requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  option	2	None	replace
35	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  opt,  requiredOptions);  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  opt,  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  opt,  requiredOptions);	  cmd    =    new    CommandLine(options,    requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  opt	2	None	replace
36	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  requiredOptions);  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(str,  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(str,  requiredOptions);	  cmd    =    new    CommandLine(t,    requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  str	3	None	replace
37	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  str,  requiredOptions,  stopAtNonOption);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(t,  str,  requiredOptions,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t,  str,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(t,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  t	26	None	replace
38	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  stopAtNonOption);  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(opt,  stopAtNonOption);	  Option    cmd    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  opt	48	None	replace
39	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(options,  stopAtNonOption);	  Option    cmd    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	48	None	replace
40	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(requiredOptions,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(requiredOptions,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(requiredOptions,  stopAtNonOption);	  Option    cmd    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	48	None	replace
41	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  stopAtNonOption);  [CE]  cannot  find  symbol  t  [FE]                          ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(t,  stopAtNonOption);	  Option    cmd    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  t	48	None	replace
42	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  options.size());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  options.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  options.size());	  cmd    =    new    CommandLine(options,    requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
43	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions,  options.size());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions,  options.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  requiredOptions,  options.size());	  cmd    =    new    CommandLine(options,    requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
44	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  options.size()  -  1);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  options.size()  -  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  options.size()  -  1);	  cmd    =    new    CommandLine(options,    requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
45	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str.size());  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(str.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(str.size());	  cmd    =    new    CommandLine(opt.size());    	non-compiled	[CE]  cannot  find  symbol  str	44	None	replace
46	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOption.size());  [CE]  cannot  find  symbol  requiredOption  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOption.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOption.size());	  cmd    =    new    CommandLine(opt.size());    	non-compiled	[CE]  cannot  find  symbol  requiredOption	44	None	replace
47	[BUG]  [BUGGY]  Option  cmd  =  t.getParser();  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  t.getParser();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  t.getParser();	  Option    cmd    =    option.getParser();    	non-compiled	[CE]  cannot  find  symbol  t	36	None	replace
48	[BUG]  [BUGGY]  Option  cmd  =  this.options,  options.getCmd();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  this.options,  options.getCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  this.options,  options.getCmd();	  Option    cmd    =    this.options.getCmd();    	non-compiled	[CE]  ';'  expected	54	None	replace
49	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.size()  -  1);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.size()  -  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.size()  -  1);	  cmd    =    new    CommandLine(requiredOptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
50	[BUG]  [BUGGY]  cmd  =  new  CommandLine(params.size()  -  1);  [CE]  cannot  find  symbol  params  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(params.size()  -  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(params.size()  -  1);	  cmd    =    new    CommandLine(requiredOptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  params	19	None	replace
51	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  options,  requiredOptions,  stopAtNonOption);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  options,  requiredOptions,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  options,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(options,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	24	None	replace
52	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  options,  requiredOptions,  stopAtNonOption);  [CE]  cannot  find  symbol  opt  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt,  options,  requiredOptions,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  options,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(options,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  opt	24	None	replace
53	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  option,  requiredOptions,  stopAtNonOption);  [CE]  cannot  find  symbol  option  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  option,  requiredOptions,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  option,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(options,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  option	24	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  option);  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(opt,  option);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(opt,  option);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  opt	49	None	replace
55	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(option,  requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(option,  requiredOptions);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	49	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  option);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t,  option);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(t,  option);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  t	49	None	replace
57	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  options);  [CE]  cannot  find  symbol  opt  [FE]                          ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(opt,  options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(opt,  options);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  opt	17	None	replace
58	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(options,  requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(options,  requiredOptions);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	17	None	replace
59	[BUG]  [BUGGY]  Option[]  arguments  =  t.getArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option[]  arguments  =  t.getArguments();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  t.getArguments();	  Option[]    arguments    =    option.getArguments();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	replace
60	[BUG]  [BUGGY]  Arguments[]  arguments  =  opt.getArguments();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Arguments[]  arguments  =  opt.getArguments();  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Arguments[]  arguments  =  opt.getArguments();	          Arguments[]    arguments    =    options.getArguments();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
61	[BUG]  [BUGGY]  Arguments[]  arguments  =  option.getArguments();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Arguments[]  arguments  =  option.getArguments();  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Arguments[]  arguments  =  option.getArguments();	          Arguments[]    arguments    =    options.getArguments();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
62	[BUG]  [BUGGY]  Arguments[]  arguments  =  options.options.getArguments();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Arguments[]  arguments  =  options.options.getArguments();  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Arguments[]  arguments  =  options.options.getArguments();	          Arguments[]    arguments    =    options.getArguments();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
63	[BUG]  [BUGGY]  Option[]  arguments  =  options.getRequiredOptions();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option[]  arguments  =  options.getRequiredOptions();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  options.getRequiredOptions();	  Option[]    arguments    =    options.getOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	replace
64	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  options.size()  -  1);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  options.size()  -  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  options.size()  -  1);	  cmd    =    new    CommandLine(requiredOptions,    options.size());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
65	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  requiredOptions.size());  [CE]  cannot  find  symbol  opt  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt,  requiredOptions.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  requiredOptions.size());	  cmd    =    new    CommandLine(requiredOptions,    options.size());    	non-compiled	[CE]  cannot  find  symbol  opt	21	None	replace
66	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  neededOptions.size());  [CE]  cannot  find  symbol  neededOptions  [FE]                          ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  neededOptions.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  neededOptions.size());	  cmd    =    new    CommandLine(requiredOptions,    options.size());    	non-compiled	[CE]  cannot  find  symbol  neededOptions	21	None	replace
67	[BUG]  [BUGGY]  Option  cmd  =  opt.getArgumentCmd();  [CE]  cannot  find  symbol  opt  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  opt.getArgumentCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  opt.getArgumentCmd();	  Option    cmd    =    options.getArgumentCmd();    	non-compiled	[CE]  cannot  find  symbol  opt	46	None	replace
68	[BUG]  [BUGGY]  Option  cmd  =  option.getArgumentCmd();  [CE]  cannot  find  symbol  option  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  option.getArgumentCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  option.getArgumentCmd();	  Option    cmd    =    options.getArgumentCmd();    	non-compiled	[CE]  cannot  find  symbol  option	46	None	replace
69	[BUG]  [BUGGY]  Option  cmd  =  t.getArgumentCmd();  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  t.getArgumentCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  t.getArgumentCmd();	  Option    cmd    =    options.getArgumentCmd();    	non-compiled	[CE]  cannot  find  symbol  t	46	None	replace
70	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(str);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	56	None	replace
71	[BUG]  [BUGGY]  Option  opt  =  options.getOption(requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(requiredOptions);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	56	None	replace
72	[BUG]  [BUGGY]  Option  opt  =  options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(options);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	56	None	replace
73	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(this.options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(this.options);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	56	None	replace
74	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  str.toString());  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  str.toString());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  str.toString());	  cmd    =    new    CommandLine(options.toString());    	non-compiled	[CE]  cannot  find  symbol  str	13	None	replace
75	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.toString(),  arguments);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.toString(),  arguments);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.toString(),  arguments);	  cmd    =    new    CommandLine(options.toString());    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	13	None	replace
76	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.toString(),  str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.toString(),  str);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.toString(),  str);	  cmd    =    new    CommandLine(options.toString());    	non-compiled	[CE]  cannot  find  symbol  str	13	None	replace
77	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.toString(),  options);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.toString(),  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.toString(),  options);	  cmd    =    new    CommandLine(options.toString());    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	13	None	replace
78	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  options);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  options);	  cmd    =    new    CommandLine(options);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	4	None	replace
79	[BUG]  [BUGGY]  Option  cmd  =  t.getCmd();  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  t.getCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  t.getCmd();	  Option    cmd    =    option.getCmd();    	non-compiled	[CE]  cannot  find  symbol  t	33	None	replace
80	[BUG]  [BUGGY]  Option  cmd  =  opt.getOptionCmd();  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  opt.getOptionCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  opt.getOptionCmd();	  Option    cmd    =    options.getOptionCmd();    	non-compiled	[CE]  cannot  find  symbol  opt	34	None	replace
81	[BUG]  [BUGGY]  Option  cmd  =  option.getOptionCmd();  [CE]  cannot  find  symbol  option  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  option.getOptionCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  option.getOptionCmd();	  Option    cmd    =    options.getOptionCmd();    	non-compiled	[CE]  cannot  find  symbol  option	34	None	replace
82	[BUG]  [BUGGY]  Option  cmd  =  t.getOptionCmd();  [CE]  cannot  find  symbol  t  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  t.getOptionCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  t.getOptionCmd();	  Option    cmd    =    options.getOptionCmd();    	non-compiled	[CE]  cannot  find  symbol  t	34	None	replace
83	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  this.options);  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(opt,  this.options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(opt,  this.options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  opt	57	None	replace
84	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  opt);  [CE]  cannot  find  symbol  opt  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(this.options,  opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(this.options,  opt);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  opt	57	None	replace
85	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  this.options.getOption(options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  this.options.getOption(options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	57	None	replace
86	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(this.options,  requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(this.options,  requiredOptions);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	57	None	replace
87	[BUG]  [BUGGY]  Option  cmd  =  this.options,  options.getParser();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  this.options,  options.getParser();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  this.options,  options.getParser();	  Option    cmd    =    this.options.getParser();    	non-compiled	[CE]  ';'  expected	47	None	replace
88	[BUG]  [BUGGY]  cmd  =  new  CommandLine(String.valueOf(opt.toString()));  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(String.valueOf(opt.toString()));  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(String.valueOf(opt.toString()));	  cmd    =    new    CommandLine(String.toString());    	non-compiled	[CE]  cannot  find  symbol  opt	52	None	replace
89	[BUG]  [BUGGY]  cmd  =  new  CommandLine(String.valueOf(t.toString()));  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(String.valueOf(t.toString()));  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(String.valueOf(t.toString()));	  cmd    =    new    CommandLine(String.toString());    	non-compiled	[CE]  cannot  find  symbol  t	52	None	replace
90	[BUG]  [BUGGY]  cmd  =  new  CommandLine(String.valueOf(options.toString()));  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(String.valueOf(options.toString()));  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(String.valueOf(options.toString()));	  cmd    =    new    CommandLine(String.toString());    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	52	None	replace
91	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.size(),  requiredOptions);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.size(),  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.size(),  requiredOptions);	  cmd    =    new    CommandLine(options.size());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
92	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt.length  +  1);  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt.length  +  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt.length  +  1);	  cmd    =    new    CommandLine(requiredOptions.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  opt	31	None	replace
93	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions.length  +  2);  [CE]  cannot  find  symbol  length  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions.length  +  2);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions.length  +  2);	  cmd    =    new    CommandLine(requiredOptions.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
94	[BUG]  [BUGGY]  Option  options  =  opt.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  options  =  opt.getOptions();  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  options  =  opt.getOptions();	          Option    options    =    options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	43	None	replace
95	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  options  =  option.getOptions();	          Option    options    =    options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	43	None	replace
96	[BUG]  [BUGGY]  Options  options  =  opt.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Options  options  =  opt.getOptions();  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Options  options  =  opt.getOptions();	          Option    options    =    options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	43	None	replace
97	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  requiredOptions.size());  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(str,  requiredOptions.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(str,  requiredOptions.size());	  cmd    =    new    CommandLine(t,    requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol  str	50	None	replace
98	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions.size()  -  1);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions.size()  -  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t,  requiredOptions.size()  -  1);	  cmd    =    new    CommandLine(t,    requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol  t	50	None	replace
99	[BUG]  [BUGGY]  Option  cmd  =(Option)this.options.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =(Option)this.options.clone();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)this.options.clone();	  Option    cmd    =(Option)this.options.getValue();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	59	None	replace
100	[BUG]  [BUGGY]  Option  cmd  =(Option)this.options.getKey();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =(Option)this.options.getKey();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)this.options.getKey();	  Option    cmd    =(Option)this.options.getValue();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
101	[BUG]  [BUGGY]  Option[]  arguments  =  opt.getParameters();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option[]  arguments  =  opt.getParameters();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  opt.getParameters();	  Option[]    arguments    =    opt.getArguments();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
102	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  requiredOptions);  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(opt,  requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(opt,  requiredOptions);	  Option    cmd    =    options.getOption(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  opt	14	None	replace
103	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  requiredOptions);  [CE]  cannot  find  symbol  t  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(t,  requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(t,  requiredOptions);	  Option    cmd    =    options.getOption(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  t	14	None	replace
104	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  opt);  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  opt);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  opt);	  cmd    =    new    CommandLine(opt,    requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  opt	1	None	replace
105	[BUG]  [BUGGY]  Option  opt  =  options.getParser();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getParser();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getParser();	  Option    cmd    =    opt.getParser();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
106	[BUG]  [BUGGY]  Option  cmd  =  this.options.getArgumentCmd();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  this.options.getArgumentCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  this.options.getArgumentCmd();	  Option    cmd    =    options.getArgumentCmd();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
107	[BUG]  [BUGGY]  cmd  =  new  CommandLine(stopAtNonOption,  requiredOptions,  opt);  [CE]  cannot  find  symbol  opt  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(stopAtNonOption,  requiredOptions,  opt);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(stopAtNonOption,  requiredOptions,  opt);	  cmd    =    new    CommandLine(opt,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  opt	25	None	replace
108	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t.size());  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(t.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t.size());	  cmd    =    new    CommandLine(opt.size());    	non-compiled	[CE]  cannot  find  symbol  t	44	None	replace
109	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  options.size());  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt,  options.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  options.size());	  cmd    =    new    CommandLine(options,    requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol  opt	20	None	replace
110	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  neededOptions);  [CE]  cannot  find  symbol  neededOptions  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(options,  neededOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(options,  neededOptions);	  Option    cmd    =    options.getOption(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  neededOptions	14	None	replace
111	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(options.getParser());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.parseOption(options.getParser());  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.parseOption(options.getParser());	  Option    cmd    =    options.parseOption(opt.getParser());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
112	[BUG]  [BUGGY]  Option  cmd  =  opt.parseOption(options.getParser());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  opt.parseOption(options.getParser());  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  opt.parseOption(options.getParser());	  Option    cmd    =    options.parseOption(opt.getParser());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
113	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t.length  +  1);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(t.length  +  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t.length  +  1);	  cmd    =    new    CommandLine(requiredOptions.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  t	31	None	replace
114	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  option.length);  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  option.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  option.length);	  cmd    =    new    CommandLine(options.length);    	non-compiled	[CE]  cannot  find  symbol  option	28	None	replace
115	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t.length  -  1);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(t.length  -  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t.length  -  1);	  cmd    =    new    CommandLine(requiredOptions.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  t	29	None	replace
116	[BUG]  [BUGGY]  Option  cmd  =  this.options.getOptionCmd();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  this.options.getOptionCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  this.options.getOptionCmd();	  Option    cmd    =    options.getOptionCmd();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
117	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.size()  -  2);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.size()  -  2);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.size()  -  2);	  cmd    =    new    CommandLine(options.size());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
118	[BUG]  [BUGGY]  Option  options  =  options.getOptions(t);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  options  =  options.getOptions(t);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  options  =  options.getOptions(t);	          Option    options    =    options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	43	None	replace
119	[BUG]  [BUGGY]  Option  opt  =  options.getCmd();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getCmd();	  Option    cmd    =    opt.getCmd();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
120	[BUG]  [BUGGY]  Option  option  =  options.getOptionCmd();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOptionCmd();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOptionCmd();	  Option    cmd    =    option.getCmd();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
121	[BUG]  [BUGGY]  Option  opt  =  options.getOption(options,  str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(options,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(options,  str);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  str	58	None	replace
122	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.toString(),  this.options);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.toString(),  this.options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.toString(),  this.options);	  cmd    =    new    CommandLine(options.toString());    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	13	None	replace
123	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  opt,  requiredOptions,  stopAtNonOption);  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  opt,  requiredOptions,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  opt,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(options,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  opt	24	None	replace
124	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  str,  stopAtNonOption);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(t,  str,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t,  str,  stopAtNonOption);	  cmd    =    new    CommandLine(t,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  t	26	None	replace
125	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	23	None	replace
126	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  t);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options,  t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(options,  t);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	23	None	replace
127	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  requiredOptions.length);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt,  requiredOptions.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  requiredOptions.length);	  cmd    =    new    CommandLine(requiredOptions,    str.length);    	non-compiled	[CE]  cannot  find  symbol  opt	30	None	replace
128	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions.length);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t,  requiredOptions.length);	  cmd    =    new    CommandLine(requiredOptions,    str.length);    	non-compiled	[CE]  cannot  find  symbol  t	30	None	replace
129	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  options);  [CE]  cannot  find  symbol  t  [FE]                          ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(t,  options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(t,  options);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	17	None	replace
130	[BUG]  [BUGGY]  Arguments[]  arguments  =  this.options.getArguments();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Arguments[]  arguments  =  this.options.getArguments();  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Arguments[]  arguments  =  this.options.getArguments();	          Arguments[]    arguments    =    options.getArguments();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
131	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(true);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(true);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(true);	  Option    cmd    =    options.getOption(str);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	16	None	replace
132	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  this.options,  requiredOptions);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  this.options,  requiredOptions);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  this.options,  requiredOptions);	  cmd    =    new    CommandLine(options,    requiredOptions);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	2	None	replace
133	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  stopAtNonOption);	  cmd    =    new    CommandLine(options);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	4	None	replace
134	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  options);  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt,  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  options);	  cmd    =    new    CommandLine(options);    	non-compiled	[CE]  cannot  find  symbol  opt	4	None	replace
135	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(this.options,  options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(this.options,  options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	57	None	replace
136	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  str);  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(option,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(option,  str);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  cannot  find  symbol  str	49	None	replace
137	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  this.options.size());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  this.options.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  this.options.size());	  cmd    =    new    CommandLine(options.size());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
138	[BUG]  [BUGGY]  cmd  =  new  CommandLine(this.options.size());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(this.options.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(this.options.size());	  cmd    =    new    CommandLine(options.size());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
139	[BUG]  [BUGGY]  Option[]  arguments  =  this.options.getArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option[]  arguments  =  this.options.getArguments();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  this.options.getArguments();	  Option[]    arguments    =    option.getArguments();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	replace
140	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.str);  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(this.str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(this.str);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	56	None	replace
141	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  requiredOptions);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t,  requiredOptions);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(t,  requiredOptions);	  Option    option    =    options.getOption(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  t	38	None	replace
142	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(requiredOptions,  str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(requiredOptions,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(requiredOptions,  str);	  Option    cmd    =    options.getOption(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  str	14	None	replace
143	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(this.str);  [CE]  cannot  find  symbol  str  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(this.str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(this.str);	  Option    cmd    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	15	None	replace
144	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  str);  [CE]  cannot  find  symbol  str  [FE]                          ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(options,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(options,  str);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  str	17	None	replace
145	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.toString(),  options.toCharArray());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.toString(),  options.toCharArray());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.toString(),  options.toCharArray());	  cmd    =    new    CommandLine(options.toString());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
146	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(test);  [CE]  cannot  find  symbol  test  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(test);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(test);	  Option    cmd    =    options.getOption(str);    	non-compiled	[CE]  cannot  find  symbol  test	16	None	replace
147	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt.size()  -  1);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt.size()  -  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt.size()  -  1);	  cmd    =    new    CommandLine(requiredOptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  opt	19	None	replace
148	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  str);  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  str);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  str);	  cmd    =    new    CommandLine(options);    	non-compiled	[CE]  cannot  find  symbol  str	4	None	replace
149	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  block,  requiredOptions,  stopAtNonOption);  [CE]  cannot  find  symbol  block  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  block,  requiredOptions,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  block,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(options,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  block	24	None	replace
150	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  t.length);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  t.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  t.length);	  cmd    =    new    CommandLine(requiredOptions,    str.length);    	non-compiled	[CE]  cannot  find  symbol  t	30	None	replace
151	[BUG]  [BUGGY]  cmd  =  new  CommandLine(String.class,  str.toString());  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(String.class,  str.toString());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(String.class,  str.toString());	  cmd    =    new    CommandLine(String.toString());    	non-compiled	[CE]  cannot  find  symbol  str	52	None	replace
152	[BUG]  [BUGGY]  Option  opt  =  options.getOption(opt,  str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  opt  =  options.getOption(opt,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(opt,  str);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  str	58	None	replace
153	[BUG]  [BUGGY]  Option[]  arguments  =  options.getArgumentsForOptions();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option[]  arguments  =  options.getArgumentsForOptions();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  options.getArgumentsForOptions();	  Option[]    arguments    =    options.getArguments();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	55	None	replace
154	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(opt,  str.getParser());  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.parseOption(opt,  str.getParser());  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.parseOption(opt,  str.getParser());	  Option    cmd    =    options.parseOption(opt.getParser());    	non-compiled	[CE]  cannot  find  symbol  opt	37	None	replace
155	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(this.options.getParser());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  options.parseOption(this.options.getParser());  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.parseOption(this.options.getParser());	  Option    cmd    =    options.parseOption(opt.getParser());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
156	[BUG]  [BUGGY]  Option  cmd  =  this.options,  opt.getParser();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  cmd  =  this.options,  opt.getParser();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  this.options,  opt.getParser();	  Option    cmd    =    this.options.getParser();    	non-compiled	[CE]  ';'  expected	47	None	replace
157	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  options);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t,  options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(t,  options);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	23	None	replace
158	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(options,  str);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  str	23	None	replace
159	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [CE]  cannot  find  symbol  t  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(t,  arguments);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	23	None	replace
160	[BUG]  [BUGGY]  Option  option  =  opt.getOption(options);  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  opt.getOption(options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  opt.getOption(options);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  cannot  find  symbol  opt	22	None	replace
161	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  options,  requiredOptions.size());  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt,  options,  requiredOptions.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  options,  requiredOptions.size());	  cmd    =    new    CommandLine(options,    requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol  opt	20	None	replace
162	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  options.requiredOptions.size());  [CE]  cannot  find  symbol  requiredOptions  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  options.requiredOptions.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  options.requiredOptions.size());	  cmd    =    new    CommandLine(options,    requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol  requiredOptions	20	None	replace
163	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  arguments.size());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options,  arguments.size());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  arguments.size());	  cmd    =    new    CommandLine(options,    requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
164	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.trim());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(options.trim());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.trim());	  cmd    =    new    CommandLine(options.length);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
165	[BUG]  [BUGGY]  Option[]  arguments  =  this.opt.getArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option[]  arguments  =  this.opt.getArguments();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  this.opt.getArguments();	  Option[]    arguments    =    opt.getArguments();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
166	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  option.length);  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(str,  option.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(str,  option.length);	  cmd    =    new    CommandLine(t.length);    	non-compiled	[CE]  cannot  find  symbol  str	41	None	replace
167	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt.getName()  +  1);  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  cmd  =  new  CommandLine(opt.getName()  +  1);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt.getName()  +  1);	  cmd    =    new    CommandLine(requiredOptions.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  opt	31	None	replace
168	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(this.options,  this.options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(this.options,  this.options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	57	None	replace
169	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [CE]  cannot  find  symbol  t  [FE]                      ComparisonFailure      [CONTEXT]        this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(this.options,  t);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  t	57	None	replace
