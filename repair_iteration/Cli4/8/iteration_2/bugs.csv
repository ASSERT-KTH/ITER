bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  requiredOptions);  [CE]  cannot  find  symbol  opt  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(opt,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  requiredOptions);	  cmd    =    new    CommandLine(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  opt	1	None	replace
2	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  requiredOptions);	  cmd    =    new    CommandLine(requiredOptions);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	1	None	replace
3	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions);  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t,  requiredOptions);	  cmd    =    new    CommandLine(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  t	1	None	replace
4	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options);	  cmd    =    new    CommandLine(requiredOptions);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	1	None	replace
5	[BUG]  [BUGGY]  Option  cmd  =(Option)options.getValue();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =(Option)options.getValue();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)options.getValue();	      Option    cmd    =(Option)opt.getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
6	[BUG]  [BUGGY]  Option  cmd  =(Option)requiredOptions.getValue();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =(Option)requiredOptions.getValue();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)requiredOptions.getValue();	      Option    cmd    =(Option)opt.getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
7	[BUG]  [BUGGY]  Option  cmd  =(Option)option.getValue();  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =(Option)option.getValue();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)option.getValue();	      Option    cmd    =(Option)opt.getValue();    	non-compiled	[CE]  cannot  find  symbol  option	12	None	replace
8	[BUG]  [BUGGY]  Option[]  arguments  =  opt.getArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option[]  arguments  =  opt.getArguments();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  opt.getArguments();	      Option[]    arguments    =    opt.getOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
9	[BUG]  [BUGGY]  Option[]  arguments  =  options.getOptions();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option[]  arguments  =  options.getOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  options.getOptions();	      Option[]    arguments    =    opt.getOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
10	[BUG]  [BUGGY]  Option[]  arguments  =  option.getArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option[]  arguments  =  option.getArguments();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  option.getArguments();	      Option[]    arguments    =    opt.getOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
11	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str.toString());  [CE]  cannot  find  symbol  str  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(str.toString());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(str.toString());	  cmd    =    new    CommandLine(t.toString());    	non-compiled	[CE]  cannot  find  symbol  str	14	None	replace
12	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt.toString());  [CE]  cannot  find  symbol  opt  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(opt.toString());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt.toString());	  cmd    =    new    CommandLine(t.toString());    	non-compiled	[CE]  cannot  find  symbol  opt	14	None	replace
13	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.toString());  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(options.toString());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.toString());	  cmd    =    new    CommandLine(t.toString());    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	14	None	replace
14	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  options.getOption(requiredOptions);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(requiredOptions);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	10	None	replace
15	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  options.getOption(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(t);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  t	10	None	replace
16	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  options.getOption(str);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(str);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  str	10	None	replace
17	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  options.getOption(options);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(options);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	10	None	replace
18	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.size());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(options.size());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.size());	  cmd    =    new    CommandLine(requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
19	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions.size()  -  1);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(requiredOptions.size()  -  1);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions.size()  -  1);	  cmd    =    new    CommandLine(requiredOptions.size());    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	3	None	replace
20	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions.size());  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions.size());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  requiredOptions.size());	  cmd    =    new    CommandLine(requiredOptions.size());    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	3	None	replace
21	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  options.size());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  options.size());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  options.size());	  cmd    =    new    CommandLine(requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
22	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  option  =  options.getOption(str);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(str);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	8	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(options);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	8	None	replace
24	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions,  stopAtNonOption);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(options,  requiredOptions,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	13	None	replace
25	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  requiredOptions,  stopAtNonOption);  [CE]  cannot  find  symbol  opt  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(opt,  requiredOptions,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  opt	13	None	replace
26	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions,  stopAtNonOption);  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  t	13	None	replace
27	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  requiredOptions,  stopAtNonOption);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(str,  requiredOptions,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(str,  requiredOptions,  stopAtNonOption);	  cmd    =    new    CommandLine(requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  str	13	None	replace
28	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.length);  [CE]  cannot  find  symbol  length  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(options.length);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(options.length);	  cmd    =    new    CommandLine(requiredOptions.length);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
29	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions.length  -  1);  [CE]  cannot  find  symbol  length  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(requiredOptions.length  -  1);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions.length  -  1);	  cmd    =    new    CommandLine(requiredOptions.length);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
30	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  str.length);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  str.length);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  str.length);	  cmd    =    new    CommandLine(requiredOptions.length);    	non-compiled	[CE]  cannot  find  symbol  str	2	None	replace
31	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions.length  +  1);  [CE]  cannot  find  symbol  length  [FE]                ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(requiredOptions.length  +  1);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions.length  +  1);	  cmd    =    new    CommandLine(requiredOptions.length);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
32	[BUG]  [BUGGY]  Option  cmd  =  opt.getCmd();  [CE]  cannot  find  symbol  opt  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  opt.getCmd();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  opt.getCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol  opt	7	None	replace
33	[BUG]  [BUGGY]  Option  cmd  =  option.getCmd();  [CE]  cannot  find  symbol  option  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  option.getCmd();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  option.getCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol  option	7	None	replace
34	[BUG]  [BUGGY]  Option  cmd  =  options.getOptionCmd();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  options.getOptionCmd();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOptionCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
35	[BUG]  [BUGGY]  Option  cmd  =  opt.getParser();  [CE]  cannot  find  symbol  opt  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  opt.getParser();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  opt.getParser();	      Option    cmd    =    options.getParser();    	non-compiled	[CE]  cannot  find  symbol  opt	11	None	replace
36	[BUG]  [BUGGY]  Option  cmd  =  option.getParser();  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  option.getParser();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  option.getParser();	      Option    cmd    =    options.getParser();    	non-compiled	[CE]  cannot  find  symbol  option	11	None	replace
37	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(opt.getParser());  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  options.parseOption(opt.getParser());  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.parseOption(opt.getParser());	      Option    cmd    =    options.getParser();    	non-compiled	[CE]  cannot  find  symbol  opt	11	None	replace
38	[BUG]  [BUGGY]  Option  option  =  options.getOption(requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  option  =  options.getOption(requiredOptions);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(requiredOptions);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	9	None	replace
39	[BUG]  [BUGGY]  cmd  =  new  CommandLine(stopAtNonOption,  requiredOptions);  [CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(stopAtNonOption,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(stopAtNonOption,  requiredOptions);	  cmd    =    new    CommandLine(requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  constructor  CommandLine  in  class  CommandLine  cannot  be  applied  to  given  types;	13	None	replace
40	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt.length);  [CE]  cannot  find  symbol  opt  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(opt.length);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt.length);	  cmd    =    new    CommandLine(requiredOptions.length);    	non-compiled	[CE]  cannot  find  symbol  opt	2	None	replace
41	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t.length);  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(t.length);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t.length);	  cmd    =    new    CommandLine(requiredOptions.length);    	non-compiled	[CE]  cannot  find  symbol  t	2	None	replace
42	[BUG]  [BUGGY]  Option  cmd  =(Option)opt.clone();  [CE]  cannot  find  symbol  opt  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =(Option)opt.clone();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)opt.clone();	      Option    cmd    =(Option)opt.getValue();    	non-compiled	[CE]  cannot  find  symbol  opt	12	None	replace
43	[BUG]  [BUGGY]      Option  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]      Option  options  =  options.getOptions();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	        Option  options  =  options.getOptions();	  	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	4	None	add
44	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt.size());  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(opt.size());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(opt.size());	  cmd    =    new    CommandLine(requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol  opt	3	None	replace
45	[BUG]  [BUGGY]  cmd  =  new  CommandLine(params.size());  [CE]  cannot  find  symbol  params  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(params.size());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(params.size());	  cmd    =    new    CommandLine(requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol  params	3	None	replace
46	[BUG]  [BUGGY]  Option  cmd  =  options.getArgumentCmd();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  options.getArgumentCmd();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getArgumentCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
47	[BUG]  [BUGGY]  Option  cmd  =  this.options.getParser();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  this.options.getParser();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  this.options.getParser();	      Option    cmd    =    options.getParser();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
48	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  options.getOption(stopAtNonOption);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	10	None	replace
49	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(option);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	8	None	replace
50	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions.size());  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(t,  requiredOptions.size());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(t,  requiredOptions.size());	  cmd    =    new    CommandLine(requiredOptions.size());    	non-compiled	[CE]  cannot  find  symbol  t	3	None	replace
51	[BUG]  [BUGGY]      Arguments[]  arguments  =  options.getArguments();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]      Arguments[]  arguments  =  options.getArguments();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	        Arguments[]  arguments  =  options.getArguments();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
52	[BUG]  [BUGGY]  cmd  =  new  CommandLine(String.toString());  [CE]  non-static  method  toString()  cannot  be  referenced  from  a  static  context  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(String.toString());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(String.toString());	  cmd    =    new    CommandLine(t.toString());    	non-compiled	[CE]  non-static  method  toString()  cannot  be  referenced  from  a  static  context	14	None	replace
53	[BUG]  [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  str);  [CE]  cannot  find  symbol  str  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  cmd  =  new  CommandLine(requiredOptions,  str);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	cmd  =  new  CommandLine(requiredOptions,  str);	  cmd    =    new    CommandLine(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  str	1	None	replace
54	[BUG]  [BUGGY]  Option  cmd  =  this.options.getCmd();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =  this.options.getCmd();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =  this.options.getCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
55	[BUG]  [BUGGY]  Option[]  arguments  =  options.getArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option[]  arguments  =  options.getArguments();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option[]  arguments  =  options.getArguments();	      Option[]    arguments    =    opt.getOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
56	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  opt  =  options.getOption(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(t);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  t	9	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  option  =  options.getOption(this.options);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  option  =  options.getOption(this.options);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	9	None	replace
58	[BUG]  [BUGGY]  Option  opt  =  options.getOption(opt);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  opt  =  options.getOption(opt);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  opt  =  options.getOption(opt);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	10	None	replace
59	[BUG]  [BUGGY]  Option  cmd  =(Option)this.options.getValue();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();    [BUGGY]  Option  cmd  =(Option)this.options.getValue();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	144	144	2	replace	Option  cmd  =(Option)this.options.getValue();	      Option    cmd    =(Option)opt.getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
