bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RequiredOptions  cmd  =  opt.getRequiredOptions();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  cmd  =  opt.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  cmd  =  opt.getRequiredOptions();	  RequiredOptions    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  RequiredOptions  cmd  =  option.getRequiredOptions();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  cmd  =  option.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  cmd  =  option.getRequiredOptions();	  RequiredOptions    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
3	[BUG]  [BUGGY]  RequiredOptions  cmd  =  options,  opt.getRequiredOptions();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  cmd  =  options,  opt.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  cmd  =  options,  opt.getRequiredOptions();	  RequiredOptions    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  Option  cmd  =  opt.getCmd();  [CE]  cannot  find  symbol  opt  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  cmd  =  opt.getCmd();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  cmd  =  opt.getCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol  opt	13	None	replace
5	[BUG]  [BUGGY]  Option  cmd  =  option.getCmd();  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  cmd  =  option.getCmd();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  cmd  =  option.getCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol  option	13	None	replace
6	[BUG]  [BUGGY]  Option  cmd  =  t.getCmd();  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  cmd  =  t.getCmd();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  cmd  =  t.getCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol  t	13	None	replace
7	[BUG]  [BUGGY]  Option  option  =  opt.getOptions();  [CE]  cannot  find  symbol  opt  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  opt.getOptions();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  opt.getOptions();	      Option    options    =    opt.getOptions();    	non-compiled	[CE]  cannot  find  symbol  opt	6	None	replace
8	[BUG]  [BUGGY]  Options  options  =  opt.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Options  options  =  opt.getOptions();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Options  options  =  opt.getOptions();	      Option    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  options.getOption(str);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  options.getOption(str);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  str	10	None	replace
10	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  options.getOption(this.options);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  options.getOption(this.options);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	10	None	replace
11	[BUG]  [BUGGY]  requiredOptions  =  option.getRequiredOptions();  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  requiredOptions  =  option.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  option.getRequiredOptions();	  requiredOptions    =    opt.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol  option	2	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.getOption();  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  options.getOption();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  options.getOption();	      Option    option    =    opt.getOption();    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	8	None	replace
13	[BUG]  [BUGGY]  Option  option  =  this.options.getOption();  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  this.options.getOption();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  this.options.getOption();	      Option    option    =    opt.getOption();    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	8	None	replace
14	[BUG]  [BUGGY]  Option  option  =  t.getOption();  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  t.getOption();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  t.getOption();	      Option    option    =    opt.getOption();    	non-compiled	[CE]  cannot  find  symbol  t	8	None	replace
15	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  opt.getOption(str);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  opt.getOption(str);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	7	None	replace
16	[BUG]  [BUGGY]  Option  option  =  opt.getOption(this.str);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  opt.getOption(this.str);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  opt.getOption(this.str);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	7	None	replace
17	[BUG]  [BUGGY]  RequiredOptions  options  =  opt.getRequiredOptions();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  options  =  opt.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  options  =  opt.getRequiredOptions();	  RequiredOptions    options    =    options.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
18	[BUG]  [BUGGY]  RequiredOptions  options  =  option.getRequiredOptions();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  options  =  option.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  options  =  option.getRequiredOptions();	  RequiredOptions    options    =    options.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
19	[BUG]  [BUGGY]  RequiredOptions  options  =  this.options.getRequiredOptions();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  options  =  this.options.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  options  =  this.options.getRequiredOptions();	  RequiredOptions    options    =    options.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
20	[BUG]  [BUGGY]  Option[]  options  =  option.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option[]  options  =  option.getOptions();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option[]  options  =  option.getOptions();	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	5	None	replace
21	[BUG]  [BUGGY]  Options[]  options  =  opt.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Options[]  options  =  opt.getOptions();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Options[]  options  =  opt.getOptions();	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	5	None	replace
22	[BUG]  [BUGGY]  Option[]  options  =  opt.getOptions(t);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option[]  options  =  opt.getOptions(t);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option[]  options  =  opt.getOptions(t);	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	5	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  options.getOption(option);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	9	None	replace
24	[BUG]  [BUGGY]      Option  cmd  =(Option)opt.next();  [CE]  cannot  find  symbol  opt  [FE]    NullPointerException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]      Option  cmd  =(Option)opt.next();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	        Option  cmd  =(Option)opt.next();	  	non-compiled	[CE]  cannot  find  symbol  opt	3	None	add
25	[BUG]  [BUGGY]      Option  cmd  =(Option)opt.getValue();  [CE]  cannot  find  symbol  opt  [FE]      NullPointerException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]      Option  cmd  =(Option)opt.getValue();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	        Option  cmd  =(Option)opt.getValue();	  	non-compiled	[CE]  cannot  find  symbol  opt	3	None	add
26	[BUG]  [BUGGY]      Option  cmd  =(Option)opt.clone();  [CE]  cannot  find  symbol  opt  [FE]        NullPointerException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]      Option  cmd  =(Option)opt.clone();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	        Option  cmd  =(Option)opt.clone();	  	non-compiled	[CE]  cannot  find  symbol  opt	3	None	add
27	[BUG]  [BUGGY]      Option  cmd  =  opt.getOption(t);  [CE]  cannot  find  symbol  t  [FE]          NullPointerException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]      Option  cmd  =  opt.getOption(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	        Option  cmd  =  opt.getOption(t);	  	non-compiled	[CE]  cannot  find  symbol  t	3	None	add
28	[BUG]  [BUGGY]      Option  cmd  =  options.getOption(opt);  [CE]  cannot  find  symbol  opt  [FE]            NullPointerException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]      Option  cmd  =  options.getOption(opt);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	        Option  cmd  =  options.getOption(opt);	  	non-compiled	[CE]  cannot  find  symbol  opt	3	None	add
29	[BUG]  [BUGGY]  requiredOptions  =  options.getRequiredOptions(t);  [CE]  cannot  find  symbol  t  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  requiredOptions  =  options.getRequiredOptions(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  options.getRequiredOptions(t);	  requiredOptions    =    options.getRequiredOptions(opt);    	non-compiled	[CE]  cannot  find  symbol  t	12	None	replace
30	[BUG]  [BUGGY]  requiredOptions  =  options.getRequiredOptions(this.options);  [CE]  method  getRequiredOptions  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  requiredOptions  =  options.getRequiredOptions(this.options);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  options.getRequiredOptions(this.options);	  requiredOptions    =    options.getRequiredOptions(opt);    	non-compiled	[CE]  method  getRequiredOptions  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
31	[BUG]  [BUGGY]  RequiredOptions  options  =  options.getRequiredOptions(t);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  options  =  options.getRequiredOptions(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  options  =  options.getRequiredOptions(t);	  requiredOptions    =    options.getRequiredOptions(opt);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
32	[BUG]  [BUGGY]  RequiredOptions  cmd  =  options.getRequiredOptions(opt);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  cmd  =  options.getRequiredOptions(opt);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  cmd  =  options.getRequiredOptions(opt);	  requiredOptions    =    options.getRequiredOptions(opt);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
33	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(opt);  [CE]  cannot  find  symbol  opt  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  this.options.getOption(opt);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  this.options.getOption(opt);	      Option    option    =    opt.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  opt	11	None	replace
34	[BUG]  [BUGGY]  Option  option  =  t.getOption(this.options);  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  t.getOption(this.options);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  t.getOption(this.options);	      Option    option    =    opt.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  t	11	None	replace
35	[BUG]  [BUGGY]  RequiredOptions  opt  =  options.getRequiredOptions();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  opt  =  options.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  opt  =  options.getRequiredOptions();	  requiredOptions    =    opt.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
36	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  opt  =  options.getOption(this.options);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  opt  =  options.getOption(this.options);	      Option    option    =    opt.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	11	None	replace
37	[BUG]  [BUGGY]  Option[]  options  =  opt.cloneOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option[]  options  =  opt.cloneOptions();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option[]  options  =  opt.cloneOptions();	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	5	None	replace
38	[BUG]  [BUGGY]  Option  cmd  =  options.helpOptions();  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  cmd  =  options.helpOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  cmd  =  options.helpOptions();	      	non-compiled	[CE]  incompatible  types	4	None	replace
39	[BUG]  [BUGGY]  Option  option  =  opt.getOption(true);  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  opt.getOption(true);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  opt.getOption(true);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  opt	7	None	replace
40	[BUG]  [BUGGY]  RequiredOptions  cmd  =  this.options.getRequiredOptions();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  cmd  =  this.options.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  cmd  =  this.options.getRequiredOptions();	  RequiredOptions    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
41	[BUG]  [BUGGY]  requiredOptions  =  options.getRequiredOptions(stopAtNonOption);  [CE]  method  getRequiredOptions  in  class  Options  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  requiredOptions  =  options.getRequiredOptions(stopAtNonOption);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  options.getRequiredOptions(stopAtNonOption);	  requiredOptions    =    options.getRequiredOptions(opt);    	non-compiled	[CE]  method  getRequiredOptions  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
42	[BUG]  [BUGGY]  requiredOptions  =  options.getRequiredOptions(true);  [CE]  method  getRequiredOptions  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  requiredOptions  =  options.getRequiredOptions(true);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  options.getRequiredOptions(true);	  requiredOptions    =    options.getRequiredOptions(opt);    	non-compiled	[CE]  method  getRequiredOptions  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  options.getOption(options);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	9	None	replace
44	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  options  =  options.getOption(opt);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  options  =  options.getOption(opt);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	replace
45	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  options  =  option.getOptions();	      Option    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
46	[BUG]  [BUGGY]  Option  opt  =  options.getOption();  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  opt  =  options.getOption();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  opt  =  options.getOption();	      Option    option    =    opt.getOption();    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	8	None	replace
47	[BUG]  [BUGGY]  Option  cmd  =  options.getArgumentCmd();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  cmd  =  options.getArgumentCmd();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  cmd  =  options.getArgumentCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
48	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  opt  =  options.getOption(t);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  opt  =  options.getOption(t);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  t	10	None	replace
49	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  options  =  options.getOptions();	      Option    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
50	[BUG]  [BUGGY]  Option  options  =  this.options.getOption(opt);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  options  =  this.options.getOption(opt);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  options  =  this.options.getOption(opt);	      Option    option    =    opt.getOption(this.options);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	11	None	replace
51	[BUG]  [BUGGY]  Option[]  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option[]  options  =  options.getOptions();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option[]  options  =  options.getOptions();	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	5	None	replace
52	[BUG]  [BUGGY]  Option[]  options  =  this.options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option[]  options  =  this.options.getOptions();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option[]  options  =  this.options.getOptions();	      Option[]    options    =    opt.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	5	None	replace
53	[BUG]  [BUGGY]  Option  option  =  opt.getOption(this.defaultValue);  [CE]  cannot  find  symbol  defaultValue  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  option  =  opt.getOption(this.defaultValue);  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  option  =  opt.getOption(this.defaultValue);	      Option    option    =    opt.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  defaultValue	7	None	replace
54	[BUG]  [BUGGY]  RequiredOptions  cmd  =  options.requiredOptions();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  RequiredOptions  cmd  =  options.requiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	RequiredOptions  cmd  =  options.requiredOptions();	  RequiredOptions    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  requiredOptions  =  this.options.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	add	requiredOptions  =  this.options.getRequiredOptions();	  requiredOptions    =    opt.getRequiredOptions();    	compilable	  [FE]  ComparisonFailure  	2	2	replace
56	[BUG]  [BUGGY]  requiredOptions  =  this.options.getRequiredOptions();  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  requiredOptions  =  this.options.getRequiredOptions();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	requiredOptions  =  this.options.getRequiredOptions();	  requiredOptions    =    opt.getRequiredOptions();    	compilable	  [FE]  ComparisonFailure  	2	2	replace
57	[BUG]  [BUGGY]  Option  cmd  =  this.options.getCmd();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }    [BUGGY]  Option  cmd  =  this.options.getCmd();  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	143	143	2	replace	Option  cmd  =  this.options.getCmd();	      Option    cmd    =    options.getCmd();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
