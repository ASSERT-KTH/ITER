bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option[]  requiredOptions  =  option.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option[]  requiredOptions  =  option.getRequiredOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option[]  requiredOptions  =  option.getRequiredOptions();	  Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  Option[]  requiredOptions  =  options.getAllRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option[]  requiredOptions  =  options.getAllRequiredOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option[]  requiredOptions  =  options.getAllRequiredOptions();	  Option[]    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(str);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getOption(str);	  Option    option    =    opt.getOption(t);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
4	[BUG]  [BUGGY]  Option  option  =  opt.getOption(t,  str);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(t,  str);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getOption(t,  str);	  Option    option    =    opt.getOption(t);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  Option  option  =  opt.getOption(t,  options);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(t,  options);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getOption(t,  options);	  Option    option    =    opt.getOption(t);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  Option  option  =(Option)opt.getValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getValue();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.getValue();	  Option    option    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
7	[BUG]  [BUGGY]  Option  option  =(Option)opt.clone();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.clone();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.clone();	  Option    option    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  options  =(Option)opt.next();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options  =(Option)opt.next();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	options  =(Option)opt.next();	  Option    option    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(opt.getKey());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(opt.getKey());  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  opt.addValue(opt.getKey());	  Option    option    =(Option)it.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  Option  option  =(Option)opt.clone();  opt.addValue(option.getKey());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.clone();  opt.addValue(option.getKey());  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.clone();  opt.addValue(option.getKey());	  Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
11	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  options.addValue(option.getKey());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  options.addValue(option.getKey());  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  options.addValue(option.getKey());	  Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
12	[BUG]  [BUGGY]  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.removeValues();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.removeValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.removeValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
13	[BUG]  [BUGGY]  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.re  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.re  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)options.getOptions().iterator();  it.hasNext();)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.re	  if(opt!=    null)    {    for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  t);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt,  t);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(opt,  t);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
15	[BUG]  [BUGGY]  Option  option  =  opt.getOption(option);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(option);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getOption(option);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  options  =  opt.getOptions();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options  =  opt.getOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	options  =  opt.getOptions();	  Options    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  Options  options  =  opt.getOptions(t);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =  opt.getOptions(t);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Options  options  =  opt.getOptions(t);	  Options    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getValue());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getValue());  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(opt.getValue());	  Option    option    =    options.getOption(opt.getKey());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  str);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  str);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(opt.getKey(),  str);	  Option    option    =    options.getOption(opt.getKey());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
20	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  arguments);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  arguments);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(opt.getKey(),  arguments);	  Option    option    =    options.getOption(opt.getKey());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
21	[BUG]  [BUGGY]  Option  option  =  opt.getOption(option.getKey());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(option.getKey());  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getOption(option.getKey());	  Option    option    =    options.getOption(option.getKey());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
22	[BUG]  [BUGGY]  option  option  =  options.getOption(opt.getKey());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  option  option  =  options.getOption(opt.getKey());  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	option  option  =  options.getOption(opt.getKey());	  Option    option    =    options.getOption(option.getKey());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
23	[BUG]  [BUGGY]  Option  cmd  =  options.getRequiredOption(opt);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  cmd  =  options.getRequiredOption(opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  cmd  =  options.getRequiredOption(opt);	  Option    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  Option  cmd  =  options.getCmd();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  cmd  =  options.getCmd();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  cmd  =  options.getCmd();	  Option    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  Option  cmd  =  opt.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  cmd  =  opt.getRequiredOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  cmd  =  opt.getRequiredOptions();	  Option    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  options.helpOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Option  option  :  options.helpOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Option  option  :  options.helpOptions())  {  requiredOptions  =  options.getRequiredOptions();  }	  if(opt!=    null)    {    for(Option    option    :    options.getRequiredOptions())    {    requiredOptions    =    options.getRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.clone();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.clone();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =(Option)opt.clone();	  Option    preferredOption    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
28	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.getValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.getValue();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =(Option)opt.getValue();	  Option    preferredOption    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
29	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.getNext();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.getNext();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =(Option)opt.getNext();	  Option    preferredOption    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
30	[BUG]  [BUGGY]  option  =(Option)it.next();  it.remove();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  option  =(Option)it.next();  it.remove();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	option  =(Option)it.next();  it.remove();	  Option    option    =(Option)it.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOptions();	  Option    option    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
32	[BUG]  [BUGGY]  Option  option  =  opt.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getRequiredOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getRequiredOptions();	  Option    option    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
33	[BUG]  [BUGGY]  Option  option  =  options.getOption();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption();	  Option    option    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
34	[BUG]  [BUGGY]  Option  preferredOption  =  opt.getRequiredOption(t);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  opt.getRequiredOption(t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  opt.getRequiredOption(t);	  Option    preferredOption    =    options.getRequiredOption(t);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
35	[BUG]  [BUGGY]  Option  preferredOption  =  options.getPreferredOption(t);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getPreferredOption(t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getPreferredOption(t);	  Option    preferredOption    =    options.getRequiredOption(t);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
36	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  options.clearValues();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  options.clearValues();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  options.clearValues();	  Option    option    =(Option)it.next();    options.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
37	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  options.removeValues();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  options.removeValues();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  options.removeValues();	  Option    option    =(Option)it.next();    options.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
38	[BUG]  [BUGGY]  Option  requiredOptions  =  opt.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  requiredOptions  =  opt.getRequiredOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  requiredOptions  =  opt.getRequiredOptions();	  Option    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
39	[BUG]  [BUGGY]  Option  requiredOptions  =  option.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  requiredOptions  =  option.getRequiredOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  requiredOptions  =  option.getRequiredOptions();	  Option    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
40	[BUG]  [BUGGY]  Option  requiredOptions  =  options.getAllRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  requiredOptions  =  options.getAllRequiredOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  requiredOptions  =  options.getAllRequiredOptions();	  Option    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
41	[BUG]  [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  for(Iterator  it  =  requiredOptions.iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  for(Iterator  it  =  requiredOptions.iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option[]  requiredOptions  =  options.getRequiredOptions();  for(Iterator  it  =  requiredOptions.iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Options    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)opt.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Options    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
43	[BUG]  [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  if(requiredOptions!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  if(requiredOptions!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option[]  requiredOptions  =  options.getRequiredOptions();  if(requiredOptions!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Options    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
44	[BUG]  [BUGGY]  Option  option  =(Option)opt.getValue();  preferredOption.clearValues();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getValue();  preferredOption.clearValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.getValue();  preferredOption.clearValues();	  Option    option    =(Option)opt.next();    preferredOption.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
45	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  preferredOption.removeValues();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  preferredOption.removeValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  preferredOption.removeValues();	  Option    option    =(Option)opt.next();    preferredOption.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(t,  str);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
47	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  opt);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t,  opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(t,  opt);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
48	[BUG]  [BUGGY]  Option[]  requiredOptions  =  opt.getAllRequiredOptions();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option[]  requiredOptions  =  opt.getAllRequiredOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option[]  requiredOptions  =  opt.getAllRequiredOptions();	  Option[]    requiredOptions    =    opt.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
49	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  option.removeValues();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  option.removeValues();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  option.removeValues();	  Option    option    =(Option)it.next();    option.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
50	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  option.clearValues();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  option.clearValues();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  option.clearValues();	  Option    option    =(Option)it.next();    option.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
51	[BUG]  [BUGGY]  Option  option  =(Option)opt.getValue();  it.remove();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getValue();  it.remove();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.getValue();  it.remove();	  Option    option    =(Option)opt.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
52	[BUG]  [BUGGY]  option  =(Option)opt.next();  it.remove();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  option  =(Option)opt.next();  it.remove();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	option  =(Option)opt.next();  it.remove();	  Option    option    =(Option)opt.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
53	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  it.remove();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
55	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
56	[BUG]  [BUGGY]  options  =  opt.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options  =  opt.getRequiredOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	options  =  opt.getRequiredOptions();	  options    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  Options  options  =  opt.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =  opt.getRequiredOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Options  options  =  opt.getRequiredOptions();	  options    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.removeValues();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.removeValues();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  opt.removeValues();	  Option    option    =(Option)it.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
59	[BUG]  [BUGGY]  Option  preferredOption  =  options.getRequiredOption(opt,  t);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getRequiredOption(opt,  t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getRequiredOption(opt,  t);	  Option    preferredOption    =    options.getRequiredOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
60	[BUG]  [BUGGY]  Option  preferredOption  =  options.getRequiredOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getRequiredOption(opt,  stopAtNonOption);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getRequiredOption(opt,  stopAtNonOption);	  Option    preferredOption    =    options.getRequiredOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
61	[BUG]  [BUGGY]  options.clearValues();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.clearValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	options.clearValues();	  Option    option    =(Option)it.next();    preferredOption.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
62	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  preferredOption.removeValues();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  preferredOption.removeValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  preferredOption.removeValues();	  Option    option    =(Option)it.next();    preferredOption.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
63	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
64	[BUG]  [BUGGY]  Option  option  =(Option)options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
67	[BUG]  [BUGGY]  Option  opt  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.getOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  opt  =  options.getOptions();	  Option    opt    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
68	[BUG]  [BUGGY]  Option  opt  =  options.getOption(opt);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.getOption(opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  opt  =  options.getOption(opt);	  Option    opt    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
69	[BUG]  [BUGGY]  Option  opt  =  options.getRequiredOption(t);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.getRequiredOption(t);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  opt  =  options.getRequiredOption(t);	  Option    opt    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
70	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  opt.addValue(option);	  Option    option    =(Option)opt.next();    opt.removeValues();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.removeValues();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.removeValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.removeValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
73	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.removeValues();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.removeValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.removeValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
74	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  options.addValue(opt.getKey());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  options.addValue(opt.getKey());  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  options.addValue(opt.getKey());	  Option    option    =(Option)it.next();    options.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getRequiredOptions())  {  neededOptions  =  options.getRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getRequiredOptions())  {  neededOptions  =  options.getRequiredOptions();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Option  option  :  opt.getRequiredOptions())  {  neededOptions  =  options.getRequiredOptions();  }	  if(opt!=    null)    {    for(Option    option    :    opt.getRequiredOptions())    {    requiredOptions    =    options.getRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  Option  options  =  opt.getOptions(t);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  opt.getOptions(t);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  options  =  opt.getOptions(t);	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
77	[BUG]  [BUGGY]  Option  options  =  opt.getOptions(true);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  opt.getOptions(true);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  options  =  opt.getOptions(true);	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
78	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  options  =  option.getOptions();	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
79	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Iterator  <  Option>  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Iterator  <  Option>  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  Iterator    <    Option>    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
80	[BUG]  [BUGGY]  Option  requiredOptions  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  requiredOptions  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  requiredOptions  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }	  Iterator    <    Option>    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
81	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Iterator  <  Option>  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Iterator  <  Option>  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();	  Iterator    <    Option>    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
82	[BUG]  [BUGGY]  Option  option  =  opt.getOption(true);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(true);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getOption(true);	  Option    option    =    opt.getOption();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
83	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOption(opt);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOption(opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOption(opt);	  Option    option    =    options.getRequiredOption(t);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
84	[BUG]  [BUGGY]  Option  option  =  opt.getRequiredOption(t);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getRequiredOption(t);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getRequiredOption(t);	  Option    option    =    options.getRequiredOption(t);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
85	[BUG]  [BUGGY]  Option  preferredOption  =  opt.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  opt.getRequiredOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  opt.getRequiredOptions();	  Option    preferredOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
86	[BUG]  [BUGGY]  Option  preferredOption  =  options.getPreferredOptions();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getPreferredOptions();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getPreferredOptions();	  Option    preferredOption    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
87	[BUG]  [BUGGY]  Option  option  =(Option)options.next();  opt.removeValues();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)options.next();  opt.removeValues();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)options.next();  opt.removeValues();	  Option    option    =(Option)options.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
88	[BUG]  [BUGGY]  Option  option  =(Option)opt.clone();  opt.clearValues();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.clone();  opt.clearValues();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.clone();  opt.clearValues();	  Option    option    =(Option)opt.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
89	[BUG]  [BUGGY]  Option  option  =(Option)option.next();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)option.next();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)option.next();	  Option    option    =(Option)it.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
90	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(opt);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)options.getOption(opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)options.getOption(opt);	  Option    option    =(Option)options.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
91	[BUG]  [BUGGY]  options  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options  =  options.getOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	options  =  options.getOptions();	  options    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
92	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.getOption(t);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  opt  =  options.getOption(t);	  Option    opt    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
93	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(option);	  Option    option    =    options.getRequiredOption(t);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
94	[BUG]  [BUGGY]  Option  option  =(Option)opt.getNext();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getNext();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.getNext();	  Option    option    =(Option)it.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
95	[BUG]  [BUGGY]  Option  cmd  =  options.getCurrentOption();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  cmd  =  options.getCurrentOption();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  cmd  =  options.getCurrentOption();	  Option    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  Option  cmd  =  options.getCmd(opt);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  cmd  =  options.getCmd(opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  cmd  =  options.getCmd(opt);	  Option    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
97	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  it.clearValues();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  it.clearValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  it.clearValues();	  Option    option    =(Option)it.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
98	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.requiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.requiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.requiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
99	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  stopAtNonOption);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  stopAtNonOption);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(opt.getKey(),  stopAtNonOption);	  Option    option    =    options.getOption(opt.getKey());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
100	[BUG]  [BUGGY]  Option  option  =(Option)opt.getValue();  opt.clearValues();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getValue();  opt.clearValues();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.getValue();  opt.clearValues();	  Option    option    =(Option)opt.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
101	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.addOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.addOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.addOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
102	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Iterator  <  Option>  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Iterator  <  Option>  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  Iterator    <    Option>    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
103	[BUG]  [BUGGY]  Option  preferredOption  =  options.getRequiredOption(option);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getRequiredOption(option);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getRequiredOption(option);	  Option    preferredOption    =    options.getRequiredOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
104	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option.getKey(),  option);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option.getKey(),  option);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  opt.addValue(option.getKey(),  option);	  Option    option    =(Option)it.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
105	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option.getKey(),  option);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option.getKey(),  option);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  opt.addValue(option.getKey(),  option);	  Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
106	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.requiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.requiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.requiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
107	[BUG]  [BUGGY]  Option  preferredOption  =  options.getPreferredOption(opt);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getPreferredOption(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getPreferredOption(opt);	  Option    preferredOption    =    options.getRequiredOption(t);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
108	[BUG]  [BUGGY]  Option  option  =  options.clearValues().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.clearValues().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.clearValues().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.clearValues().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
109	[BUG]  [BUGGY]  Option  option  =  options.clearValues().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.clearValues().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  it.remove();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.clearValues().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.clearValues().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
110	[BUG]  [BUGGY]  Option  option  =  opt.cloneOption();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.cloneOption();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.cloneOption();	  Option    option    =    opt.getOption();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
111	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getOption();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.getOption();	  Option    option    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
112	[BUG]  [BUGGY]  Option  option  =  options.getOptions(opt);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOptions(opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOptions(opt);	  Option    option    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
113	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  opt  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  opt  =(Option)it.next();  opt.clearValues();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  opt  =(Option)it.next();  opt.clearValues();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
114	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
115	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  opt  =(Option)it.next();  opt.clearValues();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  opt  =(Option)it.next();  opt.clearValues();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  opt  =(Option)it.next();  opt.clearValues();	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
116	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  opt.addValue(option);	  Option    option    =(Option)it.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
117	[BUG]  [BUGGY]  Option  options  =  opt.cloneOptions();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  opt.cloneOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  options  =  opt.cloneOptions();	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
118	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.addOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.addOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.addOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
119	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
120	[BUG]  [BUGGY]  Options  options  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =  options.getOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Options  options  =  options.getOptions();	  Options    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
121	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
122	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.requiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.requiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.requiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Options    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
123	[BUG]  [BUGGY]  Option  requiredOptions  =  options.getRequiredOptions(opt);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  requiredOptions  =  options.getRequiredOptions(opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  requiredOptions  =  options.getRequiredOptions(opt);	  Option    requiredOptions    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
124	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option.toString());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option.toString());  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  opt.addValue(option.toString());	  Option    option    =(Option)it.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
125	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getRequiredOptions().iterator();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions().iterator();	  if(opt!=    null)    {    for(Iterator    it    =    options.getRequiredOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
126	[BUG]  [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
127	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  it.clear();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  it.clear();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  it.clear();	  Option    option    =(Option)opt.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
128	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  it.clear();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  it.clear();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  it.clear();	  Option    option    =(Option)it.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
129	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  options.addValue(opt);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  options.addValue(opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  options.addValue(opt);	  Option    option    =(Option)it.next();    options.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
130	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  options.addValue(option.getKey(),  opt);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  options.addValue(option.getKey(),  opt);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  options.addValue(option.getKey(),  opt);	  Option    option    =(Option)it.next();    options.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
131	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getDeclaredOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getDeclaredOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Option  option  :  opt.getDeclaredOptions())  {  requiredOptions  =  options.getRequiredOptions();  }	  if(opt!=    null)    {    for(Option    option    :    opt.getRequiredOptions())    {    requiredOptions    =    options.getRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
132	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  options  =  options.getOptions();	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
133	[BUG]  [BUGGY]  Option  option  =  options.helpOptions();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.helpOptions();	  Option    option    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
134	[BUG]  [BUGGY]  Option  option  =(Option)opt.clone();  opt.removeValues();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.clone();  opt.removeValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.clone();  opt.removeValues();	  Option    option    =(Option)opt.next();    opt.removeValues();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
135	[BUG]  [BUGGY]  Option  option  =(Option)opt.getKey();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getKey();  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.getKey();	  Option    option    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
136	[BUG]  [BUGGY]  Option  option  =  options.helpOptions().iterator();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions().iterator();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.helpOptions().iterator();	  if(opt!=    null)    {    for(Iterator    it    =    options.clearValues().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
137	[BUG]  [BUGGY]  Option  preferredOption  =  options.getRequiredOption(t,  opt);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getRequiredOption(t,  opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getRequiredOption(t,  opt);	  Option    preferredOption    =    options.getRequiredOption(t);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
138	[BUG]  [BUGGY]  Option  preferredOption  =  options.getPreviousOption(t);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getPreviousOption(t);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getPreviousOption(t);	  Option    preferredOption    =    options.getRequiredOption(t);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
139	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  preferredOption.addValue(opt);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  preferredOption.addValue(opt);  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  preferredOption.addValue(opt);	  Option    option    =(Option)it.next();    preferredOption.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
140	[BUG]  [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	  for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
141	[BUG]  [BUGGY]  Option  cmd  =  options.getRequiredOption(t);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  cmd  =  options.getRequiredOption(t);  [BUGGY]        requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  cmd  =  options.getRequiredOption(t);	  Option    cmd    =    options.getRequiredOptions();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
142	[BUG]  [BUGGY]  Option  option  =(Option)opt.clone();  preferredOption.clearValues();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.clone();  preferredOption.clearValues();  [BUGGY]      }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.clone();  preferredOption.clearValues();	  Option    option    =(Option)opt.next();    preferredOption.clearValues();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
