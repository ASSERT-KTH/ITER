bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)it.next();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  opt.addValue(option.getKey());	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option[]  requiredOptions  =  options.getRequiredOptions();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option[]  requiredOptions  =  options.getRequiredOptions();	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  options.addValue(option.getKey());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)it.next();  options.addValue(option.getKey());  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  options.addValue(option.getKey());	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getRequiredOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getRequiredOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Option  option  :  opt.getRequiredOptions())  {  requiredOptions  =  options.getRequiredOptions();  }	  if(opt!=    null)    {    for(Option    option    :    opt.getOptions())    {    requiredOptions    =    options.getRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  Option  cmd  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  cmd  =  options.getRequiredOptions();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  cmd  =  options.getRequiredOptions();	  if(opt!=    null)    {    for(Option    option    :    opt.getOptions())    {    requiredOptions    =    options.getRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  options.getRequiredOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Option  option  :  options.getRequiredOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Option  option  :  options.getRequiredOptions())  {  requiredOptions  =  options.getRequiredOptions();  }	  if(opt!=    null)    {    for(Option    option    :    opt.getOptions())    {    requiredOptions    =    options.getRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)opt.next();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    option.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(opt);	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    option.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  options  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  options  =  options.getRequiredOptions();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	options  =  options.getRequiredOptions();	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    option.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =  options.getRequiredOptions();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOptions();	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    option.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  opt.clearValues();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)opt.next();  opt.clearValues();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  opt.clearValues();	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  Option  option  =  opt.getOption(t);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =  opt.getOption(t);  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getOption(t);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  Options  options  =  opt.getOptions();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Options  options  =  opt.getOptions();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Options  options  =  opt.getOptions();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  Option  options  =  opt.getOptions();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  options  =  opt.getOptions();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  options  =  opt.getOptions();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  it.remove();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)opt.next();  it.remove();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  it.remove();	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  Option[]  requiredOptions  =  opt.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option[]  requiredOptions  =  opt.getRequiredOptions();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option[]  requiredOptions  =  opt.getRequiredOptions();	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  opt.addValue(option.getKey());	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  opt.removeValues();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)opt.next();  opt.removeValues();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  opt.removeValues();	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.next();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  preferredOption  =(Option)opt.next();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =(Option)opt.next();	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  Option  preferredOption  =  options.getRequiredOption(t);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  preferredOption  =  options.getRequiredOption(t);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getRequiredOption(t);	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  Option  preferredOption  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  preferredOption  =  options.getRequiredOptions();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getRequiredOptions();	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  Option  preferredOption  =  options.getRequiredOption(opt);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  preferredOption  =  options.getRequiredOption(opt);  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  preferredOption  =  options.getRequiredOption(opt);	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.clearValues();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)it.next();  opt.clearValues();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  opt.clearValues();	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  Option  option  =(Option)options.next();  opt.clearValues();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)options.next();  opt.clearValues();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)options.next();  opt.clearValues();	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  Option  requiredOptions  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  requiredOptions  =  options.getRequiredOptions();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  requiredOptions  =  options.getRequiredOptions();	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Options    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  Option  opt  =  options.getRequiredOptions();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  opt  =  options.getRequiredOptions();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  opt  =  options.getRequiredOptions();	  if(opt!=    null)    {    for(Option    option    :    opt.getOptions())    {    requiredOptions    =    options.getRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
29	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  opt  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  opt  =(Option)it.next();  opt.clearValues();  }  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  opt  =(Option)it.next();  opt.clearValues();  }	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
30	[BUG]  [BUGGY]  Option  option  =  options.getOption(option.getKey());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =  options.getOption(option.getKey());  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(option.getKey());	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =  options.getOption(opt.getKey());  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(opt.getKey());	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
33	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Iterator  <  Option>  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  Option  option  =  options.getRequiredOption(t);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =  options.getRequiredOption(t);  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getRequiredOption(t);	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
35	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
36	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.clearValues().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.clearValues().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.clearValues().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  preferredOption.clearValues();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)opt.next();  preferredOption.clearValues();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)opt.next();  preferredOption.clearValues();	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =  options.getOption(t);  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  options.getOption(t);	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Options    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
43	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  option.clearValues();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)it.next();  option.clearValues();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  option.clearValues();	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    option.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  options.clearValues();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)it.next();  options.clearValues();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  options.clearValues();	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    option.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  Option  option  =  opt.getOption();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =  opt.getOption();  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =  opt.getOption();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.getRequiredOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Options    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Options    option    =(Option)it.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.removeValues();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  preferredOption.clearValues();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)it.next();  preferredOption.clearValues();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  preferredOption.clearValues();	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  it.remove();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();    [BUGGY]  Option  option  =(Option)it.next();  it.remove();  [BUGGY]    }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	Option  option  =(Option)it.next();  it.remove();	      if(opt!=    null)    {    for(Iterator    it    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
