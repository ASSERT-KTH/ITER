bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  option.clearValues();  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  option.clearValues();  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  option.clearValues();  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
3	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Options  option  =(Option)it.next();  opt.clearValues();  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
4	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getOptions())  {  requiredOptions  =  options.getRequiredOptions();  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	if(opt!=  null)  {  for(Option  option  :  opt.getOptions())  {  requiredOptions  =  options.getRequiredOptions();  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.removeValues();  }		non-compiled	[CE]  illegal  start  of  expression	13	None	add
7	[BUG]  [BUGGY]    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }		non-compiled	[CE]  illegal  start  of  expression	13	None	add
8	[BUG]  [BUGGY]    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }		non-compiled	[CE]  illegal  start  of  expression	13	None	add
9	[BUG]  [BUGGY]  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.clearValues();  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
10	[BUG]  [BUGGY]  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	}  	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
11	[BUG]  [BUGGY]    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  {  this.options  =  options;  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  [BUGGY]    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [BUGGY]  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	141	141	2	replace	    if(opt!=  null)  {  for(Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }		non-compiled	[CE]  illegal  start  of  expression	13	None	add
