bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Option[]  arguments  =  options.getOptions();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Option[]  arguments  =  options.getOptions();  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Option[]  arguments  =  options.getOptions();		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	19	None	add
2	[BUG]  [BUGGY]    Option  option  =  options.getOption(cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.getOption(cmd);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Option  option  =  options.getOption(cmd);		non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	19	None	add
3	[BUG]  [BUGGY]    Option  option  =  options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]        ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.getOption(t);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Option  option  =  options.getOption(t);		non-compiled	[CE]  cannot  find  symbol  t	19	None	add
4	[BUG]  [BUGGY]    Option  option  =  options.getOption(opt);  [CE]  cannot  find  symbol  opt  [FE]          ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.getOption(opt);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Option  option  =  options.getOption(opt);		non-compiled	[CE]  cannot  find  symbol  opt	19	None	add
5	[BUG]  [BUGGY]    Option  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Option  options  =  options.getOptions();  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Option  options  =  options.getOptions();		non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	19	None	add
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]  boolean  eatTheRest  =  true;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	add	boolean  eatTheRest  =  true;	boolean  eatTheRest  =  false;  	compilable	  [FE]  ComparisonFailure  	18	2	replace
7	[BUG]  [BUGGY]  boolean  eatTheRest  =  true;  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]  boolean  eatTheRest  =  true;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eatTheRest  =  true;	boolean  eatTheRest  =  false;  	compilable	  [FE]  ComparisonFailure  	18	2	replace
8	[BUG]  [BUGGY]  boolean  eattheRest  =  true;  [CE]  cannot  find  symbol  eatTheRest  [FE]      ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]  boolean  eattheRest  =  true;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eattheRest  =  true;	boolean  eatTheRest  =  false;  	non-compiled	[CE]  cannot  find  symbol  eatTheRest	18	None	replace
9	[BUG]  [BUGGY]  boolean  eatTheRest;  [CE]  variable  eatTheRest  might  not  have  been  initialized  [FE]        ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]  boolean  eatTheRest;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eatTheRest;	boolean  eatTheRest  =  false;  	non-compiled	[CE]  variable  eatTheRest  might  not  have  been  initialized	18	None	replace
10	[BUG]  [BUGGY]    String  str  =  cmd.toString();  [CE]  variable  str  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    String  str  =  cmd.toString();  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    String  str  =  cmd.toString();		non-compiled	[CE]  variable  str  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	19	None	add
11	[BUG]  [BUGGY]    Option  option  =  options.getOptions();  [CE]  incompatible  types  [FE]    ComparisonFailure  [CONTEXT]    for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.getOptions();  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	    Option  option  =  options.getOptions();		non-compiled	[CE]  incompatible  types	19	None	add
