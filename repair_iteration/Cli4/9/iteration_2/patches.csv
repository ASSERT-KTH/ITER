bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option[]  arguments  =  options.getRequiredArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  options.getRequiredArguments();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option[]  arguments  =  options.getRequiredArguments();	  Option[]    arguments    =    options.getRequiredOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	29	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOptions(),  requiredOptions);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOptions(),  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOptions(),  requiredOptions);	  Option    option    =    options.getOptions(),    cmd);    	non-compiled	[CE]  ';'  expected	2	None	replace
3	[BUG]  [BUGGY]  Option  option  =  options.getOptions(),  opt);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOptions(),  opt);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOptions(),  opt);	  Option    option    =    options.getOptions(),    cmd);    	non-compiled	[CE]  ';'  expected	2	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOptions(),  cmd,  stopAtNonOption);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOptions(),  cmd,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOptions(),  cmd,  stopAtNonOption);	  Option    option    =    options.getOptions(),    cmd);    	non-compiled	[CE]  ';'  expected	2	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOptions(),  cmd,  requiredOptions);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOptions(),  cmd,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOptions(),  cmd,  requiredOptions);	  Option    option    =    options.getOptions(),    cmd);    	non-compiled	[CE]  ';'  expected	2	None	replace
6	[BUG]  [BUGGY]  Option[]  arguments  =  opt.getArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  opt.getArguments();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option[]  arguments  =  opt.getArguments();	  Option[]    arguments    =    opt.getOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
7	[BUG]  [BUGGY]  Option[]  arguments  =  option.getArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  option.getArguments();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option[]  arguments  =  option.getArguments();	  Option[]    arguments    =    opt.getOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	replace
8	[BUG]  [BUGGY]  Option  option  =  options.getOption(requiredOptions,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(requiredOptions,  cmd);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(requiredOptions,  cmd);	  Option    option    =    options.getOption(opt,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	10	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(this.options,  cmd);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(this.options,  cmd);	  Option    option    =    options.getOption(opt,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	10	None	replace
10	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  opt);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  opt);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  opt);	  Option    option    =    options.getOption(opt,    cmd);    	non-compiled	[CE]  cannot  find  symbol  opt	10	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOption(true);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(true);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(true);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	16	None	replace
12	[BUG]  [BUGGY]  String  str  =  opt.toString();  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  String  str  =  opt.toString();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	String  str  =  opt.toString();	  String    str    =    option.toString();    	non-compiled	[CE]  cannot  find  symbol  opt	15	None	replace
13	[BUG]  [BUGGY]  Boolean  stopAtNonOption  =  false;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Boolean  stopAtNonOption  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Boolean  stopAtNonOption  =  false;	  boolean    stopAtNonOption    =    true;    	non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	4	None	replace
14	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  null;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  stopAtNonOption  =  null;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  stopAtNonOption  =  null;	  boolean    stopAtNonOption    =    true;    	non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	4	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    false;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	31	None	replace
16	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  true;  boolean  stopAtNonOption  =  false;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  stopAtNonOption  =  true;  boolean  stopAtNonOption  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  stopAtNonOption  =  true;  boolean  stopAtNonOption  =  false;	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    false;    	non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	31	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }  else  {  cmd.add(cmd);  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }  else  {  cmd.add(cmd);  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }  else  {  cmd.add(cmd);  }	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    false;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	31	None	replace
18	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	18	None	replace
19	[BUG]  [BUGGY]  if(options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	18	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	18	None	replace
21	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  requiredOptions);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(opt,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(opt,  requiredOptions);	  Option    option    =    options.getOption(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  opt	26	None	replace
22	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  requiredOptions);	  Option    option    =    options.getOption(requiredOptions);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	26	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(options,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(options,  requiredOptions);	  Option    option    =    options.getOption(requiredOptions);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	26	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  requiredOptions);  [CE]  cannot  find  symbol  t  [FE]                        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(t,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(t,  requiredOptions);	  Option    option    =    options.getOption(requiredOptions);    	non-compiled	[CE]  cannot  find  symbol  t	26	None	replace
25	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }  [CE]  cannot  find  symbol  eatTheRest  [FE]          ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }	  boolean    eatTheRest    =    true;    boolean    eattheRest    =    true;    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	19	None	replace
26	[BUG]  [BUGGY]  if(options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }  [CE]  cannot  find  symbol  eatTheRest  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }	  boolean    eatTheRest    =    true;    boolean    eattheRest    =    true;    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	19	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }  [CE]  cannot  find  symbol  eatTheRest  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }	  boolean    eatTheRest    =    true;    boolean    eattheRest    =    true;    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	19	None	replace
28	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions(options);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  cmd.getOptions(options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  options  =  cmd.getOptions(options);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	23	None	replace
29	[BUG]  [BUGGY]  Option  options  =  cmd.getOption(options);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  cmd.getOption(options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  options  =  cmd.getOption(options);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	23	None	replace
30	[BUG]  [BUGGY]  Option  option  =  options.getOptions(),  cmd,  stopAtNonOption;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOptions(),  cmd,  stopAtNonOption;  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOptions(),  cmd,  stopAtNonOption;	  Option    option    =    options.getOptions(),    cmd;    	non-compiled	[CE]  incompatible  types	1	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOptions(),  requiredOptions;  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOptions(),  requiredOptions;  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOptions(),  requiredOptions;	  Option    option    =    options.getOptions(),    cmd;    	non-compiled	[CE]  incompatible  types	1	None	replace
32	[BUG]  [BUGGY]  Option  option  =  cmd.getOptions();  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  cmd.getOptions();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  cmd.getOptions();	  Option    option    =    options.getOptions(),    cmd;    	non-compiled	[CE]  incompatible  types	1	None	replace
33	[BUG]  [BUGGY]  Option  option  =  options.getOptions(),  cmd,  requiredOptions;  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOptions(),  cmd,  requiredOptions;  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOptions(),  cmd,  requiredOptions;	  Option    option    =    options.getOptions(),    cmd;    	non-compiled	[CE]  incompatible  types	1	None	replace
34	[BUG]  [BUGGY]  Option  opt  =  options.getOptions();  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  opt  =  options.getOptions();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  opt  =  options.getOptions();	  Option    option    =    opt.getOptions();    	non-compiled	[CE]  incompatible  types	40	None	replace
35	[BUG]  [BUGGY]  Option  option  =  this.options.getOptions();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  this.options.getOptions();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  this.options.getOptions();	  Option    option    =    opt.getOptions();    	non-compiled	[CE]  incompatible  types	40	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  int  eatTheRest  =  true;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  int  eatTheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  int  eatTheRest  =  true;  }	  boolean    eatTheRest    =    true;    int    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	30	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  false;  int  eatTheRest  =  true;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  false;  int  eatTheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(stopAtNonOption)  {  boolean  eatTheRest  =  false;  int  eatTheRest  =  true;  }	  boolean    eatTheRest    =    true;    int    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	30	None	replace
38	[BUG]  [BUGGY]  int  eatTheRest  =  true;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  int  eatTheRest  =  true;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	int  eatTheRest  =  true;	  boolean    eatTheRest    =    true;    int    eatTheRest    =    true;    	non-compiled	[CE]  incompatible  types	30	None	replace
39	[BUG]  [BUGGY]  String  str  =  options.getString();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  String  str  =  options.getString();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	String  str  =  options.getString();	  String    str    =    options.toString();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
40	[BUG]  [BUGGY]  Option[]  arguments  =  this.options.getArguments();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  this.options.getArguments();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option[]  arguments  =  this.options.getArguments();	  Option[]    arguments    =    this.options.getOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	39	None	replace
41	[BUG]  [BUGGY]  Option[]  arguments  =  cmd.getOptions();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  cmd.getOptions();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option[]  arguments  =  cmd.getOptions();	  Option[]    arguments    =    this.options.getOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	39	None	replace
42	[BUG]  [BUGGY]  Option[]  arguments  =  opt.getParameters();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  opt.getParameters();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option[]  arguments  =  opt.getParameters();	  Option[]    arguments    =    options.getParameters();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	replace
43	[BUG]  [BUGGY]  boolean  eatTheRest  =  options.stopAtNonOption;  [CE]  cannot  find  symbol  stopAtNonOption  [FE]        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  eatTheRest  =  options.stopAtNonOption;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eatTheRest  =  options.stopAtNonOption;	  boolean    eatTheRest    =    null;    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	37	None	replace
44	[BUG]  [BUGGY]  boolean  eatTheRest  =  this.options.stopAtNonOption;  [CE]  cannot  find  symbol  stopAtNonOption  [FE]          ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  eatTheRest  =  this.options.stopAtNonOption;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eatTheRest  =  this.options.stopAtNonOption;	  boolean    eatTheRest    =    null;    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	37	None	replace
45	[BUG]  [BUGGY]  Options  options  =  opt.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Options  options  =  opt.getOptions();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Options  options  =  opt.getOptions();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	35	None	replace
46	[BUG]  [BUGGY]  boolean  useTheRest  =  false;  [CE]  cannot  find  symbol  eatTheRest  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  useTheRest  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  useTheRest  =  false;	  boolean    useTheRest    =    true;    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	5	None	replace
47	[BUG]  [BUGGY]  boolean  usetheRest  =  false;  [CE]  cannot  find  symbol  eatTheRest  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  usetheRest  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  usetheRest  =  false;	  boolean    useTheRest    =    true;    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	5	None	replace
48	[BUG]  [BUGGY]  Option  options  =  this.options.getOptions(cmd);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  this.options.getOptions(cmd);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  options  =  this.options.getOptions(cmd);	  Option    options    =    this.options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	34	None	replace
49	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  options);  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(opt,  options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(opt,  options);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  opt	33	None	replace
50	[BUG]  [BUGGY]  Option  option  =  options.getOption(opts);  [CE]  cannot  find  symbol  opts  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(opts);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(opts);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  opts	33	None	replace
51	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  options);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(t,  options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(t,  options);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	33	None	replace
52	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption;	  boolean    stopAtNonOption;    	non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	25	None	replace
53	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption();  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  stopAtNonOption  =  options.stopAtNonOption();  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  stopAtNonOption  =  options.stopAtNonOption();	  boolean    stopAtNonOption;    	non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	25	None	replace
54	[BUG]  [BUGGY]  Option  option  =  opt.getOption(t);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  opt.getOption(t);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  opt.getOption(t);	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  cannot  find  symbol  t	22	None	replace
55	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  cmd);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(str,  cmd);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(str,  cmd);	  Option    option    =    options.getOption(t,    cmd);    	non-compiled	[CE]  cannot  find  symbol  str	32	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  cmd,  stopAtNonOption);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(opt,  cmd,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(opt,  cmd,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  opt	12	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  opt,  stopAtNonOption);  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  opt,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  opt,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  opt	12	None	replace
58	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  cmd,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(options,  cmd,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(options,  cmd,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  requiredOptions);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  requiredOptions);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption,  requiredOptions);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
60	[BUG]  [BUGGY]  Option  eatTheRest  =  true;  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  eatTheRest  =  true;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  eatTheRest  =  true;	  boolean    eatTheRest    =    true;    Option    eatTheRest    =    true;    	non-compiled	[CE]  incompatible  types	21	None	replace
61	[BUG]  [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  Option  eatTheRest  =  true;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  Option  eatTheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  Option  eatTheRest  =  true;  }	  boolean    eatTheRest    =    true;    Option    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	replace
62	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  Option  eatTheRest  =  true;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  Option  eatTheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  Option  eatTheRest  =  true;  }	  boolean    eatTheRest    =    true;    Option    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	replace
63	[BUG]  [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  false;  Option  eatTheRest  =  true;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  false;  Option  eatTheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(stopAtNonOption)  {  boolean  eatTheRest  =  false;  Option  eatTheRest  =  true;  }	  boolean    eatTheRest    =    true;    Option    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	replace
64	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  options);	  Option    option    =    options.getOption(options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	11	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  opt,  cmd);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(options,  opt,  cmd);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(options,  opt,  cmd);	  Option    option    =    options.getOption(options,    cmd);    	non-compiled	[CE]  cannot  find  symbol  opt	11	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(this.options,  t);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  t	17	None	replace
67	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  this.options);  [CE]  cannot  find  symbol  opt  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(opt,  this.options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(opt,  this.options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  opt	17	None	replace
68	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  this.options.getOption(options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  this.options.getOption(options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	17	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  cannot  find  symbol  opt  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  opt	36	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	36	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [CE]  cannot  find  symbol  t  [FE]                      ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(t,  stopAtNonOption);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  t	36	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  str);  [CE]  cannot  find  symbol  str  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  str);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  str);	  Option    option    =    options.getOption(cmd,    t);    	non-compiled	[CE]  cannot  find  symbol  str	38	None	replace
73	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest);  [CE]  cannot  find  symbol  eatTheRest  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  eatTheRest);	  Option    option    =    options.getOption(cmd,    t);    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	38	None	replace
74	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Boolean  eatTheRest  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	add	Boolean  eatTheRest  =  false;	  boolean    eatTheRest    =    true;    Boolean    eatTheRest    =    true;    	compilable	  [FE]  ComparisonFailure  	20	2	replace
75	[BUG]  [BUGGY]  Boolean  eatTheRest  =  false;  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Boolean  eatTheRest  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Boolean  eatTheRest  =  false;	  boolean    eatTheRest    =    true;    Boolean    eatTheRest    =    true;    	compilable	  [FE]  ComparisonFailure  	20	2	replace
76	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Boolean  eatTheRest  =  true;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	add	Boolean  eatTheRest  =  true;	  boolean    eatTheRest    =    true;    Boolean    eatTheRest    =    true;    	compilable	  [FE]  ComparisonFailure  	20	2	replace
77	[BUG]  [BUGGY]  Boolean  eatTheRest  =  true;  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Boolean  eatTheRest  =  true;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Boolean  eatTheRest  =  true;	  boolean    eatTheRest    =    true;    Boolean    eatTheRest    =    true;    	compilable	  [FE]  ComparisonFailure  	20	2	replace
78	[BUG]  [BUGGY]  boolean  argumentRest  =  false;  [CE]  cannot  find  symbol  eatTheRest  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  argumentRest  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  argumentRest  =  false;	  boolean    argumentRest    =    true;    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	27	None	replace
79	[BUG]  [BUGGY]  Option[]  arguments  =  options.helpOptions();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  options.helpOptions();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option[]  arguments  =  options.helpOptions();	  Option[]    arguments    =    options.getRequiredOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	29	None	replace
80	[BUG]  [BUGGY]  boolean  argumentsRest  =  false;  [CE]  cannot  find  symbol  eatTheRest  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  argumentsRest  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  argumentsRest  =  false;	  boolean    argumentRest    =    true;    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	27	None	replace
81	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  null,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  null,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  null,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
82	[BUG]  [BUGGY]  String  str  =  this.options.getString();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  String  str  =  this.options.getString();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	String  str  =  this.options.getString();	  String    str    =    this.options.toString();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
83	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  this.options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  this.options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	17	None	replace
84	[BUG]  [BUGGY]  boolean  eatTheRest  =  false;  int  eatTheRest  =  false;  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  eatTheRest  =  false;  int  eatTheRest  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eatTheRest  =  false;  int  eatTheRest  =  false;	  boolean    eatTheRest    =    true;    int    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	30	None	replace
85	[BUG]  [BUGGY]  if(this.options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }  [CE]  cannot  find  symbol  eatTheRest  [FE]          ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(this.options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(this.options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  true;  }	  boolean    eatTheRest    =    true;    boolean    eattheRest    =    true;    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	19	None	replace
86	[BUG]  [BUGGY]  Option  option  =  options.getOptions(),  this.options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOptions(),  this.options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOptions(),  this.options);	  Option    option    =    options.getOptions(),    cmd);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
87	[BUG]  [BUGGY]  boolean  eatTheRest  =  false;  Option  eatTheRest  =  false;  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  eatTheRest  =  false;  Option  eatTheRest  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eatTheRest  =  false;  Option  eatTheRest  =  false;	  boolean    eatTheRest    =    true;    Option    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	21	None	replace
88	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  false,  cmd.length()  >  0;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  stopAtNonOption  =  false,  cmd.length()  >  0;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  stopAtNonOption  =  false,  cmd.length()  >  0;	  boolean    stopAtNonOption    =    false;    	non-compiled	[CE]  ';'  expected	6	None	replace
89	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.eatTheRest;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  stopAtNonOption  =  this.options.eatTheRest;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  stopAtNonOption  =  this.options.eatTheRest;	  boolean    stopAtNonOption;    	non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	25	None	replace
90	[BUG]  [BUGGY]  if(this.options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(this.options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(this.options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  true;  }	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    true;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	18	None	replace
91	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(!stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    false;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	31	None	replace
92	[BUG]  [BUGGY]  if(this.options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }  [CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(this.options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(this.options  ==  null)  {  boolean  eatTheRest  =  true;  boolean  eatTheRest  =  false;  }	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    false;    	non-compiled	[CE]  variable  eatTheRest  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	31	None	replace
93	[BUG]  [BUGGY]  boolean  argumentRest  =  null;  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  argumentRest  =  null;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  argumentRest  =  null;	  boolean    argumentRest    =    true;    	non-compiled	[CE]  incompatible  types	27	None	replace
94	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(this.options,  this.options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(this.options,  this.options);	  Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	17	None	replace
95	[BUG]  [BUGGY]  String  str  =  this.options.trim();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  String  str  =  this.options.trim();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	String  str  =  this.options.trim();	  String    str    =    this.options.toString();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
96	[BUG]  [BUGGY]  String  str  =  this.options.toString(t);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  String  str  =  this.options.toString(t);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	String  str  =  this.options.toString(t);	  String    str    =    this.options.toString();    	non-compiled	[CE]  cannot  find  symbol  t	28	None	replace
97	[BUG]  [BUGGY]  Option[]  arguments  =  options.getParameterList();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  options.getParameterList();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option[]  arguments  =  options.getParameterList();	  Option[]    arguments    =    options.getParameters();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	replace
98	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  buffer);  [CE]  cannot  find  symbol  buffer  [FE]              ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  buffer);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  buffer);	  Option    option    =    options.getOption(cmd,    t);    	non-compiled	[CE]  cannot  find  symbol  buffer	38	None	replace
99	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  =  false;  [CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  stopAtNonOption  =  this.options.stopAtNonOption  =  false;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  stopAtNonOption  =  this.options.stopAtNonOption  =  false;	  boolean    stopAtNonOption    =    false;    	non-compiled	[CE]  variable  stopAtNonOption  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
100	[BUG]  [BUGGY]  Option  option  =  opt.getOptions(),  cmd;  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  opt.getOptions(),  cmd;  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  opt.getOptions(),  cmd;	  Option    option    =    options.getOptions(),    cmd;    	non-compiled	[CE]  cannot  find  symbol  opt	1	None	replace
101	[BUG]  [BUGGY]  Option[]  arguments  =  options.getAllRequiredOptions();  [CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option[]  arguments  =  options.getAllRequiredOptions();  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option[]  arguments  =  options.getAllRequiredOptions();	  Option[]    arguments    =    options.getRequiredOptions();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	29	None	replace
102	[BUG]  [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  false;  }  [CE]  cannot  find  symbol  eatTheRest  [FE]          ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  false;  }  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	if(stopAtNonOption)  {  boolean  eatTheRest  =  true;  boolean  eattheRest  =  false;  }	  boolean    eatTheRest    =    true;    boolean    eatTheRest    =    false;    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	31	None	replace
103	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str);  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(options,  str);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(options,  str);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  str	33	None	replace
104	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  this.options.getOption(t);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  this.options.getOption(t);	  Option    options    =    this.options.getOptions();    	non-compiled	[CE]  cannot  find  symbol  t	34	None	replace
105	[BUG]  [BUGGY]  Option  options  =  this.options.getOption(t);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  options  =  this.options.getOption(t);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  options  =  this.options.getOption(t);	  Option    options    =    this.options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	34	None	replace
106	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
107	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  block,  stopAtNonOption);  [CE]  cannot  find  symbol  block  [FE]                    ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  Option  option  =  options.getOption(cmd,  block,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	Option  option  =  options.getOption(cmd,  block,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  cannot  find  symbol  block	12	None	replace
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  eatTheRest  =  stopAtNonOption;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	add	boolean  eatTheRest  =  stopAtNonOption;	  boolean    eatTheRest    =    null;    	compilable	  [FE]  ComparisonFailure  	37	2	replace
109	[BUG]  [BUGGY]  boolean  eatTheRest  =  stopAtNonOption;  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]        for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();      [BUGGY]  boolean  eatTheRest  =  stopAtNonOption;  [BUGGY]        if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	146	146	2	replace	boolean  eatTheRest  =  stopAtNonOption;	  boolean    eatTheRest    =    null;    	compilable	  [FE]  ComparisonFailure  	37	2	replace
