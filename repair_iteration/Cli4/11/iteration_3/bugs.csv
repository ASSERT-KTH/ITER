bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  stopAtNonOption);	  Option    option    =    options.getOption(this.options,    t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	49	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  str);  [CE]  cannot  find  symbol  str  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  str);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  str);	  Option    option    =    options.getOption(this.options,    t);    	non-compiled	[CE]  cannot  find  symbol  str	49	None	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	                Arrays.asList(flatten(this.options,        arguments,        stopAtNonOption));        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	compilable	  [FE]  ComparisonFailure  	19	2	add
4	[BUG]  [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	                Arrays.asList(flatten(this.options,        arguments,        stopAtNonOption));        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	compilable	  [FE]  ComparisonFailure  	19	2	add
5	[BUG]  [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  argument  [FE]      ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	                Arrays.asList(flatten(this.options,        arguments,        stopAtNonOption));        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	non-compiled	[CE]  cannot  find  symbol  argument	19	None	add
6	[BUG]  [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  Arguments  [FE]        ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	                Arrays.asList(flatten(this.options,        arguments,        stopAtNonOption));        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	non-compiled	[CE]  cannot  find  symbol  Arguments	19	None	add
7	[BUG]  [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  StopAtNonOption  [FE]          ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	                Arrays.asList(flatten(this.options,        arguments,        stopAtNonOption));        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	non-compiled	[CE]  cannot  find  symbol  StopAtNonOption	19	None	add
8	[BUG]  [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [CE]  cannot  find  symbol  argument  [FE]            ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	                Arrays.asList(flatten(this.options,        arguments,        stopAtNonOption));        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));	  	non-compiled	[CE]  cannot  find  symbol  argument	19	None	add
9	[BUG]  [BUGGY]  if(options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]    ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	20	None	replace
10	[BUG]  [BUGGY]  if(this.options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]      ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(this.options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(this.options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	20	None	replace
11	[BUG]  [BUGGY]  if(this.options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(this.options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(this.options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
12	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  options);	  Option    opt    =    options.getOption(t,    this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	44	None	replace
13	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str,  this.options);  [CE]  cannot  find  symbol  str  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(str,  this.options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(str,  this.options);	  Option    opt    =    options.getOption(t,    this.options);    	non-compiled	[CE]  cannot  find  symbol  str	44	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(t,  arguments);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	64	None	replace
15	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	14	None	replace
17	[BUG]  [BUGGY]  Option  opt  =  this.options.getOption(this.options,  options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  this.options.getOption(this.options,  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  this.options.getOption(this.options,  options);	  Option    opt    =    this.options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	67	None	replace
18	[BUG]  [BUGGY]  Option  opt  =  this.options.getOption(this.options,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  this.options.getOption(this.options,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  this.options.getOption(this.options,  arguments);	  Option    opt    =    this.options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	67	None	replace
19	[BUG]  [BUGGY]  Option  opt  =  this.options.getOption(t,  options);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  this.options.getOption(t,  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  this.options.getOption(t,  options);	  Option    opt    =    this.options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	67	None	replace
20	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(arguments,  stopAtNonOption);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	46	None	replace
21	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  false));  [CE]  cannot  find  symbol  tokenList  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  cannot  find  symbol  tokenList	26	None	replace
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
23	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
24	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
25	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  Arrays.asList(flatten(this.options,  arguments,  false));  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
27	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
28	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  options);	  Option    option    =    options.getOption(options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	57	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  this.options,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  this.options,  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(options,  this.options,  cmd);	  Option    option    =    options.getOption(options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	57	None	replace
30	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  cmd,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  cmd,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(options,  cmd,  stopAtNonOption);	  Option    option    =    options.getOption(options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	57	None	replace
31	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  null,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  null,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  null,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	29	None	replace
32	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  options,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  options,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  options,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	29	None	replace
33	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  arguments,  null,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  arguments,  null,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  arguments,  null,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	29	None	replace
34	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  stopAtNonOption,  requiredOptions));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  stopAtNonOption,  requiredOptions));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  stopAtNonOption,  requiredOptions));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	29	None	replace
35	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  options,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  options,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  options,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	35	None	replace
36	[BUG]  [BUGGY]  Option  options  =  this.options.getOptions(options);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  this.options.getOptions(options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  this.options.getOptions(options);	  Option    options    =    options.getOptions(this.options);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	54	None	replace
37	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions(this.options);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  cmd.getOptions(this.options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  cmd.getOptions(this.options);	  Option    options    =    options.getOptions(this.options);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	54	None	replace
38	[BUG]  [BUGGY]  Option  options  =  options.getOptions(this.options,  arguments);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  options.getOptions(this.options,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  options.getOptions(this.options,  arguments);	  Option    options    =    options.getOptions(this.options);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	54	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  cmd);  [CE]  cannot  find  symbol  str  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(str,  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(str,  cmd);	  Option    option    =    options.getOption(t,    cmd);    	non-compiled	[CE]  cannot  find  symbol  str	40	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption);	  Option    option    =    options.getOption(t,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	40	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  cannot  find  symbol  t  [FE]                        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(t,  str);	  Option    option    =    options.getOption(t,    cmd);    	non-compiled	[CE]  cannot  find  symbol  t	40	None	replace
42	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  true));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  true));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    =    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
43	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    =    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
44	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  arguments,  cmd);	  Option    opt    =    options.getOption(this.options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	39	None	replace
45	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  cmd,  stopAtNonOption);	  Option    opt    =    options.getOption(this.options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	39	None	replace
46	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  cmd,  eatTheRest);	  Option    opt    =    options.getOption(this.options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	39	None	replace
47	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options,  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  this.options,  cmd);	  Option    opt    =    options.getOption(this.options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	39	None	replace
48	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  arguments,  eatTheRest);	  Option    opt    =    options.getOption(this.options,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	62	None	replace
49	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  this.options,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(cmd,  this.options,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  this.options,  eatTheRest);	  Option    opt    =    options.getOption(this.options,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	62	None	replace
50	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  t,  eatTheRest);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  t,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  t,  eatTheRest);	  Option    opt    =    options.getOption(this.options,    eatTheRest);    	non-compiled	[CE]  cannot  find  symbol  t	62	None	replace
51	[BUG]  [BUGGY]  Option  options  =  this.opts.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  this.opts.getOptions();  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  this.opts.getOptions();	  Option    options    =    opts.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	34	None	replace
52	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  null,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  null,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  null,  stopAtNonOption));	  Arrays.asList(flatten(this.options,    arguments,    null));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	66	None	replace
53	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption);	  Arrays.asList(flatten(this.options,    arguments,    null));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	66	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption(test);  [CE]  cannot  find  symbol  test  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(test);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(test);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  cannot  find  symbol  test	5	None	replace
55	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [CE]  cannot  find  symbol  argument  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    argument,    eatTheRest));    	non-compiled	[CE]  cannot  find  symbol  argument	16	None	replace
56	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    argument,    eatTheRest));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
57	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  Arguments  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    Arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  Arguments	23	None	replace
58	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  null),  stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  null),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  null),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	31	None	replace
59	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption,  requiredOptions);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption,  requiredOptions);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption,  requiredOptions);	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	31	None	replace
60	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption,  cmd);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption,  cmd);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption,  cmd);	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	31	None	replace
61	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption,  options);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption,  options);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption,  options);	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	31	None	replace
62	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  this.options,  arguments,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  this.options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  this.options,  arguments,  stopAtNonOption));	  Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	1	None	replace
63	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption));	  Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	1	None	replace
64	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  arguments));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  arguments));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  arguments));	  Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	1	None	replace
65	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  this.options,  eatTheRest);	  Option    opt    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	43	None	replace
66	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  this.options,  stopAtNonOption);	  Option    opt    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	43	None	replace
67	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  this.options,  arguments);	  Option    opt    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	43	None	replace
68	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str,  cmd);  [CE]  cannot  find  symbol  str  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(str,  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(str,  cmd);	  Option    opt    =    options.getOption(t,    cmd);    	non-compiled	[CE]  cannot  find  symbol  str	38	None	replace
69	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(cmd,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  stopAtNonOption);	  Option    opt    =    options.getOption(t,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	38	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  arguments,  eatTheRest);	  Option    option    =    options.getOption(this.options,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	60	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  cmd,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  cmd,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  cmd,  eatTheRest);	  Option    option    =    options.getOption(this.options,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	60	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  this.options,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  this.options,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  this.options,  eatTheRest);	  Option    option    =    options.getOption(this.options,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	60	None	replace
73	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(this.options,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	60	None	replace
74	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  this.options,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  this.options,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  this.options,  eatTheRest);	  Option    option    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	48	None	replace
75	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  this.options,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  this.options,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  this.options,  arguments);	  Option    option    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	48	None	replace
76	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(this.options,  options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  this.options.getOption(this.options,  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  this.options.getOption(this.options,  options);	  Option    option    =    options.getOption(this.options,    this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	48	None	replace
77	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  requiredOptions,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  requiredOptions,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  requiredOptions,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    opts,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	69	None	replace
78	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  arguments,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    opts,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	69	None	replace
79	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  [CE]  cannot  find  symbol  StopAtNonOption  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    StopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  StopAtNonOption	68	None	replace
80	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    StopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	68	None	replace
81	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  true));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  true));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    true));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	10	None	replace
82	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  arguments);  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(t,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(t,  arguments);	  Option    opt    =    options.getOption(arguments);    	non-compiled	[CE]  cannot  find  symbol  t	55	None	replace
83	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(this.options,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  this.options.getOption(this.options,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  this.options.getOption(this.options,  arguments);	  Option    option    =    this.options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	50	None	replace
84	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(t,  options);  [CE]  cannot  find  symbol  t  [FE]                        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  this.options.getOption(t,  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  this.options.getOption(t,  options);	  Option    option    =    this.options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  t	50	None	replace
85	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    arguments));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	37	None	replace
86	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  cmd));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  cmd));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  cmd));	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    arguments));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	37	None	replace
87	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  arguments));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  arguments));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  arguments));	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    arguments));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	37	None	replace
88	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments),  stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    arguments));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	37	None	replace
89	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));  [CE]  cannot  find  symbol  argument  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    tokenList    =    Arrays.asList(flatten(this.options,    argument,    false));    	non-compiled	[CE]  cannot  find  symbol  argument	28	None	replace
90	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  true));  [CE]  cannot  find  symbol  argument  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  true));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    tokenList    =    Arrays.asList(flatten(this.options,    argument,    false));    	non-compiled	[CE]  cannot  find  symbol  argument	28	None	replace
91	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    tokenList    =    Arrays.asList(flatten(this.options,    argument,    false));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
92	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  arguments,  cmd);	  Option    option    =    options.getOption(this.options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	45	None	replace
93	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  cmd,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  cmd,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  cmd,  stopAtNonOption);	  Option    option    =    options.getOption(this.options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	45	None	replace
94	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  cmd,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  cmd,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  cmd,  arguments);	  Option    option    =    options.getOption(this.options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	45	None	replace
95	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    true));    List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	add
96	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  Arrays.asList(flatten(this.options,  arguments,  true));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  Arrays.asList(flatten(this.options,  arguments,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    true));    Arrays.asList(flatten(this.options,  arguments,  true));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	add
97	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  true));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    true));    List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  true));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	add
98	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    true));    List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	9	None	add
99	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  requiredOptions));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  requiredOptions));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  requiredOptions));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	8	None	replace
100	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  str,  arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  str,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  str,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  str	8	None	replace
101	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  expectedOptions));  [CE]  cannot  find  symbol  expectedOptions  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  expectedOptions));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  expectedOptions));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  expectedOptions	8	None	replace
102	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  requiredOptions));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  requiredOptions));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  requiredOptions));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption),    arguments);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	7	None	replace
103	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption),  arguments,  eatTheRest);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption),  arguments,  eatTheRest);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption),  arguments,  eatTheRest);	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption),    arguments);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	7	None	replace
104	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  arguments,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption),    arguments);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	7	None	replace
105	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  stopAtNonOption);	  Option    opt    =    options.getOption(this.options,    t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	42	None	replace
106	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  this.stopAtNonOption);  [CE]  cannot  find  symbol  stopAtNonOption  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  this.stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  this.stopAtNonOption);	  Option    opt    =    options.getOption(this.options,    t);    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	42	None	replace
107	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  arguments,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(cmd,  arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  arguments,  stopAtNonOption);	  Option    opt    =    options.getOption(cmd,    arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	71	None	replace
108	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  cmd,  arguments);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(t,  cmd,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(t,  cmd,  arguments);	  Option    opt    =    options.getOption(cmd,    arguments);    	non-compiled	[CE]  cannot  find  symbol  t	71	None	replace
109	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  cmd,  arguments);	  Option    opt    =    options.getOption(cmd,    arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	71	None	replace
110	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  str,  arguments);  [CE]  cannot  find  symbol  str  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(cmd,  str,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  str,  arguments);	  Option    opt    =    options.getOption(cmd,    arguments);    	non-compiled	[CE]  cannot  find  symbol  str	71	None	replace
111	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  true));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  true));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	12	None	replace
112	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  this.options,  false));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  this.options,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(options,  this.options,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	12	None	replace
113	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  this.options,  arguments));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  this.options,  arguments));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(options,  this.options,  arguments));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	52	None	replace
114	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  option,  stopAtNonOption));  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  option,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  option,  stopAtNonOption));	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    argument,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  option	21	None	replace
115	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  cmd,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  cmd,  eatTheRest));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  cmd,  eatTheRest));	  Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	2	None	replace
116	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  options,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  options,  eatTheRest));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  options,  eatTheRest));	  Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	2	None	replace
117	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	compilable	  [FE]  ComparisonFailure  	17	2	replace
118	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	compilable	  [FE]  ComparisonFailure  	17	2	replace
119	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	17	None	replace
120	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  null,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  null,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  null,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments,    null));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	30	None	replace
121	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  null));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  null));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  null));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments,    null));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	30	None	replace
122	[BUG]  [BUGGY]  Option  option  =  options.getOptions(this.options);  [CE]  method  getOptions  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOptions(this.options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOptions(this.options);	  Option    option    =    options.getOptions();    	non-compiled	[CE]  method  getOptions  in  class  Options  cannot  be  applied  to  given  types;	13	None	replace
123	[BUG]  [BUGGY]  Option  options  =  options.getOption(t);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  options.getOption(t);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  options.getOption(t);	  Option    opt    =    options.getOption(str);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	4	None	replace
124	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  this.stopAtNonOption);  [CE]  cannot  find  symbol  stopAtNonOption  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  this.stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  arguments,  this.stopAtNonOption);	  Option    option    =    options.getOption(this.options,    arguments);    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	47	None	replace
125	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  null);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  arguments,  null);	  Option    option    =    options.getOption(this.options,    arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	47	None	replace
126	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.eatTheRest));  [CE]  cannot  find  symbol  eatTheRest  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    this.stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	70	None	replace
127	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  requiredOptions));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  requiredOptions));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  requiredOptions));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    this.stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	70	None	replace
128	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  this.stopAtNonOption));  [CE]  cannot  find  symbol  stopAtNonOption  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  this.stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  this.stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    this.stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	70	None	replace
129	[BUG]  [BUGGY]  Options  options  =  this.options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Options  options  =  this.options.getOptions();  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Options  options  =  this.options.getOptions();	  Option    options    =    this.options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
130	[BUG]  [BUGGY]  Option  options  =  this.options.getOptions(true);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  this.options.getOptions(true);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  this.options.getOptions(true);	  Option    options    =    this.options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	32	None	replace
131	[BUG]  [BUGGY]  ArrayList  tokenList  =  this.options.asList(flatten(arguments,  true));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  this.options.asList(flatten(arguments,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  this.options.asList(flatten(arguments,  true));	  ArrayList    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    true));    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
132	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  arguments,  stopAtNonOption);	  Option    opt    =    options.getOption(this.options,    arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	41	None	replace
133	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  this.stopAtNonOption);  [CE]  cannot  find  symbol  stopAtNonOption  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  this.stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  arguments,  this.stopAtNonOption);	  Option    opt    =    options.getOption(this.options,    arguments);    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	41	None	replace
134	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	58	None	replace
135	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd,  arguments);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  cmd,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(t,  cmd,  arguments);	  Option    option    =    options.getOption(cmd,    arguments);    	non-compiled	[CE]  cannot  find  symbol  t	58	None	replace
136	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  arguments,  eatTheRest);	  Option    option    =    options.getOption(cmd,    arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	58	None	replace
137	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  eatTheRest,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  eatTheRest,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  eatTheRest,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    eatTheRest,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	56	None	replace
138	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    eatTheRest,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	56	None	replace
139	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  this.options));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  this.options));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  this.options));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    eatTheRest,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	56	None	replace
140	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null));	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    List    <    String>    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	22	None	replace
141	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  null));  [CE]  cannot  find  symbol  arguments  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  null));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  null));	  List    tokenList    =    Arrays.asList(flatten(this.options,    this.arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
142	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  stoppingAtNonOption));  [CE]  cannot  find  symbol  arguments  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  stoppingAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  stoppingAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    this.arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
143	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  eatTheRest));  [CE]  cannot  find  symbol  arguments  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    this.arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
144	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);	  Option    option    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	65	None	replace
145	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd,  eatTheRest);  [CE]  cannot  find  symbol  t  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  cmd,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(t,  cmd,  eatTheRest);	  Option    option    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  cannot  find  symbol  t	65	None	replace
146	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  t,  eatTheRest);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  t,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  t,  eatTheRest);	  Option    option    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  cannot  find  symbol  t	65	None	replace
147	[BUG]  [BUGGY]  Option  options  =  cmd.getOption(this.options);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  cmd.getOption(this.options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  cmd.getOption(this.options);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	33	None	replace
148	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(options,  options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  this.options.getOption(options,  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  this.options.getOption(options,  options);	  Option    option    =    options.getOption(this.options,    options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	59	None	replace
149	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  t,  options);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  t,  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  t,  options);	  Option    option    =    options.getOption(this.options,    options);    	non-compiled	[CE]  cannot  find  symbol  t	59	None	replace
150	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  cmd,  arguments,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  cmd,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  cmd,  arguments,  stopAtNonOption));	  Arrays.asList(flatten(this.options,    cmd,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	3	None	replace
151	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  options,  cmd,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  options,  cmd,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  options,  cmd,  stopAtNonOption));	  Arrays.asList(flatten(this.options,    cmd,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	3	None	replace
152	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  cmd,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  cmd,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  cmd,  stopAtNonOption));	  Arrays.asList(flatten(this.options,    cmd,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	3	None	replace
153	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	36	None	replace
154	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  stopAtNonOption,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  stopAtNonOption,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  stopAtNonOption,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	36	None	replace
155	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	36	None	replace
156	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	36	None	replace
157	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(arguments,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	11	None	replace
158	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  false),  stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  false),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  false),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(arguments,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	11	None	replace
159	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  false,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  false,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  false,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(arguments,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	11	None	replace
160	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption,  this.options));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption,  this.options));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption,  this.options));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption,    arguments));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	6	None	replace
161	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  this.stopAtNonOption));  [CE]  cannot  find  symbol  stopAtNonOption  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  this.stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  this.stopAtNonOption));	  Arrays.asList(flatten(this.options,    arguments));    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	63	None	replace
162	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  options,  arguments));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  options,  arguments));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  options,  arguments));	  Arrays.asList(flatten(this.options,    arguments));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	63	None	replace
163	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  cmd,  eatTheRest);  [CE]  cannot  find  symbol  t  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(t,  cmd,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(t,  cmd,  eatTheRest);	  Option    opt    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  cannot  find  symbol  t	72	None	replace
164	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);	  Option    opt    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	72	None	replace
165	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  arguments,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(cmd,  arguments,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  arguments,  eatTheRest);	  Option    opt    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	72	None	replace
166	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  t,  eatTheRest);  [CE]  cannot  find  symbol  t  [FE]                        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(cmd,  t,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  t,  eatTheRest);	  Option    opt    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  cannot  find  symbol  t	72	None	replace
167	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	compilable	  [FE]  ComparisonFailure  	18	2	replace
168	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	compilable	  [FE]  ComparisonFailure  	18	2	replace
169	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	compilable	  [FE]  ComparisonFailure  	18	2	replace
170	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	compilable	  [FE]  ComparisonFailure  	18	2	replace
171	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));  }  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    tokenList    =    Arrays.asList(flatten(this.options,    argument,    false));    	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	28	None	replace
172	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments),  stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	52	None	replace
173	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  }  [CE]  cannot  find  symbol  argument  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    argument,    eatTheRest));    	non-compiled	[CE]  cannot  find  symbol  argument	16	None	replace
174	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  cmd,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  cmd,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(options,  cmd,  eatTheRest);	  Option    option    =    options.getOption(options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	57	None	replace
175	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  this.arguments,  stopAtNonOption);  [CE]  cannot  find  symbol  arguments  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  this.arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  this.arguments,  stopAtNonOption);	  Option    opt    =    options.getOption(this.options,    arguments);    	non-compiled	[CE]  cannot  find  symbol  arguments	41	None	replace
176	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  this.eatTheRest);  [CE]  cannot  find  symbol  eatTheRest  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments,  this.eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  arguments,  this.eatTheRest);	  Option    opt    =    options.getOption(this.options,    arguments);    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	41	None	replace
177	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(arguments,  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(arguments,  cmd);	  Option    option    =    options.getOption(t,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	40	None	replace
178	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  this.options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(options,  this.options);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	64	None	replace
179	[BUG]  [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopATNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  stopATNonOption  [FE]    ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopATNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	                Arrays.asList(flatten(this.options,        arguments,        stopAtNonOption));        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopATNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	non-compiled	[CE]  cannot  find  symbol  stopATNonOption	19	None	add
180	[BUG]  [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopATNonOption));  [CE]  cannot  find  symbol  stopATNonOption  [FE]      ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopATNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	                Arrays.asList(flatten(this.options,        arguments,        stopAtNonOption));        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopATNonOption));	  	non-compiled	[CE]  cannot  find  symbol  stopATNonOption	19	None	add
181	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  this.options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  this.options);	  Option    option    =    options.getOption(this.options,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	45	None	replace
182	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));  }  [CE]  cannot  find  symbol  tokenList  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  cannot  find  symbol  tokenList	26	None	replace
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
184	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
185	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  true));  [CE]  cannot  find  symbol  tokenList  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  true));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  cannot  find  symbol  tokenList	26	None	replace
186	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions(options);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  cmd.getOptions(options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  cmd.getOptions(options);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	33	None	replace
187	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  str,  eatTheRest);  [CE]  cannot  find  symbol  str  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(cmd,  str,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  str,  eatTheRest);	  Option    opt    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  cannot  find  symbol  str	72	None	replace
188	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  List  =  Arrays.asList(flatten(this.options,  arguments,  false));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  List  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  List  =  Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    =    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
189	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  false));  [CE]  cannot  find  symbol  List  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    =    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  cannot  find  symbol  List	27	None	replace
190	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(opt,  options);  [CE]  cannot  find  symbol  opt  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  this.options.getOption(opt,  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  this.options.getOption(opt,  options);	  Option    option    =    this.options.getOption(options);    	non-compiled	[CE]  cannot  find  symbol  opt	50	None	replace
191	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  tokenList  =  Arrays.asList(flatten(options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(arguments,    false));    	compilable	  [FE]  ComparisonFailure  	11	2	replace
192	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  arguments,  false));  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(arguments,    false));    	compilable	  [FE]  ComparisonFailure  	11	2	replace
193	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.eatTheRest,  stopAtNonOption));  [CE]  cannot  find  symbol  eatTheRest  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.eatTheRest,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.eatTheRest,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    opts,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	69	None	replace
194	[BUG]  [BUGGY]  List  tokenList  =  this.options.asList(flatten(this.arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  arguments  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  this.options.asList(flatten(this.arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  this.options.asList(flatten(this.arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    this.arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
195	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(this.options,  this.arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  arguments  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(this.options,  this.arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  options.asList(flatten(this.options,  this.arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    this.arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
196	[BUG]  [BUGGY]  Option  options  =  opts.getOptions(this.options);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  opts.getOptions(this.options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  opts.getOptions(this.options);	  Option    options    =    options.getOptions(this.options);    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	54	None	replace
197	[BUG]  [BUGGY]  Option  opt  =  options.getOption(arguments,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(arguments,  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(arguments,  cmd);	  Option    opt    =    options.getOption(t,    cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	38	None	replace
198	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  }  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    true));    	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	25	None	replace
199	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	14	None	replace
200	[BUG]  [BUGGY]  if(options!=  null)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(options!=  null)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(options!=  null)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	15	None	replace
201	[BUG]  [BUGGY]  if(options!=  null)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(options!=  null)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(options!=  null)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
202	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  this.eatTheRest));  [CE]  cannot  find  symbol  eatTheRest  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  this.eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  this.eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    this.stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	70	None	replace
203	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.eattheRest));  [CE]  cannot  find  symbol  eattheRest  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.eattheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.eattheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    this.stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  eattheRest	70	None	replace
204	[BUG]  [BUGGY]  Option  option  =  this.options.getOptions();  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  this.options.getOptions();  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  this.options.getOptions();	  Option    options    =    this.options.getOptions();    	non-compiled	[CE]  incompatible  types	32	None	replace
205	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  this.stopAtNonOption));  [CE]  cannot  find  symbol  stopAtNonOption  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  this.stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  this.stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	29	None	replace
206	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  options,  null,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  options,  null,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  options,  null,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	29	None	replace
207	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  opt,  cmd,  arguments));  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  opt,  cmd,  arguments));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  opt,  cmd,  arguments));	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    arguments));    	non-compiled	[CE]  cannot  find  symbol  opt	37	None	replace
208	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  options,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  options,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  options,  stopAtNonOption);	  Option    option    =    options.getOption(this.options,    options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	59	None	replace
209	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  options,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  options,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  options,  eatTheRest);	  Option    option    =    options.getOption(this.options,    options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	59	None	replace
210	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [CE]  cannot  find  symbol  argument  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    argument,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  argument	21	None	replace
211	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  eatTheRest),  stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  eatTheRest),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  eatTheRest),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	31	None	replace
212	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  eatTheRest,  stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  eatTheRest,  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  eatTheRest,  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	31	None	replace
213	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  str,  eatTheRest);  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  str,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  str,  eatTheRest);	  Option    option    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  cannot  find  symbol  str	65	None	replace
214	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	compilable	  [FE]  ComparisonFailure  	18	2	replace
215	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	compilable	  [FE]  ComparisonFailure  	18	2	replace
216	[BUG]  [BUGGY]  List  tokenList  =  this.options.asList(flatten(arguments,  true));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  this.options.asList(flatten(arguments,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  this.options.asList(flatten(arguments,  true));	  ArrayList    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    true));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	53	None	replace
217	[BUG]  [BUGGY]  ArrayList  tokenList  =  options.asList(flatten(this.options,  arguments,  true));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  options.asList(flatten(this.options,  arguments,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  options.asList(flatten(this.options,  arguments,  true));	  ArrayList    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    true));    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
218	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  this.eatTheRest);  [CE]  cannot  find  symbol  eatTheRest  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  arguments,  this.eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  arguments,  this.eatTheRest);	  Option    option    =    options.getOption(this.options,    arguments);    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	47	None	replace
219	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd,  this.eatTheRest);  [CE]  cannot  find  symbol  eatTheRest  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd,  this.eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  cmd,  this.eatTheRest);	  Option    opt    =    options.getOption(this.options,    cmd);    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	39	None	replace
220	[BUG]  [BUGGY]  if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  }  [CE]  cannot  find  symbol  StopAtNonOption  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    StopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  StopAtNonOption	68	None	replace
221	[BUG]  [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  }  [CE]  cannot  find  symbol  StopAtNonOption  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    StopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  StopAtNonOption	68	None	replace
222	[BUG]  [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    StopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	68	None	replace
223	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	8	None	replace
224	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  arguments,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	8	None	replace
225	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption),  eatTheRest);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption),  eatTheRest);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption),  eatTheRest);	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	8	None	replace
226	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  false));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	12	None	replace
227	[BUG]  [BUGGY]  if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]    ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	20	None	replace
228	[BUG]  [BUGGY]  if(options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]      ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(options!=  null)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	20	None	replace
229	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  }  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	24	None	replace
230	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  argument);  [CE]  cannot  find  symbol  argument  [FE]                    ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(this.options,  argument);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  argument);	  Option    option    =    options.getOption(this.options,    t);    	non-compiled	[CE]  cannot  find  symbol  argument	49	None	replace
231	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest),  arguments);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest),  arguments);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest),  arguments);	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption),    arguments);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	7	None	replace
232	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption),  cmd);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption),  cmd);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption),  cmd);	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption),    arguments);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	7	None	replace
233	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  cmd,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    eatTheRest,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	56	None	replace
234	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  this.eatTheRest);  [CE]  cannot  find  symbol  eatTheRest  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  this.eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  this.eatTheRest);	  Option    opt    =    options.getOption(this.options,    t);    	non-compiled	[CE]  cannot  find  symbol  eatTheRest	42	None	replace
235	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(this.options,  argument);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  argument);	  Option    opt    =    options.getOption(this.options,    t);    	non-compiled	[CE]  cannot  find  symbol  argument	42	None	replace
236	[BUG]  [BUGGY]  Option  opt  =  options.getOption(arguments,  stopAtNonOption);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(arguments,  stopAtNonOption);	  Option    opt    =    options.getOption(arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	55	None	replace
237	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  str,  stopAtNonOption,  arguments));  [CE]  cannot  find  symbol  str  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  str,  stopAtNonOption,  arguments));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  str,  stopAtNonOption,  arguments));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption,    arguments));    	non-compiled	[CE]  cannot  find  symbol  str	6	None	replace
238	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(arguments,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(arguments,  eatTheRest);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	46	None	replace
239	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  null),  stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  null),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  null),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    arguments,    null));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	30	None	replace
240	[BUG]  [BUGGY]  if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  Arguments  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    Arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  Arguments	23	None	replace
241	[BUG]  [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  Arguments  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    Arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  Arguments	23	None	replace
242	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  options,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  options,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  options,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption,    arguments));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	6	None	replace
243	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  properties,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  properties,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  properties,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    opts,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	69	None	replace
244	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  options,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  options,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  options,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    opts,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	69	None	replace
245	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  this.options.getOption(this.options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  this.options.getOption(this.options);	  Option    option    =    this.options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	50	None	replace
246	[BUG]  [BUGGY]  Option  opt  =  this.options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  opt  =  this.options.getOption(this.options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  this.options.getOption(this.options);	  Option    opt    =    this.options.getOption(options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	67	None	replace
247	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  null));  [CE]  cannot  find  symbol  argument  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  null));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  null));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    argument,    eatTheRest));    	non-compiled	[CE]  cannot  find  symbol  argument	16	None	replace
248	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  options,  argument,  stopAtNonOption));  [CE]  cannot  find  symbol  argument  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  options,  argument,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  options,  argument,  stopAtNonOption));	  Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  argument	1	None	replace
249	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption),  eatTheRest);  [CE]  cannot  find  symbol  tokenList  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption),  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption),  eatTheRest);	  Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	1	None	replace
250	[BUG]  [BUGGY]  Option  options  =  opt.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  opt.getOptions();  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  opt.getOptions();	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	33	None	replace
251	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    =    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
252	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  eatTheRest,  arguments);	  Option    option    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	65	None	replace
253	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  cmd,  argument,  stopAtNonOption));  [CE]  cannot  find  symbol  argument  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  cmd,  argument,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  cmd,  argument,  stopAtNonOption));	  Arrays.asList(flatten(this.options,    cmd,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  argument	3	None	replace
254	[BUG]  [BUGGY]  if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]    ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(!eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	20	None	replace
255	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  this.eatTheRest));  [CE]  cannot  find  symbol  arguments  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  this.eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  this.eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    this.arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
256	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  block));  [CE]  cannot  find  symbol  block  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  block));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  block));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    eatTheRest));    	non-compiled	[CE]  cannot  find  symbol  block	35	None	replace
257	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  argument,  eatTheRest);  [CE]  cannot  find  symbol  argument  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  argument,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  argument,  eatTheRest);	  Option    option    =    options.getOption(cmd,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argument	58	None	replace
258	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  null);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  arguments,  null);	  Option    option    =    options.getOption(cmd,    arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	58	None	replace
259	[BUG]  [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure    [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	                Arrays.asList(flatten(this.options,        arguments,        stopAtNonOption));        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	19	None	add
260	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  argument,  true));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  argument,  true));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  argument,  true));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List    tokenList    =    Arrays.asList(flatten(this.options,    argument,    false));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
261	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  }  [CE]  cannot  find  symbol  tokenList  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  cannot  find  symbol  tokenList	18	None	replace
262	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]                  ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  cannot  find  symbol  tokenList	18	None	replace
263	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption,  false));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption,  false));	  List    tokenList    =    Arrays.asList(flatten(arguments,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	11	None	replace
264	[BUG]  [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    List    <    String>    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	22	None	replace
265	[BUG]  [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    List    <    String>    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
266	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(options,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  this.options.getOption(options,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  this.options.getOption(options,  arguments);	  Option    option    =    options.getOption(this.options,    arguments);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	47	None	replace
267	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
268	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	26	2	replace
269	[BUG]  [BUGGY]  Set  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Set  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Set  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
270	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  oprAtNonOption));  [CE]  cannot  find  symbol  oprAtNonOption  [FE]        ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  oprAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  oprAtNonOption));	  Arrays.asList(flatten(this.options,    arguments));    	non-compiled	[CE]  cannot  find  symbol  oprAtNonOption	63	None	replace
271	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  arguments));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  arguments));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.options,  arguments));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    this.stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	70	None	replace
272	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  null));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  null));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  null));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	12	None	replace
273	[BUG]  [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  tokenList  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(stopAtNonOption)  {  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	17	None	replace
274	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  this.stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  this.stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  this.stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	31	None	replace
275	[BUG]  [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  }  [CE]  cannot  find  symbol  Arguments  [FE]              ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  }  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	if(eatTheRest)  {  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  }  else  {  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  }	          Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,    Arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  Arguments	23	None	replace
276	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  argument,  stopAtNonOption));  [CE]  cannot  find  symbol  argument  [FE]            ComparisonFailure      [CONTEXT]      requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  argument,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  argument,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    cmd,    arguments));    	non-compiled	[CE]  cannot  find  symbol  argument	37	None	replace
