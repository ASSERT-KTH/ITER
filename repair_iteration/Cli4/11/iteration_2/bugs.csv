bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  options,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Arrays.asList(flatten(this.options,  options,  stopAtNonOption));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  options,  stopAtNonOption));	      Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	2	None	replace
2	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [CE]  cannot  find  symbol  tokenList  [FE]      ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  eatTheRest));	      Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  tokenList	2	None	replace
3	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  cmd,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Arrays.asList(flatten(this.options,  cmd,  stopAtNonOption));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  cmd,  stopAtNonOption));	      Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	2	None	replace
4	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(str);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(str);	      Option    opt    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	17	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  [CE]  cannot  find  symbol  str  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(str);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(str);	      Option    opt    =    options.getOption(t);    	non-compiled	[CE]  cannot  find  symbol  str	17	None	replace
6	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  arguments));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  arguments));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption,  arguments));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	7	None	replace
7	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption),  arguments);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption),  arguments);  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption),  arguments);	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	7	None	replace
8	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	7	None	replace
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	11	2	replace
10	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    	compilable	  [FE]  ComparisonFailure  	11	2	replace
11	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  false));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  false));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	11	None	replace
12	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  false));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  false));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  false));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	11	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  incompatible  types  [FE]              ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOptions();	      Option    this.options    =    options.getOptions();    	non-compiled	[CE]  incompatible  types	5	None	replace
14	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
15	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
16	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  eatTheRest));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  eatTheRest));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  eatTheRest));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
17	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
18	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    Arrays.asList(flatten(this.options,  arguments,  eatTheRest));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	compilable	  [FE]  ComparisonFailure  	1	2	add
20	[BUG]  [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	compilable	  [FE]  ComparisonFailure  	1	2	add
21	[BUG]  [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [CE]  cannot  find  symbol  argument  [FE]      ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  argument,  stopAtNonOption));	  	non-compiled	[CE]  cannot  find  symbol  argument	1	None	add
22	[BUG]  [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    List  <  String>  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	1	None	add
23	[BUG]  [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  Arguments  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  Arguments,  stopAtNonOption));	  	non-compiled	[CE]  cannot  find  symbol  Arguments	1	None	add
24	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	add
25	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	add
26	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    Arrays.asList(flatten(this.options,  arguments,  false));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	add
27	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  false));  [CE]  cannot  find  symbol  List  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List  =  Arrays.asList(flatten(this.options,  arguments,  false));	  	non-compiled	[CE]  cannot  find  symbol  List	10	None	add
28	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    List  tokenList  =  Arrays.asList(flatten(this.options,  argument,  false));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	10	None	add
29	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  stopAtNonOption));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	16	None	replace
30	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  null));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  null));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments,  null));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	16	None	replace
31	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption);  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption);  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    null));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	16	None	replace
32	[BUG]  [BUGGY]  Option  options  =  this.options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  options  =  this.options.getOptions();  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  this.options.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
33	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                  ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  options  =  cmd.getOptions();  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  cmd.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
34	[BUG]  [BUGGY]  Option  options  =  opts.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  options  =  opts.getOptions();  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  opts.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
35	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	9	None	replace
36	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  eatTheRest));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  eatTheRest));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	9	None	replace
37	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  cmd,  arguments));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	9	None	replace
38	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  cmd);  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(t,  cmd);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(t,  cmd);	      Option    opt    =    options.getOption(cmd);    	non-compiled	[CE]  cannot  find  symbol  t	15	None	replace
39	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(this.options,  cmd);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  cmd);	      Option    opt    =    options.getOption(cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	15	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(t,  cmd);	      Option    opt    =    options.getOption(cmd);    	non-compiled	[CE]  cannot  find  symbol  t	15	None	replace
41	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(this.options,  arguments);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  arguments);	      Option    opt    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	14	None	replace
42	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  t);  [CE]  cannot  find  symbol  t  [FE]            ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(this.options,  t);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  t);	      Option    opt    =    options.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  t	14	None	replace
43	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(this.options,  this.options);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  this.options);	      Option    opt    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	14	None	replace
44	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  this.options);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(t,  this.options);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(t,  this.options);	      Option    opt    =    options.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  t	14	None	replace
45	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(this.options,  cmd);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  cmd);	      Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	13	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(arguments);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(arguments);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	3	None	replace
47	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(this.options,  arguments);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  arguments);	      Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
48	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(this.options,  this.options);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  this.options);	      Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
49	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [CE]  cannot  find  symbol  t  [FE]                ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(this.options,  t);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  t);	      Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  cannot  find  symbol  t	4	None	replace
50	[BUG]  [BUGGY]  Option  option  =  this.options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  this.options.getOption(options);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  this.options.getOption(options);	      Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
51	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  stopAtNonOption));  [CE]  cannot  find  symbol  arguments  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  stopAtNonOption));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  this.arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eattheRest));    	non-compiled	[CE]  cannot  find  symbol  arguments	12	None	replace
52	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  arguments));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eattheRest));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	12	None	replace
53	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	ArrayList  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  true));	  List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    false));    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
54	[BUG]  [BUGGY]  Option  options  =  options.getOptions(this.options);  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]                ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  options  =  options.getOptions(this.options);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  options  =  options.getOptions(this.options);	      Option    options    =    options.getOptions();    	non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	6	None	replace
55	[BUG]  [BUGGY]  Option  opt  =  options.getOption(arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(arguments);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(arguments);	      Option    opt    =    options.getOption(t);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	17	None	replace
56	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest,  stopAtNonOption));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  eatTheRest,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	7	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(options,  cmd);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(options,  cmd);	      Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	13	None	replace
58	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(cmd,  arguments);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  arguments);	      Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	13	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(this.options,  options);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  options);	      Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
60	[BUG]  [BUGGY]  Option  option  =  options.getOption(this.options,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(this.options,  eatTheRest);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(this.options,  eatTheRest);	      Option    option    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	4	None	replace
61	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eattheRest));  [CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eattheRest));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List    tokenList    =    Arrays.asList(flatten(this.options,    arguments,    eatTheRest));    List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eattheRest));	  	non-compiled	[CE]  variable  tokenList  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	8	None	add
62	[BUG]  [BUGGY]  Option  opt  =  options.getOption(this.options,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(this.options,  eatTheRest);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(this.options,  eatTheRest);	      Option    opt    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	14	None	replace
63	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Arrays.asList(flatten(this.options,  arguments));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments));	      Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	2	None	replace
64	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(options);	      Option    this.options    =    options.getOptions();    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	5	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  option  =  options.getOption(cmd,  eatTheRest);	      Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	13	None	replace
66	[BUG]  [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  null));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Arrays.asList(flatten(this.options,  arguments,  null));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Arrays.asList(flatten(this.options,  arguments,  null));	      Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	2	None	replace
67	[BUG]  [BUGGY]  Option  opt  =  this.options.getOption(options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  this.options.getOption(options);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  this.options.getOption(options);	      Option    opt    =    options.getOption(this.options);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	14	None	replace
68	[BUG]  [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  [CE]  cannot  find  symbol  StopAtNonOption  [FE]    ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]      Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	        Arrays.asList(flatten(this.options,    arguments,    stopAtNonOption));    Arrays.asList(flatten(this.options,  arguments,  StopAtNonOption));	  	non-compiled	[CE]  cannot  find  symbol  StopAtNonOption	1	None	add
69	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  opts,  stopAtNonOption));  [CE]  cannot  find  symbol  opts  [FE]        ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  opts,  stopAtNonOption));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  opts,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  opts	7	None	replace
70	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.stopAtNonOption));  [CE]  cannot  find  symbol  stopAtNonOption  [FE]          ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.stopAtNonOption));  [BUGGY]    arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  this.stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(this.options,    options,    stopAtNonOption));    	non-compiled	[CE]  cannot  find  symbol  stopAtNonOption	7	None	replace
71	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  arguments);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(cmd,  arguments);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  arguments);	      Option    opt    =    options.getOption(cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	15	None	replace
72	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd,  eatTheRest);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }    [BUGGY]  Option  opt  =  options.getOption(cmd,  eatTheRest);  [BUGGY]    List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	Option  opt  =  options.getOption(cmd,  eatTheRest);	      Option    opt    =    options.getOption(cmd);    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	15	None	replace
