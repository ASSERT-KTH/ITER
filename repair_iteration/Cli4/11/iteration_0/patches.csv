bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));		compilable	  [FE]  ComparisonFailure  	23	2	add
2	[BUG]  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	    Arrays.asList(flatten(this.options,  arguments,  stopAtNonOption));		compilable	  [FE]  ComparisonFailure  	23	2	add
3	[BUG]  [BUGGY]    Option  option  =  options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]      ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Option  option  =  options.getOption(t);  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	    Option  option  =  options.getOption(t);		non-compiled	[CE]  cannot  find  symbol  t	23	None	add
4	[BUG]  [BUGGY]    Option  option  =  options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Option  option  =  options.getOption(this.options);  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	    Option  option  =  options.getOption(this.options);		non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	23	None	add
5	[BUG]  [BUGGY]    Option  this.options  =  options.getOptions();  [CE]  not  a  statement  [FE]          ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Option  this.options  =  options.getOptions();  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	    Option  this.options  =  options.getOptions();		non-compiled	[CE]  not  a  statement	23	None	add
6	[BUG]  [BUGGY]    Option  options  =  options.getOptions();  [CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]            ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Option  options  =  options.getOptions();  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	    Option  options  =  options.getOptions();		non-compiled	[CE]  variable  options  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	23	None	add
7	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption));  [BUGGY]  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  options,  stopAtNonOption));	List  tokenList  =  Arrays.asList(flatten(this.options,      arguments,            stopAtNonOption));  	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	22	None	replace
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [BUGGY]  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));	List  tokenList  =  Arrays.asList(flatten(this.options,      arguments,            stopAtNonOption));  	compilable	  [FE]  ComparisonFailure  	22	2	replace
9	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));  [BUGGY]  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eatTheRest));	List  tokenList  =  Arrays.asList(flatten(this.options,      arguments,            stopAtNonOption));  	compilable	  [FE]  ComparisonFailure  	22	2	replace
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	add	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));	List  tokenList  =  Arrays.asList(flatten(this.options,      arguments,            stopAtNonOption));  	compilable	  [FE]  ComparisonFailure  	22	2	replace
11	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));  [BUGGY]  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  false));	List  tokenList  =  Arrays.asList(flatten(this.options,      arguments,            stopAtNonOption));  	compilable	  [FE]  ComparisonFailure  	22	2	replace
12	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eattheRest));  [CE]  cannot  find  symbol  eattheRest  [FE]    ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eattheRest));  [BUGGY]  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  eattheRest));	List  tokenList  =  Arrays.asList(flatten(this.options,      arguments,            stopAtNonOption));  	non-compiled	[CE]  cannot  find  symbol  eattheRest	22	None	replace
13	[BUG]  [BUGGY]    Option  option  =  options.getOption(cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Option  option  =  options.getOption(cmd);  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	    Option  option  =  options.getOption(cmd);		non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	23	None	add
14	[BUG]  [BUGGY]    Option  opt  =  options.getOption(this.options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Option  opt  =  options.getOption(this.options);  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	    Option  opt  =  options.getOption(this.options);		non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	23	None	add
15	[BUG]  [BUGGY]    Option  opt  =  options.getOption(cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Option  opt  =  options.getOption(cmd);  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	    Option  opt  =  options.getOption(cmd);		non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	23	None	add
16	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null));  [CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null));  [BUGGY]  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	List  tokenList  =  Arrays.asList(flatten(this.options,  arguments,  null));	List  tokenList  =  Arrays.asList(flatten(this.options,      arguments,            stopAtNonOption));  	non-compiled	[CE]  method  flatten  in  class  Parser  cannot  be  applied  to  given  types;	22	None	replace
17	[BUG]  [BUGGY]    Option  opt  =  options.getOption(t);  [CE]  cannot  find  symbol  t  [FE]    ComparisonFailure  [CONTEXT]  requiredOptions  =  options.getRequiredOptions();  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [BUGGY]    Option  opt  =  options.getOption(t);  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(this.options,            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli4/src/java/org/apache/commons/cli/Parser.java	1.0	153	155	2	replace	    Option  opt  =  options.getOption(t);		non-compiled	[CE]  cannot  find  symbol  t	23	None	add
