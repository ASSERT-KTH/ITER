bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",  level  is  not  being  used.   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",  level  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",  level  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()),  level  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()),  level  + "'  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()),  level  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",  level  is  not  being  used.n ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",  level  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",  level  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  Node  operator  =  n.getFirstChild();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  Node  operator  =  n.getFirstChild();  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	Node  operator  =  n.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	      	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";	      	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	      	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	11	None	replace
20	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	11	None	replace
22	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	1	None	replace
24	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	1	None	replace
25	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	7	None	replace
26	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	7	None	replace
27	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	7	None	replace
28	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	8	None	replace
29	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	8	None	replace
30	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	8	None	replace
31	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	8	None	replace
32	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	2	None	replace
33	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	9	None	replace
34	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used.   ";  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	9	None	replace
35	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	5	None	replace
36	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	5	None	replace
37	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	11	None	replace
38	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	11	None	replace
39	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	3	None	replace
40	[BUG]  [BUGGY]  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));	      	non-compiled	[CE]  ')'  expected	6	None	replace
41	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";	      	non-compiled	[CE]  	6	None	replace
42	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n);  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n);	      	non-compiled	[CE]  ')'  expected	6	None	replace
43	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()),  level  + ",'  operator  is  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()),  level  + ",'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()),  level  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	4	None	replace
44	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  operator  is  not  being  used.   ";  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	4	None	replace
45	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",  level  is  not  being  used.   ";  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",  level  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",  level  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	4	None	replace
46	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	10	None	replace
47	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  ')'  expected	7	None	replace
48	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line? ";	      	non-compiled	[CE]  	6	None	replace
49	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));	      	non-compiled	[CE]  ')'  expected	6	None	replace
50	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()),  level  + "'  operator  is  not  being  used.   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()),  level  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()),  level  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	11	None	replace
52	[BUG]  [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the "  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	7	None	replace
53	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	9	None	replace
56	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used.   ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	5	None	replace
58	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {  msg  =     "Is  there  a  missing  '+'  on  the  previous  line?   ";  }  else  if  (isSimpleOp)  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	3	None	replace
