bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  msg  =  msg  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	54	None	replace
2	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	54	None	replace
3	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	54	None	replace
4	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used.n ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getType()).toUpperCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	55	None	replace
5	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	36	None	replace
6	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toString()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toString()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toString()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	36	None	replace
7	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	36	None	replace
8	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	36	None	replace
9	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =    n.name()    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	24	None	replace
10	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =    n.name()    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	24	None	replace
11	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =    n.name()    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	24	None	replace
12	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operators  are  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operators  are  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",    operators    are    not    being    used.   ";    	non-compiled	[CE]  	32	None	replace
13	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used.n ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",    operators    are    not    being    used.   ";    	non-compiled	[CE]  	32	None	replace
14	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ",  ancestorType;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ",  ancestorType;  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ",  ancestorType;	  msg    =    msg    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()),  level  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()),  level  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()),  level  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ "'  level  is  not  being  used.   ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ "'  level  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ "'  level  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType())+   ",    level    is    not    being    used.n   ";    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType())+ ",  level  is  not  being  used. ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType())+ ",  level  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType())+ ",  level  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType())+   ",    level    is    not    being    used.n   ";    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	20	None	replace
20	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	38	None	replace
21	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	38	None	replace
22	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(token.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	38	None	replace
23	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	38	None	replace
24	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	38	None	replace
25	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	46	None	replace
26	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	46	None	replace
27	[BUG]  [BUGGY]  msg  =  msg  +  n.name(token.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  n.name(token.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  n.name(token.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    n.name(token.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	31	None	replace
28	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	28	None	replace
29	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	28	None	replace
30	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()),  level  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()),  level  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()),  level  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	28	None	replace
31	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild()),  level  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild()),  level  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild()),  level  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	50	None	replace
32	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild())+ ",  level  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild())+ ",  level  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild())+ ",  level  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	50	None	replace
33	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()),  level  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()),  level  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()),  level  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	50	None	replace
34	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild()),  level  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild()),  level  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild()),  level  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	50	None	replace
35	[BUG]  [BUGGY]  ProblemNodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  ProblemNodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	ProblemNodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n);	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
36	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  problemNodes.add(n);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  problemNodes.add(n);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  problemNodes.add(n);	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
37	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  problemNodes.add(n);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  problemNodes.add(n);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  problemNodes.add(n);	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
38	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(an,  t.getCompiler()))  {  problemNodes.add(n);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(an,  t.getCompiler()))  {  problemNodes.add(n);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(an,  t.getCompiler()))  {  problemNodes.add(n);	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
39	[BUG]  [BUGGY]  ProblemNodes.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg))  {  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  ProblemNodes.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg))  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	ProblemNodes.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg))  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
40	[BUG]  [BUGGY]  ProblemNodes.makeError(n,  level,  USELESS_CODE_ERROR,  msg))  {  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  ProblemNodes.makeError(n,  level,  USELESS_CODE_ERROR,  msg))  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	ProblemNodes.makeError(n,  level,  USELESS_CODE_ERROR,  msg))  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
41	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	33	None	replace
42	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  level  is  not  being  used.   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  level  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  level  is  not  being  used.   ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	33	None	replace
43	[BUG]  [BUGGY]  Node  operator  =  n.getLastChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getLastChild();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	Node  operator  =  n.getLastChild();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  	15	None	replace
44	[BUG]  [BUGGY]  Node  operator  =  parent.getFirstChild();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  parent.getFirstChild();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	Node  operator  =  parent.getFirstChild();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  	15	None	replace
45	[BUG]  [BUGGY]  Node  operator  =  n.getNext();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getNext();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	Node  operator  =  n.getNext();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  	15	None	replace
46	[BUG]  [BUGGY]  Node  operator  =  an.getFirstChild();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  an.getFirstChild();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	Node  operator  =  an.getFirstChild();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  	15	None	replace
47	[BUG]  [BUGGY]  Node  operator  =  n.getOwnerChild();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getOwnerChild();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	Node  operator  =  n.getOwnerChild();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  	15	None	replace
48	[BUG]  [BUGGY]  Node  operator  =  n.getOwner();  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getOwner();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	Node  operator  =  n.getOwner();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  	15	None	replace
49	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	3	None	replace
50	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used.n ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	58	None	replace
51	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	58	None	replace
52	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	16	None	replace
53	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	16	None	replace
54	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  PROTECTOR_FN,  msg));  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	49	None	replace
55	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  PROTECTOR_FN,  msg));  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	49	None	replace
56	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	49	None	replace
57	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  COMPLETE_ERROR,  msg));  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  COMPLETE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  COMPLETE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	49	None	replace
58	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "',  level  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "',  level  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "',  level  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType())+   ",    level    is    not    being    used.       ";    	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  level  is  not  being  used.   ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  level  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  level  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString())+   ",    level    is    not    being    used.       ";    	non-compiled	[CE]  	45	None	replace
60	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  level  is  not  being  used.n ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  level  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  level  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString())+   ",    level    is    not    being    used.       ";    	non-compiled	[CE]  	45	None	replace
61	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =    msg    +   "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	48	None	replace
62	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =    msg    +   "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	48	None	replace
63	[BUG]  [BUGGY]  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =    msg    +   "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	48	None	replace
64	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  =  msg  + "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?   ";  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  =  msg  + "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  =  msg  + "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?   ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =    msg    +   "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	48	None	replace
65	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	21	None	replace
66	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	21	None	replace
67	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	21	None	replace
68	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	21	None	replace
69	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	41	None	replace
70	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	41	None	replace
71	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	41	None	replace
72	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	52	None	replace
73	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	52	None	replace
74	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + "  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + "  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + "  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	52	None	replace
75	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	51	None	replace
76	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    	non-compiled	[CE]  	17	None	replace
77	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    	non-compiled	[CE]  	17	None	replace
78	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.   ";    	non-compiled	[CE]  	27	None	replace
79	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.n ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.   ";    	non-compiled	[CE]  	27	None	replace
80	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  INVALID_NUMBER_ERROR,  msg));  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  INVALID_NUMBER_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  INVALID_NUMBER_ERROR,  msg));	  t.getCompiler().report(    t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	40	None	replace
81	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  COMPLETE_NOT_FOUND,  msg));  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  COMPLETE_NOT_FOUND,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  COMPLETE_NOT_FOUND,  msg));	  t.getCompiler().report(    t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	40	None	replace
82	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  MAXIMIZED_ERROR,  msg));  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  MAXIMIZED_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  MAXIMIZED_ERROR,  msg));	  t.getCompiler().report(    t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	40	None	replace
83	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  level  is  not  being  used.   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  level  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ",  level  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   ",    operator    is    not    being    used.       ";    	non-compiled	[CE]  	34	None	replace
84	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()),  level  + ",'  operator  is  not  being  used.n ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()),  level  + ",'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()),  level  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	43	None	replace
85	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	18	None	replace
86	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	18	None	replace
87	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	18	None	replace
88	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	57	None	replace
89	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	57	None	replace
90	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	57	None	replace
91	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used.n ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	35	None	replace
92	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	47	None	replace
93	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the       "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	47	None	replace
94	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	39	None	replace
95	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	39	None	replace
96	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	39	None	replace
97	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	39	None	replace
98	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  operator  is  not  being  used.n ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString())+   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	44	None	replace
99	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString())+ "'  operator  is  not  being  used.   ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString())+ "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString())+ "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString())+   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	44	None	replace
100	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLineno())+ "'  operator  is  not  being  used.   ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLineno())+ "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getLineno())+ "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString())+   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	44	None	replace
101	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	9	None	replace
102	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",  level  is  not  being  used.n ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",  level  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",  level  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	9	None	replace
103	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLineno()),  level  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLineno()),  level  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getLineno()),  level  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	9	None	replace
104	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +   "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	53	None	replace
105	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +   "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	53	None	replace
106	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.   ";	  msg    =    msg    +   "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	53	None	replace
107	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	37	None	replace
108	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	37	None	replace
109	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.n   ";    	non-compiled	[CE]  	22	None	replace
110	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_ERROR,  msg));  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	49	None	replace
111	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  UNKNOWN_SIGNATURES,  msg));  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  UNKNOWN_SIGNATURES,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  UNKNOWN_SIGNATURES,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	49	None	replace
112	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_NAME,  msg));  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_NAME,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_NAME,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	49	None	replace
113	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  String  msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	41	None	replace
114	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	36	None	replace
115	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	47	None	replace
116	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	47	None	replace
117	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	47	None	replace
118	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",    operators    are    not    being    used.   ";    	non-compiled	[CE]  	32	None	replace
119	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",'  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	43	None	replace
120	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   ",    operator    is    not    being    used.       ";    	non-compiled	[CE]  	34	None	replace
121	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    	non-compiled	[CE]  	17	None	replace
122	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	57	None	replace
123	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString())+ "'  operator  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString())+ "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString())+ "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString())+   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	44	None	replace
124	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString())+ ",  level  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString())+ ",  level  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString())+ ",  level  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString())+   ",    level    is    not    being    used.       ";    	non-compiled	[CE]  	45	None	replace
125	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	37	None	replace
126	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	33	None	replace
127	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	33	None	replace
128	[BUG]  [BUGGY]  Node  operator  =  n.getAncestor(1);  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getAncestor(1);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	Node  operator  =  n.getAncestor(1);	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  	15	None	replace
129	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.n   ";    	non-compiled	[CE]  	14	None	replace
130	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operators  are  not  being  used. ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operators  are  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	20	None	replace
131	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + "  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + "  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + "  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.   ";    	non-compiled	[CE]  	27	None	replace
132	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  problemNodes.add(n);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  problemNodes.add(n);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  problemNodes.add(n);	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
133	[BUG]  [BUGGY]  ProblemNodes.add(n);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  ProblemNodes.add(n);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	ProblemNodes.add(n);	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
134	[BUG]  [BUGGY]  ProblemNodeUtil.mayHaveSideEffects(n,  parent))  {  problemNodes.add(n);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  ProblemNodeUtil.mayHaveSideEffects(n,  parent))  {  problemNodes.add(n);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	ProblemNodeUtil.mayHaveSideEffects(n,  parent))  {  problemNodes.add(n);	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
135	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()),  level  + ",'  operator  is  not  being  used. ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()),  level  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()),  level  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	50	None	replace
136	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild())+ "'  operator  is  not  being  used.   ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild())+ "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getLastChild())+ "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	50	None	replace
137	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	18	None	replace
138	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	18	None	replace
139	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString(),  level  + "'  operator  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString(),  level  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString(),  level  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	9	None	replace
140	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + ",'  operator  is  not  being  used. ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()),    level    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	9	None	replace
141	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ "',  level  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ "',  level  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ "',  level  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType())+   ",    level    is    not    being    used.       ";    	non-compiled	[CE]  	7	None	replace
142	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";	  msg    =    msg    +   "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	53	None	replace
143	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =    msg    +   "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	48	None	replace
144	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	30	None	replace
145	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used.   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used.   ";	  msg    =    n.name()    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	24	None	replace
146	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	16	None	replace
147	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line?	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    String    msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	16	None	replace
148	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  	29	None	replace
149	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ "'  operator  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  	8	None	replace
150	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  msg,  USELESS_CODE_ERROR));  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  msg,  USELESS_CODE_ERROR));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  msg,  USELESS_CODE_ERROR));	  t.getCompiler().report(    t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	40	None	replace
151	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_FAILURE_ERROR,  msg));  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_FAILURE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_FAILURE_ERROR,  msg));	  t.getCompiler().report(    t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	40	None	replace
152	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    n.name(token.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	31	None	replace
153	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	52	None	replace
154	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + "  is  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + "  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getString()).toLowerCase()  + "  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	52	None	replace
155	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType())+ ",  level  is  not  being  used. ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType())+ ",  level  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType())+ ",  level  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType())+   ",    level    is    not    being    used.n   ";    	non-compiled	[CE]  	10	None	replace
156	[BUG]  [BUGGY]  NodeUtil.isSimpleOp(parent,  t.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.isSimpleOp(parent,  t.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.isSimpleOp(parent,  t.getCompiler()))  {  msg  =  msg  + "Is  there  a  missing  '+'  on  the  previous  line?   ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =    msg    +   "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	48	None	replace
157	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  +=   "Is  there  a  missing  '+'  on  the  previous  line?   ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  +=   "Is  there  a  missing  '+'  on  the  previous  line?   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  msg  +=   "Is  there  a  missing  '+'  on  the  previous  line?   ";	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    msg    =    msg    +   "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	48	None	replace
158	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	51	None	replace
159	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	54	None	replace
160	[BUG]  [BUGGY]  msg  =  msg  +  n.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  n.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  n.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	54	None	replace
161	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ".'  operator  is  not  being  used.   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ".'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ".'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ".'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	56	None	replace
162	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	35	None	replace
163	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	39	None	replace
164	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	39	None	replace
165	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	36	None	replace
166	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operators  are  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operators  are  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   ",    operator    is    not    being    used.       ";    	non-compiled	[CE]  	34	None	replace
167	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ".'  operator  is  not  being  used.   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ".'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ".'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   ",    operator    is    not    being    used.       ";    	non-compiled	[CE]  	34	None	replace
168	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	37	None	replace
169	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getFirstChild()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	57	None	replace
170	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + ",'  operator  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild()).toString()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getFirstChild()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	57	None	replace
171	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	49	None	replace
172	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_FN,  msg));  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_FN,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	49	None	replace
173	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toUpperCase()  + ",  operator  is  not  being  used.   ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toUpperCase()  + ",  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString()).toUpperCase()  + ",  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toUpperCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  	55	None	replace
174	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	38	None	replace
175	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	38	None	replace
176	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	38	None	replace
177	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	28	None	replace
178	[BUG]  [BUGGY]  ProblemNodes.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  ProblemNodes.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	ProblemNodes.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
179	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n,  level);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n,  level);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n,  level);	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
180	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n  +  1);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n  +  1);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  problemNodes.add(n  +  1);	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    problemNodes.add(n);    	non-compiled	[CE]  	42	None	replace
181	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",'  operator  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType())+ ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	43	None	replace
182	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType())+ ",'  operator  is  not  being  used.   ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType())+ ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType())+ ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()),    level    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  	43	None	replace
183	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  is  not  being  used. ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ",  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	6	None	replace
184	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild())+ "',  level  is  not  being  used.   ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild())+ "',  level  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getFirstChild())+ "',  level  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType())+   ",    level    is    not    being    used.       ";    	non-compiled	[CE]  	7	None	replace
185	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_WARNING,  msg));  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_WARNING,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_WARNING,  msg));	  t.getCompiler().report(    t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  	40	None	replace
186	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString())+ ",  level  is  not  being  used. ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString())+ ",  level  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getString())+ ",  level  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString())+   ",    level    is    not    being    used.       ";    	non-compiled	[CE]  	45	None	replace
187	[BUG]  [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =   "The  result  of  the "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	52	None	replace
188	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.   ";    	non-compiled	[CE]  	27	None	replace
