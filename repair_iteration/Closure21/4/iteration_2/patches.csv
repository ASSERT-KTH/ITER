bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  ancestorType  =  parent.getChildCount()  /  2;  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getChildCount()  /  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getChildCount()  /  2;	  int    ancestorType    =    an.getChildCount()    /    2;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
2	[BUG]  [BUGGY]  float  ancestorType  =  an.getChildCount()  /  2;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  float  ancestorType  =  an.getChildCount()  /  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	float  ancestorType  =  an.getChildCount()  /  2;	  int    ancestorType    =    an.getChildCount()    /    2;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
3	[BUG]  [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT)  {  continue;  }  [CE]  <identifier>  expected  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
4	[BUG]  [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT)  {  continue;  }  [CE]  <identifier>  expected  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
5	[BUG]  [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.GETPROP)  {  continue;  }  [CE]  <identifier>  expected  [FE]                                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.GETPROP)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.GETPROP)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
6	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  continue;  }  [CE]  <identifier>  expected  [FE]                                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	parent.getType()  ==  Token.FUNCTION)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
7	[BUG]  [BUGGY]  if(an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT)  {  continue;  }  [CE]  <identifier>  expected  [FE]                                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
8	[BUG]  [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.NAME)  {  continue;  }  [CE]  <identifier>  expected  [FE]                                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.NAME)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.NAME)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
9	[BUG]  [BUGGY]  int  ancestorType  =  an.getLastChild().getNext().getType();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getLastChild().getNext().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getLastChild().getNext().getType();	  int    ancestorType    =    an.getFirstChild().getNext().getType();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
10	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getLastChild().getNext().getType();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getLastChild().getNext().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getLastChild().getNext().getType();	  int    ancestorType    =    an.getFirstChild().getNext().getType();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
11	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext().getParent().getType();  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext().getParent().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getNext().getParent().getType();	  int    ancestorType    =    an.getFirstChild().getNext().getType();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
12	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext().getType()  ||  isSimpleOp;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext().getType()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getNext().getType()  ||  isSimpleOp;	  int    ancestorType    =    an.getFirstChild().getNext().getType();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
13	[BUG]  [BUGGY]  int  ancestorType  =  parent.getChildCount();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getChildCount();	  int    ancestorType    =    an.getChildCount()    -    2;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
14	[BUG]  [BUGGY]  int  ancestorType  =  AnnotationUtil.getChildCount();  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  AnnotationUtil.getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  AnnotationUtil.getChildCount();	  int    ancestorType    =    an.getChildCount()    -    2;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
15	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount().getType();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount().getType();	  int    ancestorType    =    an.getNext().getType();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
16	[BUG]  [BUGGY]  int  ancestorType  =  an.getNext().getParent().getType();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getNext().getParent().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getNext().getParent().getType();	  int    ancestorType    =    an.getNext().getType();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
17	[BUG]  [BUGGY]  int  ancestorType  =  an.getSimpleOp()  -  1;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getSimpleOp()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getSimpleOp()  -  1;	  int    ancestorType    =    an.getSimpleOp();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
18	[BUG]  [BUGGY]  int  ancestorType  =  an.getSimpleOp()  +  1;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getSimpleOp()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getSimpleOp()  +  1;	  int    ancestorType    =    an.getSimpleOp();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
19	[BUG]  [BUGGY]  int  ancestorType  =  an.getSimpleOp()  &  0xff;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getSimpleOp()  &  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getSimpleOp()  &  0xff;	  int    ancestorType    =    an.getSimpleOp();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
20	[BUG]  [BUGGY]  int  ancestorType  =  an.getSimpleOp()  ||  isSimpleOp;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getSimpleOp()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getSimpleOp()  ||  isSimpleOp;	  int    ancestorType    =    an.getSimpleOp();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
21	[BUG]  [BUGGY]  int  ancestorType  =  an.getSimpleOp()  &  1;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getSimpleOp()  &  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getSimpleOp()  &  1;	  int    ancestorType    =    an.getSimpleOp();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
22	[BUG]  [BUGGY]  int  ancestorType  =  an.getSimpleOp()  &  0xFFFF;  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getSimpleOp()  &  0xFFFF;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getSimpleOp()  &  0xFFFF;	  int    ancestorType    =    an.getSimpleOp();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
23	[BUG]  [BUGGY]  if(an.getType()  ==  Token.COMMA)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.COMMA)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.COMMA)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)continue;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
24	[BUG]  [BUGGY]  if(an.getType()  ==  Token.EMPTY)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.EMPTY)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.EMPTY)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)continue;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
25	[BUG]  [BUGGY]  if(an.getType()  ==  Token.GETPROP)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.GETPROP)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.GETPROP)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)continue;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
26	[BUG]  [BUGGY]  if(an.getType()  ==  Token.FUNCTION)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.FUNCTION)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.FUNCTION)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)continue;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
27	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild();	  boolean    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
28	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getLastChild();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getLastChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getLastChild();	  boolean    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
29	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getLastChild().getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getLastChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getLastChild().getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
30	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getLastChild().getType()  ==  Token.FUNCTION;	  boolean    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
31	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getLastChild()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getLastChild()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getLastChild()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
32	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getLastChild()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getLastChild()  ==  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getLastChild()  ==  Token.FUNCTION;	  boolean    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
33	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getLeastChild();  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getLeastChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getLeastChild();	  Integer    ancestorType    =    an.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
34	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getSimpleOp();  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getSimpleOp();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getSimpleOp();	  Integer    ancestorType    =    an.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
35	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FOR;  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FOR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FOR;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
36	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  isSimpleOp;  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
37	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  parent.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  parent.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  parent.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
38	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  ancestorType  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  ancestorType  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  ancestorType  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
39	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  isResultUsed;  [CE]  <identifier>  expected  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
40	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  ancestorType!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  ancestorType!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  ancestorType!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
41	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT?  true  :  false;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT?  true  :  false;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT?  true  :  false;	  boolean    ancestorType    =    an.getType()    -    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT?  true  :  false;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT?  true  :  false;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT?  true  :  false;	  boolean    ancestorType    =    an.getType()    -    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
43	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  isSimpleOp;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  isSimpleOp;	  boolean    ancestorType    =    an.getType()    -    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
44	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.COMMA;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.COMMA;	  boolean    ancestorType    =    an.getType()    -    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  int  ancestorType  =  an.getLastChild().getType()  +  1;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getLastChild().getType()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getLastChild().getType()  +  1;	  int    ancestorType    =    an.getFirstChild().getType()    +    1;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
46	[BUG]  [BUGGY]  int  ancestorType  =  parent.getFirstChild().getType()  +  1;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getFirstChild().getType()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getFirstChild().getType()  +  1;	  int    ancestorType    =    an.getFirstChild().getType()    +    1;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
47	[BUG]  [BUGGY]  Node  ancestorType  =  an.getChildCount()  -  1;  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getChildCount()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getChildCount()  -  1;	  Node    ancestorType    =    an.getChildCount();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
48	[BUG]  [BUGGY]  Node  ancestorType  =  an.getChildCount()  +  1;  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getChildCount()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getChildCount()  +  1;	  Node    ancestorType    =    an.getChildCount();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
49	[BUG]  [BUGGY]  Node  ancestorType  =  an.getChildCount()  *  2;  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getChildCount()  *  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getChildCount()  *  2;	  Node    ancestorType    =    an.getChildCount();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
50	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  -  1;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSideEffects()  -  1;	  int    ancestorType    =    an.getHeaderSideEffects();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
51	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  +  1;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSideEffects()  +  1;	  int    ancestorType    =    an.getHeaderSideEffects();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
52	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  *  2;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  *  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSideEffects()  *  2;	  int    ancestorType    =    an.getHeaderSideEffects();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
53	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects().length;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects().length;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSideEffects().length;	  int    ancestorType    =    an.getHeaderSideEffects();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
54	[BUG]  [BUGGY]  int  ancestorType  =  an.getLastChild().getString()  +  1;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getLastChild().getString()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getLastChild().getString()  +  1;	  int    ancestorType    =    an.getLastChild().getString();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
55	[BUG]  [BUGGY]  int  ancestorType  =  an.getLastChild().getNext().getString();  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getLastChild().getNext().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getLastChild().getNext().getString();	  int    ancestorType    =    an.getLastChild().getString();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
56	[BUG]  [BUGGY]  int  ancestorType  =  parent.getLastChild().getString();  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getLastChild().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getLastChild().getString();	  int    ancestorType    =    an.getLastChild().getString();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
57	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getLastChild().getString();  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getLastChild().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getLastChild().getString();	  int    ancestorType    =    an.getLastChild().getString();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
58	[BUG]  [BUGGY]  Node  ancestorType  =  an.getQualifiedName();  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getQualifiedName();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getQualifiedName();	  Node    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
59	[BUG]  [BUGGY]  Node  ancestorType  =  an.getString();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getString();	  Node    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  	58	None	replace
60	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ||  0xff;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ||  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ||  0xff;	  boolean    ancestorType    =    an.getType()    &    0xff;    	non-compiled	[CE]  	39	None	replace
61	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  0xff;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  0xff;	  boolean    ancestorType    =    an.getType()    &    0xff;    	non-compiled	[CE]  	39	None	replace
62	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  0xff;  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  0xff;	  boolean    ancestorType    =    an.getType()    &    0xff;    	non-compiled	[CE]  	39	None	replace
63	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  0xff;  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  0xff;	  boolean    ancestorType    =    an.getType()    &    0xff;    	non-compiled	[CE]  	39	None	replace
64	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  0xff;  [CE]  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  0xff;	  boolean    ancestorType    =    an.getType()    &    0xff;    	non-compiled	[CE]  	39	None	replace
65	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getInitialValue()  +  1;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getInitialValue()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getInitialValue()  +  1;	  Integer    ancestorType    =    an.getInitialValue();    	non-compiled	[CE]  	78	None	replace
66	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getInitialValue()  -  1;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getInitialValue()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getInitialValue()  -  1;	  Integer    ancestorType    =    an.getInitialValue();    	non-compiled	[CE]  	78	None	replace
67	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getInitialValue()  *  2;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getInitialValue()  *  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getInitialValue()  *  2;	  Integer    ancestorType    =    an.getInitialValue();    	non-compiled	[CE]  	78	None	replace
68	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitialValue();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitialValue();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitialValue();	  Integer    ancestorType    =    an.getInitialValue();    	non-compiled	[CE]  	78	None	replace
69	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getInitialValue()  <  1;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getInitialValue()  <  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getInitialValue()  <  1;	  Integer    ancestorType    =    an.getInitialValue();    	non-compiled	[CE]  	78	None	replace
70	[BUG]  [BUGGY]  int  ancestorType  =  an.getPrevious().getParent().getType();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getPrevious().getParent().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getPrevious().getParent().getType();	  int    ancestorType    =    an.getPrevious().getType();    	non-compiled	[CE]  	98	None	replace
71	[BUG]  [BUGGY]  int  ancestorType  =  an.getNodeType().getType();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getNodeType().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getNodeType().getType();	  int    ancestorType    =    an.getPrevious().getType();    	non-compiled	[CE]  	98	None	replace
72	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT);	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
73	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT)  {	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
74	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.EXPR_RESULT);	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
75	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK);	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
76	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT)  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT)  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT)	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
77	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.BLOCK;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.BLOCK;	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
78	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getType()!=  Token.BLOCK;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getType()!=  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getType()!=  Token.BLOCK;	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
79	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  >=  Token.BLOCK;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  >=  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  >=  Token.BLOCK;	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
80	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  >>  Token.BLOCK;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  >>  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  >>  Token.BLOCK;	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
81	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  isProtecteEffectFreeCode;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  isProtecteEffectFreeCode;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  isProtecteEffectFreeCode;	  int    ancestorType    =    an.getType()    ||    isProtecteEffectFreeCode;    	non-compiled	[CE]  	97	None	replace
82	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isProtecteOp;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isProtecteOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isProtecteOp;	  int    ancestorType    =    an.getType()    ||    isProtecteEffectFreeCode;    	non-compiled	[CE]  	97	None	replace
83	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ||  isProtecteEffectFreeCode;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ||  isProtecteEffectFreeCode;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ||  isProtecteEffectFreeCode;	  int    ancestorType    =    an.getType()    ||    isProtecteEffectFreeCode;    	non-compiled	[CE]  	97	None	replace
84	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  /  ||  isProtecteEffectFreeCode;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  /  ||  isProtecteEffectFreeCode;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  /  ||  isProtecteEffectFreeCode;	  int    ancestorType    =    an.getType()    ||    isProtecteEffectFreeCode;    	non-compiled	[CE]  	97	None	replace
85	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
86	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
87	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getType()  ==  Token.COMMA;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getType()  ==  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getType()  ==  Token.COMMA;	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
88	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  parent.getType()  ==  Token.EXPR_RESULT;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  parent.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  parent.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
89	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT;  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
90	[BUG]  [BUGGY]  int  ancestorType  =  parent.getLastChild().getType();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getLastChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getLastChild().getType();	  int    ancestorType    =    an.getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
91	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getLastChild().getType();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getLastChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getLastChild().getType();	  int    ancestorType    =    an.getLastChild().getType();    	non-compiled	[CE]  	4	None	replace
92	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getLastChild().getType();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getLastChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getLastChild().getType();	  int    ancestorType    =    an.getLastChild().getType();    	non-compiled	[CE]  	4	None	replace
93	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSize();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSize();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSize();	  int    ancestorType    =    an.getRawParent();    	non-compiled	[CE]  	55	None	replace
94	[BUG]  [BUGGY]  int  ancestorType  =  an.getLocalName();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getLocalName();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getLocalName();	  int    ancestorType    =    an.getRawParent();    	non-compiled	[CE]  	55	None	replace
95	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount()  *  2  -  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount()  *  2  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount()  *  2  -  1;	  int    ancestorType    =    an.getChildCount()    *    2;    	non-compiled	[CE]  	44	None	replace
96	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount()  *  2  +  1;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount()  *  2  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount()  *  2  +  1;	  int    ancestorType    =    an.getChildCount()    *    2;    	non-compiled	[CE]  	44	None	replace
97	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  |  1xf;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  |  1xf;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  |  1xf;	  int    ancestorType    =    an.getType()    &    1xf;    	non-compiled	[CE]  	89	None	replace
98	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  1L;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  1L;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  1L;	  int    ancestorType    =    an.getType()    &    1xf;    	non-compiled	[CE]  	89	None	replace
99	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  -  1xf;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  -  1xf;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  -  1xf;	  int    ancestorType    =    an.getType()    &    1xf;    	non-compiled	[CE]  	89	None	replace
100	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  2xf;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  2xf;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  2xf;	  int    ancestorType    =    an.getType()    &    1xf;    	non-compiled	[CE]  	89	None	replace
101	[BUG]  [BUGGY]  Node  ancestorType  =  an.getSimpleOp();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getSimpleOp();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getSimpleOp();	  Node    ancestorType    =    an.getFirstChild();    	non-compiled	[CE]  	28	None	replace
102	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level  ||  isSimpleOp;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    ||    level;    	non-compiled	[CE]  	19	None	replace
103	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  isSimpleOp  ||  level;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  isSimpleOp  ||  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  isSimpleOp  ||  level;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    ||    level;    	non-compiled	[CE]  	19	None	replace
104	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level  +  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level  +  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level  +  isSimpleOp;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    ||    level;    	non-compiled	[CE]  	19	None	replace
105	[BUG]  [BUGGY]  int  ancestorType  =  an.getType(),  level  ||  isSimpleOp  ||  level;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType(),  level  ||  isSimpleOp  ||  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType(),  level  ||  isSimpleOp  ||  level;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    ||    level;    	non-compiled	[CE]  	19	None	replace
106	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level  >  isSimpleOp  ||  level;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level  >  isSimpleOp  ||  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level  >  isSimpleOp  ||  level;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    ||    level;    	non-compiled	[CE]  	19	None	replace
107	[BUG]  [BUGGY]  int  ancestorType  =  an.getNext().getFirstChild().getType();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getNext().getFirstChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getNext().getFirstChild().getType();	  int    ancestorType    =    an.getParent().getFirstChild().getType();    	non-compiled	[CE]  	76	None	replace
108	[BUG]  [BUGGY]  int  ancestorType  =  an.getLastChild().getFirstChild().getType();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getLastChild().getFirstChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getLastChild().getFirstChild().getType();	  int    ancestorType    =    an.getParent().getFirstChild().getType();    	non-compiled	[CE]  	76	None	replace
109	[BUG]  [BUGGY]  int  ancestorType  =  an.getParent().getLastChild().getType();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getParent().getLastChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getParent().getLastChild().getType();	  int    ancestorType    =    an.getParent().getFirstChild().getType();    	non-compiled	[CE]  	76	None	replace
110	[BUG]  [BUGGY]  int  ancestorType  =  an.getParent().getNext().getType();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getParent().getNext().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getParent().getNext().getType();	  int    ancestorType    =    an.getParent().getFirstChild().getType();    	non-compiled	[CE]  	76	None	replace
111	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount().getFirstChild().getType();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount().getFirstChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount().getFirstChild().getType();	  int    ancestorType    =    an.getParent().getFirstChild().getType();    	non-compiled	[CE]  	76	None	replace
112	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitializingChildCount()  -  1;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitializingChildCount()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitializingChildCount()  -  1;	  int    ancestorType    =    an.getInitializingChildCount();    	non-compiled	[CE]  	91	None	replace
113	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitializingChildCount()  +  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitializingChildCount()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitializingChildCount()  +  1;	  int    ancestorType    =    an.getInitializingChildCount();    	non-compiled	[CE]  	91	None	replace
114	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitializingChildCount()  *  2;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitializingChildCount()  *  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitializingChildCount()  *  2;	  int    ancestorType    =    an.getInitializingChildCount();    	non-compiled	[CE]  	91	None	replace
115	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitializingChildCount()  -  2;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitializingChildCount()  -  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitializingChildCount()  -  2;	  int    ancestorType    =    an.getInitializingChildCount();    	non-compiled	[CE]  	91	None	replace
116	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getInitializingChildCount();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getInitializingChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getInitializingChildCount();	  int    ancestorType    =    an.getInitializingChildCount();    	non-compiled	[CE]  	91	None	replace
117	[BUG]  [BUGGY]  int  ancestorType  =  parent.getLeastChild();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getLeastChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getLeastChild();	  int    ancestorType    =    an.getLeastChild();    	non-compiled	[CE]  	23	None	replace
118	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  |  1;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  |  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  |  1;	  int    ancestorType    =    an.getType()    &    1;    	non-compiled	[CE]  	37	None	replace
119	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  parent.getType()  :  1;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  parent.getType()  :  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  parent.getType()  :  1;	  int    ancestorType    =    an.getType()    &    1;    	non-compiled	[CE]  	37	None	replace
120	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA?  parent.getType()  :  1;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA?  parent.getType()  :  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.COMMA?  parent.getType()  :  1;	  int    ancestorType    =    an.getType()    &    1;    	non-compiled	[CE]  	37	None	replace
121	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.CALL?  parent.getType()  :  1;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.CALL?  parent.getType()  :  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.CALL?  parent.getType()  :  1;	  int    ancestorType    =    an.getType()    &    1;    	non-compiled	[CE]  	37	None	replace
122	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  1;  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  1;	  int    ancestorType    =    an.getType()    &    1;    	non-compiled	[CE]  	37	None	replace
123	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getLastChild().getParent().getType();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getLastChild().getParent().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getLastChild().getParent().getType();	  int    ancestorType    =    an.getFirstChild().getParent().getType();    	non-compiled	[CE]  	62	None	replace
124	[BUG]  [BUGGY]  int  ancestorType  =  an.getLastChild().getParent().getType();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getLastChild().getParent().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getLastChild().getParent().getType();	  int    ancestorType    =    an.getFirstChild().getParent().getType();    	non-compiled	[CE]  	62	None	replace
125	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getString().getType();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getString().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getString().getType();	  int    ancestorType    =    an.getFirstChild().getParent().getType();    	non-compiled	[CE]  	62	None	replace
126	[BUG]  [BUGGY]  int  ancestorType  =  parent.getFirstChild().getParent().getType();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getFirstChild().getParent().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getFirstChild().getParent().getType();	  int    ancestorType    =    an.getFirstChild().getParent().getType();    	non-compiled	[CE]  	62	None	replace
127	[BUG]  [BUGGY]  Node  ancestorType  =  an.getAncestors()  +  1;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getAncestors()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getAncestors()  +  1;	  Node    ancestorType    =    an.getAncestors();    	non-compiled	[CE]  	61	None	replace
128	[BUG]  [BUGGY]  Node  ancestorType  =  an.getAncestors()  -  1;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getAncestors()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getAncestors()  -  1;	  Node    ancestorType    =    an.getAncestors();    	non-compiled	[CE]  	61	None	replace
129	[BUG]  [BUGGY]  Node  ancestorType  =  an.getReturnType();  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getReturnType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getReturnType();	  Node    ancestorType    =    an.getAncestors();    	non-compiled	[CE]  	61	None	replace
130	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  protectSideEffectFreeCode;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  protectSideEffectFreeCode;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  protectSideEffectFreeCode;	  int    ancestorType    =    an.getType()    ||    protectSideEffectFreeCode;    	non-compiled	[CE]  	66	None	replace
131	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode,  level;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode,  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode,  level;	  int    ancestorType    =    an.getType()    ||    protectSideEffectFreeCode;    	non-compiled	[CE]  	66	None	replace
132	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode  ||  level;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode  ||  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode  ||  level;	  int    ancestorType    =    an.getType()    ||    protectSideEffectFreeCode;    	non-compiled	[CE]  	66	None	replace
133	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  isSimpleOp;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    -    1    ||    isSimpleOp;    	non-compiled	[CE]  	67	None	replace
134	[BUG]  [BUGGY]  int  ancestorType  =  parent.getType()  ||  isSimpleOp;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getType()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getType()  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    -    1    ||    isSimpleOp;    	non-compiled	[CE]  	67	None	replace
135	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EMPTY;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EMPTY;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EMPTY;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	15	None	replace
136	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	15	None	replace
137	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getType()  ==  Token.EMPTY;  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getType()  ==  Token.EMPTY;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getType()  ==  Token.EMPTY;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	15	None	replace
138	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.FUNCTION;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	15	None	replace
139	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.NAME;  [CE]  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.NAME;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.NAME;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	15	None	replace
140	[BUG]  [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getSimpleOperatorType(an.getType());  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getSimpleOperatorType(an.getType());  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  AnnotationUtil.getSimpleOperatorType(an.getType());	  Integer    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  	47	None	replace
141	[BUG]  [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getInstance(an.getType());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getInstance(an.getType());  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  AnnotationUtil.getInstance(an.getType());	  Integer    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
142	[BUG]  [BUGGY]  Integer  ancestorType  =  Annotation.getInstance(an.getType());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  Annotation.getInstance(an.getType());  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  Annotation.getInstance(an.getType());	  Integer    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
143	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  |  USELESS_CODE_ERROR;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  |  USELESS_CODE_ERROR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  |  USELESS_CODE_ERROR;	  int    ancestorType    =    an.getType()    &    USELESS_CODE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
144	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR  ||  an.getType()  ==  USELESS_CODE_ERROR;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR  ||  an.getType()  ==  USELESS_CODE_ERROR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR  ||  an.getType()  ==  USELESS_CODE_ERROR;	  int    ancestorType    =    an.getType()    &    USELESS_CODE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
145	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  USELESS_CODE_ERROR;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  USELESS_CODE_ERROR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  USELESS_CODE_ERROR;	  int    ancestorType    =    an.getType()    &    USELESS_CODE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
146	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR  ||  an.getType()!=  USELESS_CODE_ERROR;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR  ||  an.getType()!=  USELESS_CODE_ERROR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR  ||  an.getType()!=  USELESS_CODE_ERROR;	  int    ancestorType    =    an.getType()    &    USELESS_CODE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
147	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR  ||  an.getType()  >=  USELESS_CODE_ERROR;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR  ||  an.getType()  >=  USELESS_CODE_ERROR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR  ||  an.getType()  >=  USELESS_CODE_ERROR;	  int    ancestorType    =    an.getType()    &    USELESS_CODE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
148	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getFirstChild().getType();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getFirstChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getFirstChild().getType();	  int    ancestorType    =    parent.getFirstChild().getType();    	non-compiled	[CE]  	6	None	replace
149	[BUG]  [BUGGY]  Node  ancestorType  =  an.getFirstChild().getType();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getFirstChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getFirstChild().getType();	  int    ancestorType    =    parent.getFirstChild().getType();    	non-compiled	[CE]  	6	None	replace
150	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	11	None	replace
151	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	11	None	replace
152	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	11	None	replace
153	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  isResultUsed;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	11	None	replace
154	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  parent.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  parent.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  parent.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	11	None	replace
155	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSideEffect()  +  1;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSideEffect()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSideEffect()  +  1;	  int    ancestorType    =    an.getHeaderSideEffect();    	non-compiled	[CE]  	68	None	replace
156	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSideEffect()  -  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSideEffect()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSideEffect()  -  1;	  int    ancestorType    =    an.getHeaderSideEffect();    	non-compiled	[CE]  	68	None	replace
157	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSideEffectId();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSideEffectId();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSideEffectId();	  int    ancestorType    =    an.getHeaderSideEffect();    	non-compiled	[CE]  	68	None	replace
158	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getNext().getType();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getNext().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getNext().getType();	  Integer    ancestorType    =    an.getParent().getType();    	non-compiled	[CE]  	86	None	replace
159	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getParent().getFirstChild().getType();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getParent().getFirstChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getParent().getFirstChild().getType();	  Integer    ancestorType    =    an.getParent().getType();    	non-compiled	[CE]  	86	None	replace
160	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getChildCount().getType();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getChildCount().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getChildCount().getType();	  Integer    ancestorType    =    an.getParent().getType();    	non-compiled	[CE]  	86	None	replace
161	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getParent().getChildCount();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getParent().getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getParent().getChildCount();	  Integer    ancestorType    =    an.getParent().getType();    	non-compiled	[CE]  	86	None	replace
162	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext().getString();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getNext().getString();	  int    ancestorType    =    an.getFirstChild().getString();    	non-compiled	[CE]  	81	None	replace
163	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getLastChild().getString();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getLastChild().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getLastChild().getString();	  int    ancestorType    =    an.getFirstChild().getString();    	non-compiled	[CE]  	81	None	replace
164	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getString()  +  1;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getString()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getString()  +  1;	  int    ancestorType    =    an.getFirstChild().getString();    	non-compiled	[CE]  	81	None	replace
165	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getString();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getFirstChild().getString();	  int    ancestorType    =    an.getFirstChild().getString();    	non-compiled	[CE]  	81	None	replace
166	[BUG]  [BUGGY]  float  ancestorType  =  an.getType();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  float  ancestorType  =  an.getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	float  ancestorType  =  an.getType();	  float    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  	64	None	replace
167	[BUG]  [BUGGY]  double  ancestorType  =  an.getType()  +  1;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  double  ancestorType  =  an.getType()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	double  ancestorType  =  an.getType()  +  1;	  float    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  	64	None	replace
168	[BUG]  [BUGGY]  long  ancestorType  =  an.getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  long  ancestorType  =  an.getType()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	long  ancestorType  =  an.getType()  +  1;	  float    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
169	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getNext();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getNext();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getNext();	  Integer    ancestorType    =    an.getParent();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
170	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getRawParent();  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getRawParent();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getRawParent();	  Integer    ancestorType    =    an.getParent();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
171	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  isResultUsed;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  isResultUsed;	  int    ancestorType    =    an.getType()    &&    isSimpleOp;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
172	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  &&  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  &&  isSimpleOp;	  int    ancestorType    =    an.getType()    &&    isSimpleOp;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
173	[BUG]  [BUGGY]  int  ancestorType  =  parent.getType()  &&  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getType()  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getType()  &&  isSimpleOp;	  int    ancestorType    =    an.getType()    &&    isSimpleOp;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
174	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  &&  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  &&  isSimpleOp;	  int    ancestorType    =    an.getType()    &&    isSimpleOp;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
175	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed  ||  level;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed  ||  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed  ||  level;	  int    ancestorType    =    an.getType()    ||    isResultUsed;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
176	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed  +  1;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed  +  1;	  int    ancestorType    =    an.getType()    ||    isResultUsed;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
177	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ||  isResultUsed;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ||  isResultUsed;	  int    ancestorType    =    an.getType()    ||    isResultUsed;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
178	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.NAME;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.NAME;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.NAME;	  boolean    ancestorType    =    an.getType()    miere    miere    miere;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
179	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.FUNCTION;	  boolean    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
180	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
181	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild().getType()!=  Token.FUNCTION;	  boolean    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
182	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()!=  Token.EXPR_RESULT;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild().getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
183	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.BLOCK;	  boolean    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
184	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  boolean    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
185	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount()  *  1;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount()  *  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount()  *  1;	  int    ancestorType    =    an.getChildCount()    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
186	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getChildCount()  -  1;  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getChildCount()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getChildCount()  -  1;	  Integer    ancestorType    =    an.getChildCount();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
187	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getChildCount()  +  1;  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getChildCount()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getChildCount()  +  1;	  Integer    ancestorType    =    an.getChildCount();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
188	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getChildCount()  *  2;  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getChildCount()  *  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getChildCount()  *  2;	  Integer    ancestorType    =    an.getChildCount();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
189	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getChildCount()  >  1;  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getChildCount()  >  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getChildCount()  >  1;	  Integer    ancestorType    =    an.getChildCount();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
190	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getNext().getType();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getNext().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getFirstChild().getNext().getType();	  Integer    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
191	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getParent().getType();  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getParent().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getFirstChild().getParent().getType();	  Integer    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
192	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getType()  ||  isSimpleOp;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getType()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getFirstChild().getType()  ||  isSimpleOp;	  Integer    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
193	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getInitializingChild().getType();  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getInitializingChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getFirstChild().getInitializingChild().getType();	  Integer    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
194	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  -  1;  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  -  1;	  int    ancestorType    =    parent.getType()    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
195	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getType()  -  1;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getType()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getType()  -  1;	  int    ancestorType    =    parent.getType()    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
196	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getType()!=  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getType()!=  Token.FUNCTION;	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
197	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  >=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  >=  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  >=  Token.FUNCTION;	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
198	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  >>  Token.FUNCTION;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  >>  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  >>  Token.FUNCTION;	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
199	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitializingChild().getType();  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitializingChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitializingChild().getType();	  int    ancestorType    =    an.getInitializingChild();    	non-compiled	[CE]  	56	None	replace
200	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getInitializingChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getInitializingChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getInitializingChild();	  int    ancestorType    =    an.getInitializingChild();    	non-compiled	[CE]  	56	None	replace
201	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getInitializingChild();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getInitializingChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getInitializingChild();	  int    ancestorType    =    an.getInitializingChild();    	non-compiled	[CE]  	56	None	replace
202	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitializingChild().getParent();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitializingChild().getParent();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitializingChild().getParent();	  int    ancestorType    =    an.getInitializingChild();    	non-compiled	[CE]  	56	None	replace
203	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  an.getType()!=  Token.EXPR_RESULT);	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	85	None	replace
204	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.EXPR_RESULT);	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	85	None	replace
205	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  parent.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  parent.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  parent.getType()!=  Token.EXPR_RESULT);	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	85	None	replace
206	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >=  Token.EXPR_RESULT);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  an.getType()  >=  Token.EXPR_RESULT);	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	85	None	replace
207	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >>  Token.EXPR_RESULT);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  an.getType()  >>  Token.EXPR_RESULT);	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	85	None	replace
208	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  >=  Token.EXPR_RESULT);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  an.getType()  >=  Token.EXPR_RESULT);	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	85	None	replace
209	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount()  <  1;  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount()  <  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount()  <  1;	  int    ancestorType    =    an.getChildCount()    >    1;    	non-compiled	[CE]  	94	None	replace
210	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount()  >  2;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount()  >  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount()  >  2;	  int    ancestorType    =    an.getChildCount()    >    1;    	non-compiled	[CE]  	94	None	replace
211	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount()  {  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount()  {  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount()  {  1;	  int    ancestorType    =    an.getChildCount()    >    1;    	non-compiled	[CE]  	94	None	replace
212	[BUG]  [BUGGY]  NodeUtil.removeChild(an);  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  NodeUtil.removeChild(an);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	NodeUtil.removeChild(an);	  n.removeChild(an);    	non-compiled	[CE]  	33	None	replace
213	[BUG]  [BUGGY]  n.addChildToFront(an);  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.addChildToFront(an);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.addChildToFront(an);	  n.removeChild(an);    	non-compiled	[CE]  	33	None	replace
214	[BUG]  [BUGGY]  n.replaceChild(an,  level);  [CE]  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  level);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  level);	  n.removeChild(an);    	non-compiled	[CE]  	33	None	replace
215	[BUG]  [BUGGY]  n.removeChild(ans);  [CE]  [FE]                                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.removeChild(ans);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.removeChild(ans);	  n.removeChild(an);    	non-compiled	[CE]  	33	None	replace
216	[BUG]  [BUGGY]  n.addChildToBack(an);  [CE]  [FE]                                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.addChildToBack(an);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.addChildToBack(an);	  n.removeChild(an);    	non-compiled	[CE]  	33	None	replace
217	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getType()!=  Token.COMMA;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getType()!=  Token.COMMA;	  boolean    ancestorType    =    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	72	None	replace
218	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  >=  Token.COMMA;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  >=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  >=  Token.COMMA;	  boolean    ancestorType    =    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	72	None	replace
219	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  >>  Token.COMMA;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  >>  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  >>  Token.COMMA;	  boolean    ancestorType    =    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	72	None	replace
220	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild()  +  1;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild()  +  1;	  int    ancestorType    =    an.getLastChild()    +    1;    	non-compiled	[CE]  	57	None	replace
221	[BUG]  [BUGGY]  int  ancestorType  =  parent.getLastChild()  +  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getLastChild()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getLastChild()  +  1;	  int    ancestorType    =    an.getLastChild()    +    1;    	non-compiled	[CE]  	57	None	replace
222	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getChildCount();  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getChildCount();	  int    ancestorType    =    an.getChildCount()    -    1;    	non-compiled	[CE]  	42	None	replace
223	[BUG]  [BUGGY]  int  ancestorType  =  parent.getChildCount()  -  1;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getChildCount()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getChildCount()  -  1;	  int    ancestorType    =    an.getChildCount()    -    1;    	non-compiled	[CE]  	42	None	replace
224	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getChildCount()  -  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getChildCount()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getChildCount()  -  1;	  int    ancestorType    =    an.getChildCount()    -    1;    	non-compiled	[CE]  	42	None	replace
225	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isResultUsed;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  ||  isResultUsed;	  Integer    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	46	None	replace
226	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp  ||  level;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp  ||  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  ||  isSimpleOp  ||  level;	  Integer    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	46	None	replace
227	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  ||  level;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  ||  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  ||  level;	  Integer    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	46	None	replace
228	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp  +  1;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  ||  isSimpleOp  +  1;	  Integer    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	46	None	replace
229	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp,  level;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp,  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  ||  isSimpleOp,  level;	  Integer    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	46	None	replace
230	[BUG]  [BUGGY]  Node  ancestor  =  an.getLastChild();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.getLastChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.getLastChild();	  Node    ancestor    =    an.getFirstChild();    	non-compiled	[CE]  	29	None	replace
231	[BUG]  [BUGGY]  Node  ancestor  =  an.getAncestors();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.getAncestors();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.getAncestors();	  Node    ancestor    =    an.getFirstChild();    	non-compiled	[CE]  	29	None	replace
232	[BUG]  [BUGGY]  Node  ancestor  =  an.getNext();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.getNext();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.getNext();	  Node    ancestor    =    an.getFirstChild();    	non-compiled	[CE]  	29	None	replace
233	[BUG]  [BUGGY]  Node  ancestor  =  an.getCurrentNode();  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.getCurrentNode();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.getCurrentNode();	  Node    ancestor    =    an.getFirstChild();    	non-compiled	[CE]  	29	None	replace
234	[BUG]  [BUGGY]  Node  ancestor  =  an.getNode();  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.getNode();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.getNode();	  Node    ancestor    =    an.getFirstChild();    	non-compiled	[CE]  	29	None	replace
235	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  	10	None	replace
236	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  >=  Token.EXPR_RESULT;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  >=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  >=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  	10	None	replace
237	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  	10	None	replace
238	[BUG]  [BUGGY]  int  ancestorType  =  an.getName().getFirstChild().getType();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getName().getFirstChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getName().getFirstChild().getType();	  int    ancestorType    =    an.getName().getType();    	non-compiled	[CE]  	53	None	replace
239	[BUG]  [BUGGY]  int  ancestorType  =  an.getName().getString();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getName().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getName().getString();	  int    ancestorType    =    an.getName().getType();    	non-compiled	[CE]  	53	None	replace
240	[BUG]  [BUGGY]  int  ancestorType  =  an.getAncestor().getType();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getAncestor().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getAncestor().getType();	  int    ancestorType    =    an.getName().getType();    	non-compiled	[CE]  	53	None	replace
241	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  level;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  level;	  int    ancestorType    =    an.getType()    ||    level;    	non-compiled	[CE]  	18	None	replace
242	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level  +  1;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level  +  1;	  int    ancestorType    =    an.getType()    ||    level;    	non-compiled	[CE]  	18	None	replace
243	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level,  isSimpleOp;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level,  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level,  isSimpleOp;	  int    ancestorType    =    an.getType()    ||    level;    	non-compiled	[CE]  	18	None	replace
244	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level  <  USELESS_CODE_ERROR;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level  <  USELESS_CODE_ERROR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level  <  USELESS_CODE_ERROR;	  int    ancestorType    =    an.getType()    ||    level;    	non-compiled	[CE]  	18	None	replace
245	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level-1;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level-1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level-1;	  int    ancestorType    =    an.getType()    ||    level;    	non-compiled	[CE]  	18	None	replace
246	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level  >  USELESS_CODE_ERROR;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level  >  USELESS_CODE_ERROR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level  >  USELESS_CODE_ERROR;	  int    ancestorType    =    an.getType()    ||    level;    	non-compiled	[CE]  	18	None	replace
247	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getType()  ||  isResultUsed;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getType()  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getType()  ||  isResultUsed;	  int    ancestorType    =    an.getFirstChild().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	7	None	replace
248	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getType()  &&  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getType()  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getType()  &&  isSimpleOp;	  int    ancestorType    =    an.getFirstChild().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	7	None	replace
249	[BUG]  [BUGGY]  int  ancestorType  =  an.getLastChild().getType()  ||  isSimpleOp;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getLastChild().getType()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getLastChild().getType()  ||  isSimpleOp;	  int    ancestorType    =    an.getFirstChild().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	7	None	replace
250	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getType()  ||  isSimpleOp  +  1;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getType()  ||  isSimpleOp  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getType()  ||  isSimpleOp  +  1;	  int    ancestorType    =    an.getFirstChild().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	7	None	replace
251	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getType(),  isSimpleOp;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getType(),  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getType(),  isSimpleOp;	  int    ancestorType    =    an.getFirstChild().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	7	None	replace
252	[BUG]  [BUGGY]  int  ancestorType  =  parent.getFirstChild().getType()  ||  isSimpleOp;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getFirstChild().getType()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getFirstChild().getType()  ||  isSimpleOp;	  int    ancestorType    =    an.getFirstChild().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	7	None	replace
253	[BUG]  [BUGGY]  boolean  ancestorType  =  parent.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  parent.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  parent.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
254	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
255	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
256	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
257	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
258	[BUG]  [BUGGY]  Node  ancestor  =  an.getHeader();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.getHeader();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.getHeader();	  Node    ancestor    =    an.getParent();    	non-compiled	[CE]  	31	None	replace
259	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()!=  Token.COMMA;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  an.getType()!=  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
260	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.COMMA;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
261	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  parent.getType()!=  Token.COMMA;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  parent.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  parent.getType()!=  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
262	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  /  ||  an.getType()!=  Token.COMMA;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  /  ||  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  /  ||  an.getType()!=  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
263	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  >=  Token.COMMA;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  >=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  an.getType()  >=  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
264	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()  >>  Token.COMMA;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()  >>  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  an.getType()  >>  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
265	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  &&  isResultUsed;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  &&  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  &&  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
266	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  isResultUsed;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
267	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  &&  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  &&  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
268	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  isSimpleOp;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
269	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.CALL;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.CALL;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.CALL;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
270	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  isResultUsed);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  isResultUsed);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  isResultUsed);	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
271	[BUG]  [BUGGY]  int  ancestorType  =  an.getAncestorType()  -  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getAncestorType()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getAncestorType()  -  1;	  int    ancestorType    =    an.getAncestorType();    	non-compiled	[CE]  	69	None	replace
272	[BUG]  [BUGGY]  int  ancestorType  =  an.getAncestorType()  +  1;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getAncestorType()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getAncestorType()  +  1;	  int    ancestorType    =    an.getAncestorType();    	non-compiled	[CE]  	69	None	replace
273	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getAncestorType();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getAncestorType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getAncestorType();	  int    ancestorType    =    an.getAncestorType();    	non-compiled	[CE]  	69	None	replace
274	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getAncestorType();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getAncestorType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getAncestorType();	  int    ancestorType    =    an.getAncestorType();    	non-compiled	[CE]  	69	None	replace
275	[BUG]  [BUGGY]  int  ancestorType  =  an.getAncestorType()  &  0xff;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getAncestorType()  &  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getAncestorType()  &  0xff;	  int    ancestorType    =    an.getAncestorType();    	non-compiled	[CE]  	69	None	replace
276	[BUG]  [BUGGY]  int  ancestorType  =  an.getQualifiedName()  +  1;  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getQualifiedName()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getQualifiedName()  +  1;	  int    ancestorType    =    an.getQualifiedName();    	non-compiled	[CE]  	90	None	replace
277	[BUG]  [BUGGY]  int  ancestorType  =  an.getQualifiedName()  -  1;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getQualifiedName()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getQualifiedName()  -  1;	  int    ancestorType    =    an.getQualifiedName();    	non-compiled	[CE]  	90	None	replace
278	[BUG]  [BUGGY]  int  ancestorType  =  an.getQualifiedName().length();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getQualifiedName().length();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getQualifiedName().length();	  int    ancestorType    =    an.getQualifiedName();    	non-compiled	[CE]  	90	None	replace
279	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getQualifiedName();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getQualifiedName();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getQualifiedName();	  int    ancestorType    =    an.getQualifiedName();    	non-compiled	[CE]  	90	None	replace
280	[BUG]  [BUGGY]  int  ancestorType  =  an.getQualifiedName()  /  2;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getQualifiedName()  /  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getQualifiedName()  /  2;	  int    ancestorType    =    an.getQualifiedName();    	non-compiled	[CE]  	90	None	replace
281	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getQualifiedName();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getQualifiedName();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getQualifiedName();	  int    ancestorType    =    an.getQualifiedName();    	non-compiled	[CE]  	90	None	replace
282	[BUG]  [BUGGY]  int  ancestorType  =  parent.getType();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  parent.getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  parent.getType();	  int    ancestorType    =    parent.getType()    +    1;    	non-compiled	[CE]  	40	None	replace
283	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  isResultUsed?  0  :  an.getType();  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  isResultUsed?  0  :  an.getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  isResultUsed?  0  :  an.getType();	  int    ancestorType    =    an.getType()    ||    isResultUsed?    0    :    an.getType();    	non-compiled	[CE]  	82	None	replace
284	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  1  :  an.getType();  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  1  :  an.getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed?  1  :  an.getType();	  int    ancestorType    =    an.getType()    ||    isResultUsed?    0    :    an.getType();    	non-compiled	[CE]  	82	None	replace
285	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isSimpleOp?  0  :  an.getType();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isSimpleOp?  0  :  an.getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isSimpleOp?  0  :  an.getType();	  int    ancestorType    =    an.getType()    ||    isResultUsed?    0    :    an.getType();    	non-compiled	[CE]  	82	None	replace
286	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  2  :  an.getType();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  2  :  an.getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed?  2  :  an.getType();	  int    ancestorType    =    an.getType()    ||    isResultUsed?    0    :    an.getType();    	non-compiled	[CE]  	82	None	replace
287	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  parent.getType()  :  2;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  parent.getType()  :  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  parent.getType()  :  2;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  	88	None	replace
288	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  2;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  2;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  	88	None	replace
289	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA?  parent.getType()  :  2;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA?  parent.getType()  :  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.COMMA?  parent.getType()  :  2;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  	88	None	replace
290	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.BLOCK?  parent.getType()  :  2;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.BLOCK?  parent.getType()  :  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.BLOCK?  parent.getType()  :  2;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  	88	None	replace
291	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  |  2;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  |  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  |  2;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  	88	None	replace
292	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getLastChild()  +  1;  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getLastChild()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getLastChild()  +  1;	  Integer    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  	24	None	replace
293	[BUG]  [BUGGY]  int  ancestorType  =  an.getParent().getType()  ||  isResultUsed;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getParent().getType()  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getParent().getType()  ||  isResultUsed;	  int    ancestorType    =    an.getParent().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	77	None	replace
294	[BUG]  [BUGGY]  int  ancestorType  =  an.getParent().getType()  &&  isSimpleOp;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getParent().getType()  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getParent().getType()  &&  isSimpleOp;	  int    ancestorType    =    an.getParent().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	77	None	replace
295	[BUG]  [BUGGY]  int  ancestorType  =  an.getNext().getType()  ||  isSimpleOp;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getNext().getType()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getNext().getType()  ||  isSimpleOp;	  int    ancestorType    =    an.getParent().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	77	None	replace
296	[BUG]  [BUGGY]  int  ancestorType  =  an.getName().getType()  ||  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getName().getType()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getName().getType()  ||  isSimpleOp;	  int    ancestorType    =    an.getParent().getType()    ||    isSimpleOp;    	non-compiled	[CE]  	77	None	replace
297	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  *  0xff;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  *  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  *  0xff;	  int    ancestorType    =    an.getType()    -    0xff;    	non-compiled	[CE]  	38	None	replace
298	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()!=  Token.FUNCTION;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()!=  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  an.getType()!=  Token.FUNCTION;	  int    ancestorType    =    an.getType()    -    0xff;    	non-compiled	[CE]  	38	None	replace
299	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.FUNCTION;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.FUNCTION;	  int    ancestorType    =    an.getType()    -    0xff;    	non-compiled	[CE]  	38	None	replace
300	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  <  0xff;  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  <  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  an.getType()  <  0xff;	  int    ancestorType    =    an.getType()    -    0xff;    	non-compiled	[CE]  	38	None	replace
301	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  /  0xff;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  /  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  /  0xff;	  int    ancestorType    =    an.getType()    +    0xff;    	non-compiled	[CE]  	74	None	replace
302	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  1xff;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  1xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  1xff;	  int    ancestorType    =    an.getType()    +    0xff;    	non-compiled	[CE]  	74	None	replace
303	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  isSimpleOp  +  1;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  isSimpleOp  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  isSimpleOp  +  1;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    +    1;    	non-compiled	[CE]  	20	None	replace
304	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  /  ||  isSimpleOp  +  1;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  /  ||  isSimpleOp  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  /  ||  isSimpleOp  +  1;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    +    1;    	non-compiled	[CE]  	20	None	replace
305	[BUG]  [BUGGY]  int  ancestorType  =  an.getType(),  isSimpleOp  +  1;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType(),  isSimpleOp  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType(),  isSimpleOp  +  1;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    +    1;    	non-compiled	[CE]  	20	None	replace
306	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  -  1  ||  isSimpleOp  +  1;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  -  1  ||  isSimpleOp  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  -  1  ||  isSimpleOp  +  1;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    +    1;    	non-compiled	[CE]  	20	None	replace
307	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isSimpleOp  +  2;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isSimpleOp  +  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isSimpleOp  +  2;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    +    1;    	non-compiled	[CE]  	20	None	replace
308	[BUG]  [BUGGY]  Node  ancestorType  =  an.getRawParent();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getRawParent();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getRawParent();	  Node    ancestorType    =    an.getParent();    	non-compiled	[CE]  	30	None	replace
309	[BUG]  [BUGGY]  Node  ancestorType  =  an.getHeader();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getHeader();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getHeader();	  Node    ancestorType    =    an.getParent();    	non-compiled	[CE]  	30	None	replace
310	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSibling()  -  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSibling()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSibling()  -  1;	  int    ancestorType    =    an.getHeaderSibling();    	non-compiled	[CE]  	96	None	replace
311	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSibling()  +  1;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSibling()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSibling()  +  1;	  int    ancestorType    =    an.getHeaderSibling();    	non-compiled	[CE]  	96	None	replace
312	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSibling()  /  2;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSibling()  /  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSibling()  /  2;	  int    ancestorType    =    an.getHeaderSibling();    	non-compiled	[CE]  	96	None	replace
313	[BUG]  [BUGGY]  int  ancestorType  =  an.getAncestorSibling();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getAncestorSibling();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getAncestorSibling();	  int    ancestorType    =    an.getHeaderSibling();    	non-compiled	[CE]  	96	None	replace
314	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType());  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType());  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType());	  boolean    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  	41	None	replace
315	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType())  {  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType())  {	  boolean    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  	41	None	replace
316	[BUG]  [BUGGY]  int  ancestorType  =  an.getParent().getChildCount()  -  1;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getParent().getChildCount()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getParent().getChildCount()  -  1;	  int    ancestorType    =    an.getParent().getChildCount();    	non-compiled	[CE]  	99	None	replace
317	[BUG]  [BUGGY]  int  ancestorType  =  an.getParent().getFirstChild().getChildCount();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getParent().getFirstChild().getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getParent().getFirstChild().getChildCount();	  int    ancestorType    =    an.getParent().getChildCount();    	non-compiled	[CE]  	99	None	replace
318	[BUG]  [BUGGY]  int  ancestorType  =  an.getNext().getChildCount();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getNext().getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getNext().getChildCount();	  int    ancestorType    =    an.getParent().getChildCount();    	non-compiled	[CE]  	99	None	replace
319	[BUG]  [BUGGY]  int  ancestorType  =  an.getLastChild().getChildCount();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getLastChild().getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getLastChild().getChildCount();	  int    ancestorType    =    an.getParent().getChildCount();    	non-compiled	[CE]  	99	None	replace
320	[BUG]  [BUGGY]  int  ancestorType  =  an.getParent().getChildCount()  +  1;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getParent().getChildCount()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getParent().getChildCount()  +  1;	  int    ancestorType    =    an.getParent().getChildCount();    	non-compiled	[CE]  	99	None	replace
321	[BUG]  [BUGGY]  double  ancestorType  =  an.getType()  -  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  double  ancestorType  =  an.getType()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	double  ancestorType  =  an.getType()  -  1;	  float    ancestorType    =    an.getType()    -    1;    	non-compiled	[CE]  	3	None	replace
322	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  |  0xff  &  1;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  |  0xff  &  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  |  0xff  &  1;	  int    ancestorType    =    an.getType()    |    0xff;    	non-compiled	[CE]  	35	None	replace
323	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  |  0xff  &  1L;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  |  0xff  &  1L;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  |  0xff  &  1L;	  int    ancestorType    =    an.getType()    |    0xff;    	non-compiled	[CE]  	35	None	replace
324	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  an.getType()!=  Token.EXPR_RESULT;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  	83	None	replace
325	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  an.getType()  ==  Token.EXPR_RESULT;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  	83	None	replace
326	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  parent.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  parent.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  parent.getType()!=  Token.EXPR_RESULT;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  	83	None	replace
327	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >=  Token.EXPR_RESULT;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  an.getType()  >=  Token.EXPR_RESULT;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  	83	None	replace
328	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  >=  Token.EXPR_RESULT;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  an.getType()  >=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  an.getType()  >=  Token.EXPR_RESULT;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  	83	None	replace
329	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()  >>  Token.EXPR_RESULT;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()  >>  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  an.getType()  >>  Token.EXPR_RESULT;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  	83	None	replace
330	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  |  1xff;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  |  1xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  |  1xff;	  int    ancestorType    =    an.getType()    &    1xff;    	non-compiled	[CE]  	36	None	replace
331	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  -  1xff;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  -  1xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  -  1xff;	  int    ancestorType    =    an.getType()    &    1xff;    	non-compiled	[CE]  	36	None	replace
332	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  2xff;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  2xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  2xff;	  int    ancestorType    =    an.getType()    &    1xff;    	non-compiled	[CE]  	36	None	replace
333	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  |  0xff,  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  |  0xff,  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  |  0xff,  isSimpleOp;	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
334	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isResultUsed;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  0xff,  isResultUsed;	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
335	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isSimpleOp,  level;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isSimpleOp,  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  0xff,  isSimpleOp,  level;	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
336	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  1xff,  isSimpleOp;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  1xff,  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  1xff,  isSimpleOp;	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
337	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isSimpleOp  +  1;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isSimpleOp  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  0xff,  isSimpleOp  +  1;	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
338	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isSimpleOp);  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isSimpleOp);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  0xff,  isSimpleOp);	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
339	[BUG]  [BUGGY]  boolean  isSimpleOp  =  an.getType()  ||  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  isSimpleOp  =  an.getType()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  isSimpleOp  =  an.getType()  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
340	[BUG]  [BUGGY]  boolean  isResultUsed  =  an.getType()  ||  isSimpleOp;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  isResultUsed  =  an.getType()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  isResultUsed  =  an.getType()  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
341	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  isSimpleOp;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
342	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ||  isSimpleOp  ||  level;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ||  isSimpleOp  ||  level;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ||  isSimpleOp  ||  level;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
343	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.CALL  ||  isResultUsed;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.CALL  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.CALL  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
344	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  ancestorType  ==  Token.EXPR_RESULT;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  ancestorType  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  ancestorType  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
345	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  parent.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  parent.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  parent.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
346	[BUG]  [BUGGY]  if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)continue;    	non-compiled	[CE]  	93	None	replace
347	[BUG]  [BUGGY]  if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLO  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLO  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLO	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)continue;    	non-compiled	[CE]  	93	None	replace
348	[BUG]  [BUGGY]  if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)continue;    	non-compiled	[CE]  	93	None	replace
349	[BUG]  [BUGGY]  if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an!=  null)  {  if(an.getType()  ==  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)continue;    	non-compiled	[CE]  	93	None	replace
350	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.NAME  ||  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.NAME  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.NAME  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
351	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.SEMI;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.SEMI;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.SEMI;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
352	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.STRING  ||  isSimpleOp;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.STRING  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.STRING  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
353	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.SEMI;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.SEMI;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.SEMI;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
354	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.ASSIGN  &&  isSimpleOp;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.ASSIGN  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.ASSIGN  &&  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
355	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  1xf;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  1xf;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  1xf;	  int    ancestorType    =    an.getType()    &    1xf;    	non-compiled	[CE]  	89	None	replace
356	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  1xf  +  1;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  1xf  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  1xf  +  1;	  int    ancestorType    =    an.getType()    &    1xf;    	non-compiled	[CE]  	89	None	replace
357	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  [Delete]  Token.BLOCK;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  [Delete]  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  [Delete]  Token.BLOCK;	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
358	[BUG]  [BUGGY]  float  ancestorType  =  an.getType()  -  0xff;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  float  ancestorType  =  an.getType()  -  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	float  ancestorType  =  an.getType()  -  0xff;	  int    ancestorType    =    an.getType()    -    0xff;    	non-compiled	[CE]  	38	None	replace
359	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK);	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
360	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT)  {	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
361	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  isResultUsed);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  isResultUsed);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  isResultUsed);	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
362	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.COMMA);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.COMMA);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.COMMA);	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
363	[BUG]  [BUGGY]  int  ancestorType  =  an.getQualifiedName()  *  2;  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getQualifiedName()  *  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getQualifiedName()  *  2;	  int    ancestorType    =    an.getQualifiedName();    	non-compiled	[CE]  	90	None	replace
364	[BUG]  [BUGGY]  int  ancestorType  =  an.getQualifiedName()  -  2;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getQualifiedName()  -  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getQualifiedName()  -  2;	  int    ancestorType    =    an.getQualifiedName();    	non-compiled	[CE]  	90	None	replace
365	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isSideEffectFreeCode;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isSideEffectFreeCode;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isSideEffectFreeCode;	  int    ancestorType    =    an.getType()    ||    isProtecteEffectFreeCode;    	non-compiled	[CE]  	97	None	replace
366	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  protectionSideEffectFreeCode;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  protectionSideEffectFreeCode;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  protectionSideEffectFreeCode;	  int    ancestorType    =    an.getType()    ||    isProtecteEffectFreeCode;    	non-compiled	[CE]  	97	None	replace
367	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.COMMA;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  	88	None	replace
368	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  	88	None	replace
369	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.BLOCK;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.BLOCK;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  	88	None	replace
370	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  {  1;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  {  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  {  1;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  	88	None	replace
371	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.NAME  ||  0xff;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.NAME  ||  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.NAME  ||  0xff;	  boolean    ancestorType    =    an.getType()    &    0xff;    	non-compiled	[CE]  	39	None	replace
372	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()  >>  Token.EXPR_RESULT);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()  >>  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  an.getType()  >>  Token.EXPR_RESULT);	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	85	None	replace
373	[BUG]  [BUGGY]  Node  ancestor  =  an.getOwnerFunction();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.getOwnerFunction();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.getOwnerFunction();	  Node    ancestor    =    an.getParent();    	non-compiled	[CE]  	31	None	replace
374	[BUG]  [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getInstanceType(an.getType());  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getInstanceType(an.getType());  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  AnnotationUtil.getInstanceType(an.getType());	  Integer    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  	47	None	replace
375	[BUG]  [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getTypeAncestor(an.getType());  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getTypeAncestor(an.getType());  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  AnnotationUtil.getTypeAncestor(an.getType());	  Integer    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
376	[BUG]  [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getTypeOfThis(an.getType());  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  AnnotationUtil.getTypeOfThis(an.getType());  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  AnnotationUtil.getTypeOfThis(an.getType());	  Integer    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
377	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >>  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >>  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  an.getType()  >>  Token.EXPR_RESULT;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
378	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode,  isResultUsed);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode,  isResultUsed);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode,  isResultUsed);	  int    ancestorType    =    an.getType()    ||    protectSideEffectFreeCode;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
379	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode,  isResultUsed;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode,  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode,  isResultUsed;	  int    ancestorType    =    an.getType()    ||    protectSideEffectFreeCode;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
380	[BUG]  [BUGGY]  int  ancestorType  =  an.getParent().getFirstChild().getNext().getType();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getParent().getFirstChild().getNext().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getParent().getFirstChild().getNext().getType();	  int    ancestorType    =    an.getParent().getFirstChild().getType();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
381	[BUG]  [BUGGY]  int  ancestorType  =  an.getGrandparent().getFirstChild().getType();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getGrandparent().getFirstChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getGrandparent().getFirstChild().getType();	  int    ancestorType    =    an.getParent().getFirstChild().getType();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
382	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  >>  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  >>  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  >>  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
383	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  >>  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  >>  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  >>  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
384	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  [Delete]  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  [Delete]  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  [Delete]  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
385	[BUG]  [BUGGY]  float  ancestorType  =  an.getChildCount()  +  1;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  float  ancestorType  =  an.getChildCount()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	float  ancestorType  =  an.getChildCount()  +  1;	  int    ancestorType    =    an.getChildCount()    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
386	[BUG]  [BUGGY]  Int  ancestorType  =  an.getChildCount();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Int  ancestorType  =  an.getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Int  ancestorType  =  an.getChildCount();	  int    ancestorType    =    an.getChildCount()    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
387	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  isResultUsed;  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
388	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed);  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed);	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
389	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed)  {  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed)  {  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed)  {	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
390	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount()  /  2  -  1;  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount()  /  2  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount()  /  2  -  1;	  int    ancestorType    =    an.getChildCount()    /    2;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
391	[BUG]  [BUGGY]  int  ancestorType  =  an.getChildCount()  +  2;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getChildCount()  +  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getChildCount()  +  2;	  int    ancestorType    =    an.getChildCount()    /    2;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
392	[BUG]  [BUGGY]  int  ancestorType  =  an.getfirstChild()  +  1;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getfirstChild()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getfirstChild()  +  1;	  int    ancestorType    =    an.getLastChild()    +    1;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
393	[BUG]  [BUGGY]  int  ancestorType  =  an.getString();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getString();	  int    ancestorType    =    an.getRawParent();    	non-compiled	[CE]  	55	None	replace
394	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isResultUsed  ||  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  0xff,  isResultUsed  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  0xff,  isResultUsed  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
395	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  -  0xff,  isSimpleOp;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  -  0xff,  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  -  0xff,  isSimpleOp;	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
396	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  -  1xff,  isSimpleOp;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  -  1xff,  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  -  1xff,  isSimpleOp;	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
397	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level  >  isSimpleOp  ||  isSimpleOp;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level  >  isSimpleOp  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level  >  isSimpleOp  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    ||    level;    	non-compiled	[CE]  	19	None	replace
398	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  levelOp  ||  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  levelOp  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  levelOp  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    ||    level;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
399	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level,  isSimpleOp  ||  isResultUsed;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level,  isSimpleOp  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level,  isSimpleOp  ||  isResultUsed;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    ||    level;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
400	[BUG]  [BUGGY]  Node  ancestorType  =  an.getOwnerFunction();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getOwnerFunction();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getOwnerFunction();	  Node    ancestorType    =    an.getParent();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
401	[BUG]  [BUGGY]  Node  ancestor  =  an.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.removeFirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.removeFirstChild();	  Node    ancestor    =    an.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
402	[BUG]  [BUGGY]  Node  ancestor  =  an.getChildCount();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.getChildCount();	  Node    ancestor    =    an.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
403	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level-2;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level-2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level-2;	  int    ancestorType    =    an.getType()    ||    level;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
404	[BUG]  [BUGGY]  Int  ancestorType  =  an.getType();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Int  ancestorType  =  an.getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Int  ancestorType  =  an.getType();	  int    ancestorType    =    parent.getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
405	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  [Delete]  Token.COMMA;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  [Delete]  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  [Delete]  Token.COMMA;	  boolean    ancestorType    =    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
406	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getType()  -  1  ||  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getType()  -  1  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getType()  -  1  ||  isSimpleOp;	  int    ancestorType    =    an.getFirstChild().getType()    ||    isSimpleOp;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
407	[BUG]  [BUGGY]  int  ancestorType  =  AnnotationUtil.getChildCount(an.getChildCount());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  AnnotationUtil.getChildCount(an.getChildCount());  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  AnnotationUtil.getChildCount(an.getChildCount());	  int    ancestorType    =    an.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
408	[BUG]  [BUGGY]  int  ancestorType  =  AnnotationUtil.getChildCount(an).getChildCount();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  AnnotationUtil.getChildCount(an).getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  AnnotationUtil.getChildCount(an).getChildCount();	  int    ancestorType    =    an.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
409	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isResultUsed;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
410	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EMPTY  ||  isResultUsed;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EMPTY  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EMPTY  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
411	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
412	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isResultUsed?  true  :  false;  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isResultUsed?  true  :  false;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isResultUsed?  true  :  false;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
413	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isResultUsed);  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isResultUsed);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  isResultUsed);	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
414	[BUG]  [BUGGY]  int  ancestorType  =  an.getfirstChild().getType();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getfirstChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getfirstChild().getType();	  int    ancestorType    =    parent.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
415	[BUG]  [BUGGY]  double  ancestorType  =  an.getType();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  double  ancestorType  =  an.getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	double  ancestorType  =  an.getType();	  float    ancestorType    =    an.getType()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
416	[BUG]  [BUGGY]  long  ancestorType  =  an.getType()  -  1;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  long  ancestorType  =  an.getType()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	long  ancestorType  =  an.getType()  -  1;	  float    ancestorType    =    an.getType()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
417	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  USELESS_CODE_ERROR;	  int    ancestorType    =    an.getType()    &    USELESS_CODE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
418	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  {  USELESS_CODE_ERROR;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  {  USELESS_CODE_ERROR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  {  USELESS_CODE_ERROR;	  int    ancestorType    =    an.getType()    &    USELESS_CODE_ERROR;    	non-compiled	[CE]  	87	None	replace
419	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FOR  ||  ancestorType  ==  Token.EXPR_RESULT;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FOR  ||  ancestorType  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FOR  ||  ancestorType  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  	14	None	replace
420	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FOR  ||  isResultUsed;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FOR  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FOR  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
421	[BUG]  [BUGGY]  int  ancestorType  =  an.getAncestorType()  *  2;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getAncestorType()  *  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getAncestorType()  *  2;	  int    ancestorType    =    an.getAncestorType();    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
422	[BUG]  [BUGGY]  Node  ancestorType  =  an.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.removeFirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.removeFirstChild();	  Node    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
423	[BUG]  [BUGGY]  Node  ancestorType  =  an.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getfirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getfirstChild();	  Node    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
424	[BUG]  [BUGGY]  Node  ancestorType  =  an.getNodeType();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getNodeType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getNodeType();	  Node    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  	58	None	replace
425	[BUG]  [BUGGY]  Node  ancestorType  =  an.next();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.next();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.next();	  Node    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  	58	None	replace
426	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  parent.getType()!=  Token.BLOCK);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  parent.getType()!=  Token.BLOCK);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  parent.getType()!=  Token.BLOCK);	  int    ancestorType    =    parent.getType()    -    1;    	non-compiled	[CE]  	1	None	replace
427	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  parent.getType()!=  Token.BLOCK;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  parent.getType()!=  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  parent.getType()!=  Token.BLOCK;	  int    ancestorType    =    parent.getType()    -    1;    	non-compiled	[CE]  	1	None	replace
428	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getNodeType();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getNodeType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getNodeType();	  Integer    ancestorType    =    an.getInitialValue();    	non-compiled	[CE]  	78	None	replace
429	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getReturnType();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getReturnType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getReturnType();	  Integer    ancestorType    =    an.getInitialValue();    	non-compiled	[CE]  	78	None	replace
430	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >>  Token.COMMA;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &&  an.getType()  >>  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &&  an.getType()  >>  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
431	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  -  1  ||  an.getType()!=  Token.COMMA;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  -  1  ||  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  -  1  ||  an.getType()!=  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
432	[BUG]  [BUGGY]  if(an.getType()!=  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT)  {  continue;  }  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()!=  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()!=  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  	34	None	replace
433	[BUG]  [BUGGY]  if(an.getType()!=  Token.FUNCTION)  {  continue;  }  [CE]  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()!=  Token.FUNCTION)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()!=  Token.FUNCTION)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  	34	None	replace
434	[BUG]  [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()!=  Token.GETPROP)  {  continue;  }  [CE]  [FE]                                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()!=  Token.GETPROP)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.FUNCTION  ||  an.getType()!=  Token.GETPROP)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  	34	None	replace
435	[BUG]  [BUGGY]  if(an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.GETPROP)  {  continue;  }  [CE]  [FE]                                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.GETPROP)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.GETPROP)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  	34	None	replace
436	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getNext();	  int    ancestorType    =    an.getFirstChild().getString();    	non-compiled	[CE]  	81	None	replace
437	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getQualifiedName();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getQualifiedName();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getQualifiedName();	  int    ancestorType    =    an.getFirstChild().getString();    	non-compiled	[CE]  	81	None	replace
438	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  isResultUsed;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  &&  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
439	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed  &&  an.getType()!=  Token.BLOCK;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed  &&  an.getType()!=  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed  &&  an.getType()!=  Token.BLOCK;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
440	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  isResultUsed;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
441	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  &&  isResultUsed;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  &&  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  &&  isResultUsed;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
442	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp  ||  protectSideEffectFreeCode;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp  ||  protectSideEffectFreeCode;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  ||  isSimpleOp  ||  protectSideEffectFreeCode;	  Integer    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	46	None	replace
443	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  ||  protectSideEffectFreeCode;	  Integer    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	46	None	replace
444	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp  ||  guardSideEffectFreeCode;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getType()  ||  isSimpleOp  ||  guardSideEffectFreeCode;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getType()  ||  isSimpleOp  ||  guardSideEffectFreeCode;	  Integer    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	46	None	replace
445	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.COMMA;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.COMMA;	  boolean    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  	8	None	replace
446	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()!=  Token.COMMA;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild().getType()!=  Token.COMMA;	  boolean    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
447	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.THIS;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.THIS;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getFirstChild().getType()  ==  Token.THIS;	  boolean    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
448	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  new  Node(Token.EMPTY));  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  new  Node(Token.EMPTY));	  n.removeChild(an);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
449	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT));  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT));  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  new  Node(Token.EXPR_RESULT));	  n.removeChild(an);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
450	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  new  Node(Token.FUNCTION));  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  new  Node(Token.FUNCTION));	  n.removeChild(an);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
451	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.ASSIGN));  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  new  Node(Token.ASSIGN));  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  new  Node(Token.ASSIGN));	  n.removeChild(an);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
452	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getOwnerDocument();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getOwnerDocument();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getOwnerDocument();	  Integer    ancestorType    =    an.getParent();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
453	[BUG]  [BUGGY]  int  ancestorType  =  an.getSimpleEffectFreeCode();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getSimpleEffectFreeCode();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getSimpleEffectFreeCode();	  int    ancestorType    =    an.getSimpleOp();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
454	[BUG]  [BUGGY]  int  ancestorType  =  an.getSimpleOperatorType();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getSimpleOperatorType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getSimpleOperatorType();	  int    ancestorType    =    an.getSimpleOp();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
455	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  1xff;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  1xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  1xff;	  int    ancestorType    =    an.getType()    &    1xff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
456	[BUG]  [BUGGY]  int  ancestorType  =  an.getNodeType();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getNodeType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getNodeType();	  int    ancestorType    =    an.getHeaderSibling();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
457	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  >>  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  >>  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  >>  Token.FUNCTION;	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
458	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  isResultUsed;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  isResultUsed;	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
459	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  [Delete]  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  [Delete]  Token.FUNCTION;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  [Delete]  Token.FUNCTION;	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
460	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  1  ||  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  1  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  1  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    -    1    ||    isSimpleOp;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
461	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  >  1  ||  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  >  1  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  >  1  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    -    1    ||    isSimpleOp;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
462	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  an.getType()  :  1;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  an.getType()  :  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  an.getType()  :  1;	  int    ancestorType    =    an.getType()    &    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
463	[BUG]  [BUGGY]  int  ancestorType  =  an.getName().restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getName().restrictByNotNullOrUndefined();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getName().restrictByNotNullOrUndefined();	  int    ancestorType    =    an.getName().getType();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
464	[BUG]  [BUGGY]  int  ancestorType  =  an.getAncestors().getType();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getAncestors().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getAncestors().getType();	  int    ancestorType    =    an.getName().getType();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
465	[BUG]  [BUGGY]  int  ancestorType  =  an.getAncestorType().getType();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getAncestorType().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getAncestorType().getType();	  int    ancestorType    =    an.getName().getType();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
466	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getType()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getFirstChild().getType()  +  1;	  Integer    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
467	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getInitialValue();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getInitialValue();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getFirstChild().getInitialValue();	  Integer    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
468	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getGrandparent().getType();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getGrandparent().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getGrandparent().getType();	  Integer    ancestorType    =    an.getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
469	[BUG]  [BUGGY]  int  ancestorType  =  an.getfirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getfirstChild().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getfirstChild().getString();	  int    ancestorType    =    an.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
470	[BUG]  [BUGGY]  if(an.getType()!=  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()!=  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()!=  Token.EXPR_RESULT)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
471	[BUG]  [BUGGY]  if(an  ==  null)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an  ==  null)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an  ==  null)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
472	[BUG]  [BUGGY]  if(an!=  null)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an!=  null)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an!=  null)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  continue;  }	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
473	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitializingChild()  -  1;  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitializingChild()  -  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitializingChild()  -  1;	  int    ancestorType    =    an.getInitializingChild();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
474	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitializingChild()  +  1;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitializingChild()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitializingChild()  +  1;	  int    ancestorType    =    an.getInitializingChild();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
475	[BUG]  [BUGGY]  int  ancestorType  =  an.getReturnType();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getReturnType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getReturnType();	  int    ancestorType    =    an.getInitializingChild();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
476	[BUG]  [BUGGY]  boolean  ancestorType  =  an.hasChildren();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.hasChildren();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.hasChildren();	  boolean    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
477	[BUG]  [BUGGY]  Node  ancestorType  =  an.getParentNode();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getParentNode();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getParentNode();	  Node    ancestorType    =    an.getNode();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
478	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getNext().getType()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getNext().getType()  +  1;	  int    ancestorType    =    an.getFirstChild().getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
479	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  -  1  ||  isResultUsed;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  -  1  ||  isResultUsed;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  -  1  ||  isResultUsed;	  int    ancestorType    =    an.getType()    ||    isResultUsed;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
480	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed  &&  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed  &&  isSimpleOp;	  int    ancestorType    =    an.getType()    ||    isResultUsed;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
481	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed,  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed,  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed,  isSimpleOp;	  int    ancestorType    =    an.getType()    ||    isResultUsed;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
482	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getAncestors();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getAncestors();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getAncestors();	  Integer    ancestorType    =    an.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
483	[BUG]  [BUGGY]  Node  ancestorType  =  an.getChildren();  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getChildren();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getChildren();	  Node    ancestorType    =    an.getAncestors();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
484	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getPrevious().getType();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getPrevious().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getPrevious().getType();	  int    ancestorType    =    an.getFirstChild().getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
485	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  ancestorType!=  Token.EXPR_RESULT;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  ancestorType!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  ancestorType!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
486	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  :  Token.EXPR_RESULT;  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  :  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  :  Token.EXPR_RESULT;	  int    ancestorType    =    parent.getType()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
487	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  }  Token.COMMA  :  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  }  Token.COMMA  :  n.getFirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  }  Token.COMMA  :  n.getFirstChild();	  int    ancestorType    =    parent.getType()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
488	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  }  -  1  :  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  }  -  1  :  n.getFirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  }  -  1  :  n.getFirstChild();	  int    ancestorType    =    parent.getType()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
489	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  <  Token.COMMA  :  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  <  Token.COMMA  :  n.getFirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed?  parent.getType()  <  Token.COMMA  :  n.getFirstChild();	  int    ancestorType    =    parent.getType()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
490	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
491	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  2;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  2;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
492	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  an.getType()  :  0;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  an.getType()  :  0;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  an.getType()  :  0;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
493	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
494	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  an.getType()  :  2;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  an.getType()  :  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT?  an.getType()  :  2;	  int    ancestorType    =    an.getType()    &    2;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
495	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.COMMA;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.COMMA;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
496	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
497	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK;	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	9	None	replace
498	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()  ==  Token.BLOCK);	  int    ancestorType    =    an.getType()    &    1;    	non-compiled	[CE]  	37	None	replace
499	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()  >=  Token.BLOCK);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()  >=  Token.BLOCK);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.EXPR_RESULT  ||  an.getType()  >=  Token.BLOCK);	  int    ancestorType    =    an.getType()    &    1;    	non-compiled	[CE]  	37	None	replace
500	[BUG]  [BUGGY]  int  ancestorType  =  an.getQualifiedName()  &  0xFFFF;  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getQualifiedName()  &  0xFFFF;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getQualifiedName()  &  0xFFFF;	  int    ancestorType    =    an.getQualifiedName();    	non-compiled	[CE]  	90	None	replace
501	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.BLOCK  ||  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.BLOCK  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.BLOCK  ||  isSimpleOp;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
502	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.ASSIGN;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.ASSIGN;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.ASSIGN;	  boolean    ancestorType    =    an.getType()    ||    isSimpleOp;    	non-compiled	[CE]  	21	None	replace
503	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.COMMA);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.COMMA);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.COMMA);	  boolean    ancestorType    =    an.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	71	None	replace
504	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  	13	None	replace
505	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed  &&  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed  &&  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed  &&  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  	13	None	replace
506	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed?  true  :  false;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed?  true  :  false;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.COMMA  ||  isResultUsed?  true  :  false;	  boolean    ancestorType    =    an.getType()    ==    Token.COMMA;    	non-compiled	[CE]  	13	None	replace
507	[BUG]  [BUGGY]  Node  ancestor  =  an.getHeaderSibling();  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.getHeaderSibling();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.getHeaderSibling();	  Node    ancestor    =    an.getParent();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
508	[BUG]  [BUGGY]  int  ancestorType  =  an.getSideEffects();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getSideEffects();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getSideEffects();	  int    ancestorType    =    an.getHeaderSideEffect();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
509	[BUG]  [BUGGY]  if(an.getType()  ==  Token.COMMA  &&  an.getFirstChild()  ==  n)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLO  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.COMMA  &&  an.getFirstChild()  ==  n)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLO  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.COMMA  &&  an.getFirstChild()  ==  n)  {  if(ancestorType!=  Token.COMMA)  continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLO	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)continue;    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
510	[BUG]  [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.COMMA)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.COMMA)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.COMMA)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
511	[BUG]  [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.SEMI)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.SEMI)  {  continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.SEMI)  {  continue;  }	  if(an.getType()    ==    Token.FUNCTION)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
512	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getLastChild().getType();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getFirstChild().getLastChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getFirstChild().getLastChild().getType();	  Integer    ancestorType    =    an.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
513	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  an.getType()!=  Token.COMMA;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  an.getType()!=  Token.COMMA;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
514	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  an.getType()!=  Token.BLOCK;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
515	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  isResultUsed  &&  an.getType()!=  Token.BLOCK;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  isResultUsed  &&  an.getType()!=  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  isResultUsed  &&  an.getType()!=  Token.BLOCK;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
516	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  isResultUsed  &&  an.getType()!=  Token.COMMA;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  isResultUsed  &&  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  isResultUsed  &&  an.getType()!=  Token.COMMA;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
517	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  an.getType()!=  Token.GETPROP;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  an.getType()!=  Token.GETPROP;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.EXPR_RESULT  ||  an.getType()!=  Token.GETPROP;	  boolean    ancestorType    =    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
518	[BUG]  [BUGGY]  float  ancestorType  =  an.getFirstChild().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  float  ancestorType  =  an.getFirstChild().getType()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	float  ancestorType  =  an.getFirstChild().getType()  +  1;	  int    ancestorType    =    an.getFirstChild().getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
519	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  1xff;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  1xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  1xff;	  int    ancestorType    =    an.getType()    &    1xff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
520	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  1xff  ||  isSimpleOp;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  1xff  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  1xff  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    &    1xff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
521	[BUG]  [BUGGY]  int  ancestorType  =  an.getPrevious().getChildCount();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getPrevious().getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getPrevious().getChildCount();	  int    ancestorType    =    an.getPrevious().getType();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
522	[BUG]  [BUGGY]  int  ancestorType  =  an.getName().lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getName().lastIndexOf('.');  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getName().lastIndexOf('.');	  int    ancestorType    =    an.getName().getType();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
523	[BUG]  [BUGGY]  int  ancestorType  =  an.getName().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getName().getQualifiedName();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getName().getQualifiedName();	  int    ancestorType    =    an.getName().getType();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
524	[BUG]  [BUGGY]  int  ancestorType  =  an.getName().lastIndexOf('.')+  1;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getName().lastIndexOf('.')+  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getName().lastIndexOf('.')+  1;	  int    ancestorType    =    an.getName().getType();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
525	[BUG]  [BUGGY]  Enum.getInteger  ancestorType  =  an.getType();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Enum.getInteger  ancestorType  =  an.getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Enum.getInteger  ancestorType  =  an.getType();	  Integer    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
526	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getLeastSupertype(n);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getLeastSupertype(n);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getLeastSupertype(n);	  Integer    ancestorType    =    an.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
527	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.NAME;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.NAME;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.NAME;	  boolean    ancestorType    =    an.getType()    miere    miere    miere;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
528	[BUG]  [BUGGY]  static  final  float  ancestorType  =  an.getType()  +  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  static  final  float  ancestorType  =  an.getType()  +  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	static  final  float  ancestorType  =  an.getType()  +  1;	  float    ancestorType    =    an.getType()    +    1;    	non-compiled	[CE]  	64	None	replace
529	[BUG]  [BUGGY]  int  ancestorType  =  an.getFirstChild().getLastChild().getType();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getFirstChild().getLastChild().getType();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getFirstChild().getLastChild().getType();	  int    ancestorType    =    an.getFirstChild().getParent().getType();    	non-compiled	[CE]  	62	None	replace
530	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  origNumber()  ||  isSimpleOp;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  origNumber()  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  origNumber()  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    -    1    ||    isSimpleOp;    	non-compiled	[CE]  	67	None	replace
531	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA  ||  isSimpleOp;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.COMMA  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    -    1    ||    isSimpleOp;    	non-compiled	[CE]  	67	None	replace
532	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  [0];  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  [0];  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSideEffects()  [0];	  int    ancestorType    =    an.getHeaderSideEffects();    	non-compiled	[CE]  	95	None	replace
533	[BUG]  [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  >  1;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getHeaderSideEffects()  >  1;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getHeaderSideEffects()  >  1;	  int    ancestorType    =    an.getHeaderSideEffects();    	non-compiled	[CE]  	95	None	replace
534	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()!=  Token.COMMA;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  an.getType()!=  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
535	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA  ||  an.getType()!=  Token.COMMA;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA  ||  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.COMMA  ||  an.getType()!=  Token.COMMA;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	84	None	replace
536	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.COMMA;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.COMMA;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	15	None	replace
537	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()!=  Token.COMMA;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()!=  Token.COMMA;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	15	None	replace
538	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.BLOCK;  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.BLOCK;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.BLOCK;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	15	None	replace
539	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.VAR;  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.VAR;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.EMPTY  ||  an.getType()  ==  Token.VAR;	  boolean    ancestorType    =    an.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	15	None	replace
540	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.COMMA;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.COMMA;	  boolean    ancestorType    =    an.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	11	None	replace
541	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT);	  boolean    ancestorType    =    an.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	11	None	replace
542	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.CATCH;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.CATCH;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FUNCTION  ||  an.getType()  ==  Token.CATCH;	  boolean    ancestorType    =    an.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	11	None	replace
543	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.COMMA);	  boolean    ancestorType    =    an.getType()    -    1;    	non-compiled	[CE]  	2	None	replace
544	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  	14	None	replace
545	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  	14	None	replace
546	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()  ==  Token.COMMA;  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()  ==  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()  ==  Token.COMMA;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  	14	None	replace
547	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()!=  Token.COMMA;  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  an.getType()!=  Token.COMMA;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  	14	None	replace
548	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  isResultUsed  &&  an.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  isResultUsed  &&  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.FOR  ||  isResultUsed  &&  an.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.FOR;    	non-compiled	[CE]  	14	None	replace
549	[BUG]  [BUGGY]  Integer  ancestorType  =  an.removeFirstChild();  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.removeFirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.removeFirstChild();	  Integer    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  	24	None	replace
550	[BUG]  [BUGGY]  int  ancestorType  =  an.getImmediateParentNode().getString();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getImmediateParentNode().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getImmediateParentNode().getString();	  int    ancestorType    =    an.getLastChild().getString();    	non-compiled	[CE]  	27	None	replace
551	[BUG]  [BUGGY]  int  ancestorType  =  an.getQualifiedName().getString();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getQualifiedName().getString();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getQualifiedName().getString();	  int    ancestorType    =    an.getLastChild().getString();    	non-compiled	[CE]  	27	None	replace
552	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
553	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
554	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.COMMA;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.COMMA;	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
555	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FUNCTION);	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
556	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.FUNCTION  ||  an.getType()  ==  Token.EXPR_RESULT);	  boolean    ancestorType    =    an.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
557	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CATCH;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CATCH;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CATCH;	  boolean    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  	26	None	replace
558	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  level  >  USELESS_CODE_ERROR  ||  isSimpleOp;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  level  >  USELESS_CODE_ERROR  ||  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  level  >  USELESS_CODE_ERROR  ||  isSimpleOp;	  int    ancestorType    =    an.getType()    ||    isSimpleOp    ||    level;    	non-compiled	[CE]  	19	None	replace
559	[BUG]  [BUGGY]  int  ancestorType  =  an.getAncestorCount();  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getAncestorCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getAncestorCount();	  int    ancestorType    =    an.getNext();    	non-compiled	[CE]  	54	None	replace
560	[BUG]  [BUGGY]  int  ancestorType  =  an.getParent().getFirstChild();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getParent().getFirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getParent().getFirstChild();	  int    ancestorType    =    an.getParent().getChildCount();    	non-compiled	[CE]  	99	None	replace
561	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  &  1xc;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  &  1xc;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  &  1xc;	  int    ancestorType    =    an.getType()    &    1xf;    	non-compiled	[CE]  	89	None	replace
562	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  1xf;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  1xf;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  1xf;	  int    ancestorType    =    an.getType()    &    1xf;    	non-compiled	[CE]  	89	None	replace
563	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  0xff;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  0xff;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  0xff;	  int    ancestorType    =    an.getType()    +    0xff;    	non-compiled	[CE]  	74	None	replace
564	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getHeaderSibling();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getHeaderSibling();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getHeaderSibling();	  Integer    ancestorType    =    an.getParent();    	non-compiled	[CE]  	50	None	replace
565	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getAncestor(0);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getAncestor(0);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getAncestor(0);	  Integer    ancestorType    =    an.getParent();    	non-compiled	[CE]  	50	None	replace
566	[BUG]  [BUGGY]  Integer  ancestorType  =  an.getChildCount()  -  2;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Integer  ancestorType  =  an.getChildCount()  -  2;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Integer  ancestorType  =  an.getChildCount()  -  2;	  Integer    ancestorType    =    an.getChildCount();    	non-compiled	[CE]  	48	None	replace
567	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  an.getType()!=  Token.EXPR_RESULT);	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	85	None	replace
568	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  0xff,  isSimpleOp;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  0xff,  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  0xff,  isSimpleOp;	  int    ancestorType    =    an.getType()    &    0xff,    isSimpleOp;    	non-compiled	[CE]  	75	None	replace
569	[BUG]  [BUGGY]  Node  ancestor  =  an.cloneTree();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestor  =  an.cloneTree();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestor  =  an.cloneTree();	  Node    ancestor    =    an.getFirstChild();    	non-compiled	[CE]  	29	None	replace
570	[BUG]  [BUGGY]  Node  ancestorType  =  an.getHeaderSibling();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.getHeaderSibling();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.getHeaderSibling();	  Node    ancestorType    =    an.getParent();    	non-compiled	[CE]  	30	None	replace
571	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
572	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
573	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()!=  Token.COMMA;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()!=  Token.COMMA;	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
574	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()!=  Token.EXPR_RESULT);	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
575	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.BLOCK  ||  an.getType()  ==  Token.EXPR_RESULT);	  boolean    ancestorType    =    an.getType()!=    Token.BLOCK;    	non-compiled	[CE]  	79	None	replace
576	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
577	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()  ==  Token.COMMA;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()  ==  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()  ==  Token.COMMA;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
578	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
579	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()!=  Token.COMMA;  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()!=  Token.COMMA;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()  ==  Token.CALL  ||  an.getType()!=  Token.COMMA;	  boolean    ancestorType    =    an.getType()    ==    Token.CALL;    	non-compiled	[CE]  	73	None	replace
580	[BUG]  [BUGGY]  int  ancestorType  =  an.getInitializingChildren();  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getInitializingChildren();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getInitializingChildren();	  int    ancestorType    =    an.getInitializingChild();    	non-compiled	[CE]  	56	None	replace
581	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()!=  Token.EXPR_RESULT;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  +  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  +  an.getType()!=  Token.EXPR_RESULT;	  int    ancestorType    =    an.getType()    ||    an.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
582	[BUG]  [BUGGY]  Node  ancestorType  =  an.cloneTree();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  Node  ancestorType  =  an.cloneTree();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	Node  ancestorType  =  an.cloneTree();	  Node    ancestorType    =    an.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
583	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.getFirstChild()));  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.getFirstChild()));	  n.removeChild(an);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
584	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.NAME,  an.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  new  Node(Token.NAME,  an.getFirstChild()));  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  new  Node(Token.NAME,  an.getFirstChild()));	  n.removeChild(an);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
585	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.cloneTree()));  [CE]  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.cloneTree()));  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.cloneTree()));	  n.removeChild(an);    	non-compiled	[CE]  	33	None	replace
586	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.getLastChild()));  [CE]  [FE]                                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.getLastChild()));  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.getLastChild()));	  n.removeChild(an);    	non-compiled	[CE]  	33	None	replace
587	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.getType()));  [CE]  [FE]                                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.getType()));  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  an.getType()));	  n.removeChild(an);    	non-compiled	[CE]  	33	None	replace
588	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	72	None	replace
589	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  isResultUsed  &&  an.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  isResultUsed  &&  an.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  isResultUsed  &&  an.getType()  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	72	None	replace
590	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT;  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	72	None	replace
591	[BUG]  [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  an.getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  an.getType()!=  Token.EXPR_RESULT;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	boolean  ancestorType  =  an.getType()!=  Token.COMMA  ||  an.getType()!=  Token.EXPR_RESULT;	  boolean    ancestorType    =    an.getType()!=    Token.COMMA;    	non-compiled	[CE]  	72	None	replace
592	[BUG]  [BUGGY]  float  ancestorType  =  an.getChildCount();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  float  ancestorType  =  an.getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	float  ancestorType  =  an.getChildCount();	  int    ancestorType    =    an.getChildCount()    -    2;    	non-compiled	[CE]  	45	None	replace
593	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA  &&  isSimpleOp;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.COMMA  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.COMMA  &&  isSimpleOp;	  int    ancestorType    =    an.getType()    &&    isSimpleOp;    	non-compiled	[CE]  	16	None	replace
594	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  }  &&  isSimpleOp;  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  }  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  }  &&  isSimpleOp;	  int    ancestorType    =    an.getType()    &&    isSimpleOp;    	non-compiled	[CE]  	16	None	replace
595	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  <  Token.CALL  &&  isSimpleOp;  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  <  Token.CALL  &&  isSimpleOp;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  <  Token.CALL  &&  isSimpleOp;	  int    ancestorType    =    an.getType()    &&    isSimpleOp;    	non-compiled	[CE]  	16	None	replace
596	[BUG]  [BUGGY]  if(an.getType()  ==  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)    continue;    }    	non-compiled	[CE]  	92	None	replace
597	[BUG]  [BUGGY]  if(an.getType()  ==  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  }	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)    continue;    }    	non-compiled	[CE]  	92	None	replace
598	[BUG]  [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.EXPR_RESULT  ||  an.getType()  ==  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)continue;	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)    continue;    }    	non-compiled	[CE]  	92	None	replace
599	[BUG]  [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT  &&  an.getFirstChild()  ==  n)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT  &&  an.getFirstChild()  ==  n)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	if(an.getType()  ==  Token.EXPR_RESULT  &&  an.getFirstChild()  ==  n)  {  if(ancestorType!=  Token.COMMA)continue;  if(ancestorType!=  Token.EXPR_RESULT  &&	  if(an.getType()    ==    Token.EXPR_RESULT)    {    if(ancestorType!=    Token.COMMA)    continue;    if(ancestorType!=    Token.EXPR_RESULT    &&    ancestorType!=    Token.BLOCK)    continue;    }    	non-compiled	[CE]  	92	None	replace
600	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  0  :  an.getFirstChild();  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  0  :  an.getFirstChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed?  0  :  an.getFirstChild();	  int    ancestorType    =    an.getType()    ||    isResultUsed?    0    :    an.getType();    	non-compiled	[CE]  	82	None	replace
601	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  0  :  an.getChildCount();  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  0  :  an.getChildCount();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed?  0  :  an.getChildCount();	  int    ancestorType    =    an.getType()    ||    isResultUsed?    0    :    an.getType();    	non-compiled	[CE]  	82	None	replace
602	[BUG]  [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  0  :  an.getLastChild();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {      [BUGGY]  int  ancestorType  =  an.getType()  ||  isResultUsed?  0  :  an.getLastChild();  [BUGGY]      if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	int  ancestorType  =  an.getType()  ||  isResultUsed?  0  :  an.getLastChild();	  int    ancestorType    =    an.getType()    ||    isResultUsed?    0    :    an.getType();    	non-compiled	[CE]  	82	None	replace
