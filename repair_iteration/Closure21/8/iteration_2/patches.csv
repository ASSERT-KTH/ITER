bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  level  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  level  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  level  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
2	[BUG]  [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  isSimpleOp  ==  Token.BLOCK)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  isSimpleOp  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  isSimpleOp  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
3	[BUG]  [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  isSimpleOp  ==  Token.BLOCK)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  isSimpleOp  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  isSimpleOp  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
4	[BUG]  [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  isSimpleOp!=  Token.BLOCK)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  isSimpleOp!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  isSimpleOp!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
5	[BUG]  [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
6	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.BLOCK)  {  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
7	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	51	None	replace
8	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	51	None	replace
9	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	51	None	replace
10	[BUG]  [BUGGY]  if(isResultUsed  &&!isSimpleOp)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&!isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&!isSimpleOp)  {	  if(isSimpleOp    &&!isResultUsed)    {    	non-compiled	[CE]  	40	None	replace
11	[BUG]  [BUGGY]  if(isSimpleOp  &&!protectSideEffectFreeCode)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&!protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&!protectSideEffectFreeCode)  {	  if(isSimpleOp    &&!isResultUsed)    {    	non-compiled	[CE]  	40	None	replace
12	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&!isResultUsed)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&!isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&!isResultUsed)  {	  if(isSimpleOp    &&!isResultUsed)    {    	non-compiled	[CE]  	40	None	replace
13	[BUG]  [BUGGY]  if(isResultUsed  ||!isSimpleOp)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||!isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||!isSimpleOp)  {	  if(isSimpleOp    ||!isResultUsed)    {    	non-compiled	[CE]  	39	None	replace
14	[BUG]  [BUGGY]  if(isSimpleOp  ||!protectSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||!protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||!protectSideEffectFreeCode)  {	  if(isSimpleOp    ||!isResultUsed)    {    	non-compiled	[CE]  	39	None	replace
15	[BUG]  [BUGGY]  if(isSimpleOp  ||  protectSideEffectFreeCode)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  protectSideEffectFreeCode)  {	  if(isSimpleOp    ||!isResultUsed)    {    	non-compiled	[CE]  	39	None	replace
16	[BUG]  [BUGGY]  if(isSimpleOp  ||  isProteEffectFreeCode)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isProteEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isProteEffectFreeCode)  {	  if(isSimpleOp    ||!isResultUsed)    {    	non-compiled	[CE]  	39	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  &&  isSimpleOp);  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  &&  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  &&  isSimpleOp);	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulPreconditions.checkState(isResultUsed  ||  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulPreconditions.checkState(isResultUsed  ||  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulPreconditions.checkState(isResultUsed  ||	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulPreconditions.checkState(isResultUsed  &  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulPreconditions.checkState(isResultUsed  &  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulPreconditions.checkState(isResultUsed  &	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulConditions.checkState(isResultUsed  |  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulConditions.checkState(isResultUsed  |  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulConditions.checkState(isResultUsed  |	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulDocUtil.checkState(isResultUsed  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulDocUtil.checkState(isResultUsed  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulDocUtil.checkState(isResultUsed	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulToken.checkState(isResultUsed  ||  is  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulToken.checkState(isResultUsed  ||  is  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulToken.checkState(isResultUsed  ||  is	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulConditional.checkState(isResultUsed  ||  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulConditional.checkState(isResultUsed  ||  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  levelSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulConditional.checkState(isResultUsed  ||	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
24	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getType()!=  Token.BLOCK)  {	  if(isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	29	None	replace
25	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()  ==  Token.BLOCK)  {	  if(isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	29	None	replace
26	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getFirstChild()  ==  n)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getFirstChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
27	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
28	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getLastChild()  ==  n)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getLastChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getLastChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
29	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getFirstChild()!=  n)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getFirstChild()!=  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getFirstChild()!=  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
30	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed  ||  parent.getFirstChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
31	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getFirstChild()!=  n)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getFirstChild()!=  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  parent.getFirstChild()!=  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
32	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getJSDocInfo()  ==  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getJSDocInfo()  ==  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getJSDocInfo()  ==  null)  {	  if(isSimpleOp    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	24	None	replace
33	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getFirstChild()!=  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getFirstChild()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getFirstChild()!=  null)  {	  if(isSimpleOp    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	24	None	replace
34	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.COMMA)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()  ==  Token.COMMA)  {	  if(isSimpleOp    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	24	None	replace
35	[BUG]  [BUGGY]  if(!isResultUsed  ||  parent.getJSDocInfo()  ==  null)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  parent.getJSDocInfo()  ==  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  parent.getJSDocInfo()  ==  null)  {	  if(!isResultUsed    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	67	None	replace
36	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()  ==  null)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()  ==  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getFirstChild()  ==  null)  {	  if(isResultUsed    &&    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	42	None	replace
37	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getLastChild()!=  null)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getLastChild()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getLastChild()!=  null)  {	  if(isResultUsed    &&    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	42	None	replace
38	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  isSimpleOp)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  isSimpleOp)  {	  if(isResultUsed    &&    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	42	None	replace
39	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getFirstChild()!=  null)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getFirstChild()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getFirstChild()!=  null)  {	  if(isResultUsed    &&    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	42	None	replace
40	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  ||  isSimpleOp)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getFirstChild()!=  null  ||  isSimpleOp)  {	  if(isResultUsed    &&    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	42	None	replace
41	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	52	None	replace
42	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	52	None	replace
43	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()  ==  null)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()  ==  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()  ==  null)  {	  if(isResultUsed    &&    isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	52	None	replace
44	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	52	None	replace
45	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  n.getJSDocInfo()!=  null)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  n.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	52	None	replace
46	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()!=  Token.BLOCK)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	31	None	replace
47	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	31	None	replace
48	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed.getType()!=  Token.BLOCK)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	31	None	replace
49	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	31	None	replace
50	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()  ==  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  ==  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
51	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(n.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(n.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
52	[BUG]  [BUGGY]  if(parent.getType()!=  Token.BLOCK  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()!=  Token.BLOCK  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.BLOCK  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
53	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
54	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
55	[BUG]  [BUGGY]  if(parent.getType()  >=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()  >=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  >=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
56	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode)  {	  if(!isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	46	None	replace
57	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT)  {	  if(!isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	46	None	replace
58	[BUG]  [BUGGY]  n.removeChild(parent.getFirstChild());  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.removeChild(parent.getFirstChild());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.removeChild(parent.getFirstChild());	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
59	[BUG]  [BUGGY]  n.removeChild(n);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.removeChild(n);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.removeChild(n);	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
60	[BUG]  [BUGGY]  n.removeChild(parent.getLastChild());  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.removeChild(parent.getLastChild());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.removeChild(parent.getLastChild());	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
61	[BUG]  [BUGGY]  n.removeChild(parent.getString());  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.removeChild(parent.getString());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.removeChild(parent.getString());	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
62	[BUG]  [BUGGY]  n.replaceChild(n,  level);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.replaceChild(n,  level);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.replaceChild(n,  level);	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
63	[BUG]  [BUGGY]  n.removeChild(an);  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.removeChild(an);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.removeChild(an);	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
64	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  &&  level!=  USELESS_CODE_ERROR)  {	  if(!isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {	  if(!isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
66	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(!isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  level,  isSimpleOp);  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  level,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  parent,  level,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isResultUsed);  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isResultUsed);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isResultUsed);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  level,  isSimpleOp);  [CE]  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  level,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  level,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  isResultUsed,  isSimpleOp);  [CE]  [FE]                                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  isResultUsed,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  isResultUsed,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  IS_RESULT_ERROR,  isSimpleOp);  [CE]  [FE]                                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  IS_RESULT_ERROR,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  IS_RESULT_ERROR,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
73	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  isResultUsed)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  isResultUsed)  {	  if(isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	20	None	replace
74	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()  ==  null)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()  ==  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getJSDocInfo()  ==  null)  {	  if(isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	20	None	replace
75	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  guardSideEffectFreeCode)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  guardSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  guardSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp    &&    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	54	None	replace
76	[BUG]  [BUGGY]  if(isResultUsed  &&  guardSideEffectFreeCode  &&  isSimpleOp)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  guardSideEffectFreeCode  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  guardSideEffectFreeCode  &&  isSimpleOp)  {	  if(isResultUsed    &&    isSimpleOp    &&    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	54	None	replace
77	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp    &&    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	54	None	replace
78	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    &&    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	54	None	replace
79	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    &&    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	54	None	replace
80	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.getNext();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	9	None	replace
81	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.getLastChild();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	9	None	replace
82	[BUG]  [BUGGY]  Node  n  =  node.getParent();  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  node.getParent();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  node.getParent();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	9	None	replace
83	[BUG]  [BUGGY]  Node  n  =  parent.getPrevious();  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.getPrevious();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.getPrevious();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	9	None	replace
84	[BUG]  [BUGGY]  Node  n  =  an.getParent();  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  an.getParent();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  an.getParent();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	9	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  isResultUsed);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  isResultUsed);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  isResultUsed);	  NodeTraversal.traverse(compiler,    n,    level);    	non-compiled	[CE]  	7	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  parent);	  NodeTraversal.traverse(compiler,    n,    level);    	non-compiled	[CE]  	7	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  level);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  level);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  parent,  level);	  NodeTraversal.traverse(compiler,    n,    level);    	non-compiled	[CE]  	7	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  PROTECTOR_FN);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  PROTECTOR_FN);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  PROTECTOR_FN);	  NodeTraversal.traverse(compiler,    n,    level);    	non-compiled	[CE]  	7	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  level);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  level);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  level);	  NodeTraversal.traverse(compiler,    n,    level);    	non-compiled	[CE]  	7	None	replace
90	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  isSimpleOp)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  isSimpleOp)  {	  if(!isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	41	None	replace
91	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()  ==  null)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()  ==  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getJSDocInfo()  ==  null)  {	  if(!isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	41	None	replace
92	[BUG]  [BUGGY]  if(isSimpleOp  &&  n.getJSDocInfo()!=  null)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  n.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	19	None	replace
93	[BUG]  [BUGGY]  Node  an  =  parent.getFirstChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  parent.getFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  parent.getFirstChild();	  Node    an    =    n.getFirstChild();    	non-compiled	[CE]  	68	None	replace
94	[BUG]  [BUGGY]  Node  an  =  n.getLastChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  n.getLastChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  n.getLastChild();	  Node    an    =    n.getFirstChild();    	non-compiled	[CE]  	68	None	replace
95	[BUG]  [BUGGY]  Node  an  =  n.getAncestors();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  n.getAncestors();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  n.getAncestors();	  Node    an    =    n.getFirstChild();    	non-compiled	[CE]  	68	None	replace
96	[BUG]  [BUGGY]  Node  an  =  parent.getLastChild();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  parent.getLastChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  parent.getLastChild();	  Node    an    =    n.getFirstChild();    	non-compiled	[CE]  	68	None	replace
97	[BUG]  [BUGGY]  Node  an  =  node.getFirstChild();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  node.getFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  node.getFirstChild();	  Node    an    =    n.getFirstChild();    	non-compiled	[CE]  	68	None	replace
98	[BUG]  [BUGGY]  Node  an  =  n.getNext();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  n.getNext();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  n.getNext();	  Node    an    =    n.getFirstChild();    	non-compiled	[CE]  	68	None	replace
99	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	45	None	replace
100	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	45	None	replace
101	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	45	None	replace
102	[BUG]  [BUGGY]  if(!isSimpleOp  &&  isResultUsed)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isSimpleOp  &&  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isSimpleOp  &&  isResultUsed)  {	  if(isSimpleOp    &&    isResultUsed)    {    	non-compiled	[CE]  	36	None	replace
103	[BUG]  [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  isResultUsed  ||  level!=  USELESS_CODE_ERROR)  {	  if(isSimpleOp    &&    isResultUsed)    {    	non-compiled	[CE]  	36	None	replace
104	[BUG]  [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  protectSideEffectFreeCode)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  isResultUsed  ||  protectSideEffectFreeCode)  {	  if(isSimpleOp    &&    isResultUsed)    {    	non-compiled	[CE]  	36	None	replace
105	[BUG]  [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  isResultUsed  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isSimpleOp    &&    isResultUsed)    {    	non-compiled	[CE]  	36	None	replace
106	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    &&    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	27	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  parent);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  parent);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  parent);	  NodeTraversal.traverse(compiler,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	10	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  level,  USELESS_CODE_ERROR);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  level,  USELESS_CODE_ERROR);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  parent,  level,  USELESS_CODE_ERROR);	  NodeTraversal.traverse(compiler,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	10	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  IS_RESULT_ERROR);  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  IS_RESULT_ERROR);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  IS_RESULT_ERROR);	  NodeTraversal.traverse(compiler,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	10	None	replace
110	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  parent  =  n.getLastChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  parent  =  n.getLastChild();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
111	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  parent  =  n.getFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  parent  =  n.getFirstChild();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
112	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  parent  =  n.getNext();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
113	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  parent  =  n.getParentNode();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  parent  =  n.getParentNode();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
114	[BUG]  [BUGGY]  Node  parent  =  n.getPrevious();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  parent  =  n.getPrevious();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  parent  =  n.getPrevious();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
115	[BUG]  [BUGGY]  Node  parent  =  n.getAncestor();  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  parent  =  n.getAncestor();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  parent  =  n.getAncestor();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
116	[BUG]  [BUGGY]  if(!isResultUsed  &&!isSimpleOp)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&!isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&!isSimpleOp)  {	  if(!isSimpleOp)    {    	non-compiled	[CE]  	38	None	replace
117	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  protectionSideEffectFreeCode)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  protectionSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  protectionSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectionSideEffectFreeCode)    {    	non-compiled	[CE]  	43	None	replace
118	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectionSideEffectFreeCode)    {    	non-compiled	[CE]  	43	None	replace
119	[BUG]  [BUGGY]  if(protected  ||  isResultUsed  ||  isSimpleOp  ||  isSimpleOp)  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(protected  ||  isResultUsed  ||  isSimpleOp  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(protected  ||  isResultUsed  ||  isSimpleOp  ||  isSimpleOp)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectionSideEffectFreeCode)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
120	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode  ||  level)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode  ||  level)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode  ||  level)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectionSideEffectFreeCode)    {    	non-compiled	[CE]  	43	None	replace
121	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||  isResultUsed)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  ==  Token.FUNCTION  ||  isResultUsed)  {	  if(parent.getType()    ==    Token.FUNCTION    ||    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
122	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.FUNCTION    ||    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
123	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  &&  isSimpleOp)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  ==  Token.FUNCTION  &&  isSimpleOp)  {	  if(parent.getType()    ==    Token.FUNCTION    ||    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
124	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.FUNCTION    ||    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
125	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(parent.getType()    ==    Token.FUNCTION    ||    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
126	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  ||  isSimpleOp)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getJSDocInfo()!=  null  ||  isSimpleOp)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    ||    isSimpleOp)    {    	non-compiled	[CE]  	22	None	replace
127	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()  ==  null  ||  isSimpleOp)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()  ==  null  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()  ==  null  ||  isSimpleOp)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    ||    isSimpleOp)    {    	non-compiled	[CE]  	22	None	replace
128	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  ||  isResultUsed)  {  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  ||  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  ||  isResultUsed)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    ||    isSimpleOp)    {    	non-compiled	[CE]  	22	None	replace
129	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()  ==  null  &&  isSimpleOp)  {  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()  ==  null  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()  ==  null  &&  isSimpleOp)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    ||    isSimpleOp)    {    	non-compiled	[CE]  	22	None	replace
130	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(n.getJSDocInfo()))  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(n.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(n.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
131	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
132	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
133	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
134	[BUG]  [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  n.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
135	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.COMMA)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getType()  ==  Token.COMMA)  {	  if(isResultUsed    ||    parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	55	None	replace
136	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.COMMA  ||  isSimpleOp)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.COMMA  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  ==  Token.COMMA  ||  isSimpleOp)  {	  if(isResultUsed    ||    parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	55	None	replace
137	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	55	None	replace
138	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(n.getJSDocInfo()))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(n.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(n.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isSimpleOp(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	66	None	replace
139	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isSimpleOp(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	66	None	replace
140	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isSimpleOp(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	66	None	replace
141	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isSimpleOp(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	66	None	replace
142	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isSimpleOp(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	66	None	replace
143	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isSimpleOp(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	66	None	replace
144	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	14	None	replace
145	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	14	None	replace
146	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	14	None	replace
147	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	14	None	replace
148	[BUG]  [BUGGY]  if(parentUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parentUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parentUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	14	None	replace
149	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	14	None	replace
150	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	15	None	replace
151	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.FUNCTION)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	15	None	replace
152	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	15	None	replace
153	[BUG]  [BUGGY]  if(parentUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parentUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parentUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	15	None	replace
154	[BUG]  [BUGGY]  if(isResultUsed  &&  protectSideEffectFreeCode)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  protectSideEffectFreeCode)  {	  if(isResultUsed    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	47	None	replace
155	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	47	None	replace
156	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	47	None	replace
157	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  isSimpleOp)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode  ||  isSimpleOp)  {	  if(isResultUsed    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	47	None	replace
158	[BUG]  [BUGGY]  if(!isResultUsed  &&  protectSideEffectFreeCode)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  protectSideEffectFreeCode)  {	  if(isResultUsed    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	47	None	replace
159	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.setJSDocInfo(isResultUsed);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.setJSDocInfo(isResultUsed);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  	8	None	replace
160	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  ||  isSimpleOp);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.setJSDocInfo(isResultUsed  ||  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.setJSDocInfo(isResultUsed  ||  isSimpleOp);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  	8	None	replace
161	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed,  isSimpleOp);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.setJSDocInfo(isResultUsed,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.setJSDocInfo(isResultUsed,  isSimpleOp);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  	8	None	replace
162	[BUG]  [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  parent.getJSDocInfo().isQualifiedName());  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  parent.getJSDocInfo().isQualifiedName());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.setJSDocInfo(isSimpleOp  ||  parent.getJSDocInfo().isQualifiedName());	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  	8	None	replace
163	[BUG]  [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  isResultUsed);  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  isResultUsed);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.setJSDocInfo(isSimpleOp  ||  isResultUsed);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  	8	None	replace
164	[BUG]  [BUGGY]  n  =  parent.getLastChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n  =  parent.getLastChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  parent.getLastChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	57	None	replace
165	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n  =  n.getFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  n.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	57	None	replace
166	[BUG]  [BUGGY]  n  =  n.getLastChild();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n  =  n.getLastChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  n.getLastChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	57	None	replace
167	[BUG]  [BUGGY]  n  =  parent.getNext();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n  =  parent.getNext();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  parent.getNext();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	57	None	replace
168	[BUG]  [BUGGY]  n  =  node.getFirstChild();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n  =  node.getFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  node.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	57	None	replace
169	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.BLOCK  ||  isSimpleOp)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.BLOCK  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  ==  Token.BLOCK  ||  isSimpleOp)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK    ||    isSimpleOp)    {    	non-compiled	[CE]  	62	None	replace
170	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK    ||    isSimpleOp)    {    	non-compiled	[CE]  	62	None	replace
171	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK    ||    isSimpleOp)    {    	non-compiled	[CE]  	62	None	replace
172	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.BLOCK  ||  isResultUsed)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.BLOCK  ||  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()!=  Token.BLOCK  ||  isResultUsed)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK    ||    isSimpleOp)    {    	non-compiled	[CE]  	62	None	replace
173	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  >=  Token.BLOCK  ||  isSimpleOp)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()  >=  Token.BLOCK  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  >=  Token.BLOCK  ||  isSimpleOp)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK    ||    isSimpleOp)    {    	non-compiled	[CE]  	62	None	replace
174	[BUG]  [BUGGY]  Node  an  =  n.getParent();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  n.getParent();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  n.getParent();	  Node    an    =    parent.getParent();    	non-compiled	[CE]  	69	None	replace
175	[BUG]  [BUGGY]  Node  an  =  parent.getNext();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  parent.getNext();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  parent.getNext();	  Node    an    =    parent.getParent();    	non-compiled	[CE]  	69	None	replace
176	[BUG]  [BUGGY]  Node  an  =  parent.getAncestors();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  parent.getAncestors();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  parent.getAncestors();	  Node    an    =    parent.getParent();    	non-compiled	[CE]  	69	None	replace
177	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  	28	None	replace
178	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getType()!=  Token.COMMA)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getType()!=  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getType()!=  Token.COMMA)  {	  if(isResultUsed    ||    parent.getType()!=    Token.COMMA)    {    	non-compiled	[CE]  	61	None	replace
179	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.COMMA)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()!=  Token.COMMA)  {	  if(isResultUsed    ||    parent.getType()!=    Token.COMMA)    {    	non-compiled	[CE]  	61	None	replace
180	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getType()!=  Token.COMMA)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  parent.getType()!=  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getType()!=  Token.COMMA)  {	  if(isResultUsed    ||    parent.getType()!=    Token.COMMA)    {    	non-compiled	[CE]  	61	None	replace
181	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  level)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  level)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  level)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	12	None	replace
182	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  level  <  USELESS_CODE_ERROR)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  level  <  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  level  <  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	12	None	replace
183	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	12	None	replace
184	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	12	None	replace
185	[BUG]  [BUGGY]  if(isResultUsed  ||  guardSideEffectFreeCode)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  guardSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  guardSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	53	None	replace
186	[BUG]  [BUGGY]  if(isResultUsed  &&  guardSideEffectFreeCode  ||  isSimpleOp)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  guardSideEffectFreeCode  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  guardSideEffectFreeCode  ||  isSimpleOp)  {	  if(isResultUsed    &&    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	53	None	replace
187	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  guardSideEffectFreeCode)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  guardSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  ||  guardSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	53	None	replace
188	[BUG]  [BUGGY]  if(protectSideEffectFreeCode  &&  isResultUsed  ||  isSimpleOp)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(protectSideEffectFreeCode  &&  isResultUsed  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(protectSideEffectFreeCode  &&  isResultUsed  ||  isSimpleOp)  {	  if(isResultUsed    &&    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	53	None	replace
189	[BUG]  [BUGGY]  if(isResultUsed  ||  guardSideEffectFreeCode  ||  isSimpleOp)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  guardSideEffectFreeCode  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  guardSideEffectFreeCode  ||  isSimpleOp)  {	  if(isResultUsed    &&    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	53	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  StripProtection());  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  StripProtection());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  StripProtection());	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  new  StripProtection());  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  new  StripProtection());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  new  StripProtection());	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  StripProtection());  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  StripProtection());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  parent,  new  StripProtection());	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  stripProtection());  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  stripProtection());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  stripProtection());	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(),  level);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(),  level);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtection(),  level);	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
195	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  level,  new  StripProtection());  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Traversal.traverse(compiler,  n,  level,  new  StripProtection());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Traversal.traverse(compiler,  n,  level,  new  StripProtection());	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
196	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getType()  ==  Token.BLOCK)  {	  if(!isResultUsed    &&    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	49	None	replace
197	[BUG]  [BUGGY]  if(!isResultUsed  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  parent.getType()!=  Token.BLOCK)  {	  if(!isResultUsed    &&    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	49	None	replace
198	[BUG]  [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level!=  Token.EXPR_RESULT)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	35	None	replace
199	[BUG]  [BUGGY]  if(isResultUsed  &&  level!=  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  level!=  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  level!=  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	35	None	replace
200	[BUG]  [BUGGY]  if(isResultUsed  &&  level!=  Token.EXPR_RESULT  ||  isSimpleOp!=  Token.BLOCK)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  level!=  Token.EXPR_RESULT  ||  isSimpleOp!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  level!=  Token.EXPR_RESULT  ||  isSimpleOp!=  Token.BLOCK)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	35	None	replace
201	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  &&  isSimpleOp)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getJSDocInfo()!=  null  &&  isSimpleOp)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    isSimpleOp)    {    	non-compiled	[CE]  	18	None	replace
202	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  protectedSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  protectedSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  protectedSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectedSideEffectFreeCode)    {    	non-compiled	[CE]  	44	None	replace
203	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode  ||  level)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode  ||  level)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode  ||  level)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectedSideEffectFreeCode)    {    	non-compiled	[CE]  	44	None	replace
204	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  protectedSideEffectFreeCode)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  protectedSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed  ||  protectedSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectedSideEffectFreeCode)    {    	non-compiled	[CE]  	44	None	replace
205	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  protectSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  ||  protectSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	33	None	replace
206	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectfreeCode)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectfreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectfreeCode)  {	  if(isResultUsed    &&    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	33	None	replace
207	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  ==  Token.BLOCK)  {	  if(parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	50	None	replace
208	[BUG]  [BUGGY]  if(n.getType()!=  Token.BLOCK)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(n.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(n.getType()!=  Token.BLOCK)  {	  if(parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	50	None	replace
209	[BUG]  [BUGGY]  if(n.getType()!=  Token.EXPR_RESULT  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(n.getType()!=  Token.EXPR_RESULT  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(n.getType()!=  Token.EXPR_RESULT  ||  parent.getType()!=  Token.BLOCK)  {	  if(parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	50	None	replace
210	[BUG]  [BUGGY]  if(isSimpleOp  ||  n.getJSDocInfo()!=  null)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  n.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  n.getJSDocInfo()!=  null)  {	  if(isResultUsed    ||    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	23	None	replace
211	[BUG]  [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()  ==  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()  ==  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  n.getJSDocInfo()  ==  null)  {	  if(isResultUsed    ||    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	23	None	replace
212	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  parent.getType()!=  Token.FUNCTION)  {	  if(isResultUsed    &&    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
213	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    &&    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
214	[BUG]  [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  isResultUsed  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    &&    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
215	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    &&    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
216	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  n.getFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
217	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  node.getFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
218	[BUG]  [BUGGY]  Node  n  =  an.getFirstChild();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  an.getFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  an.getFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
219	[BUG]  [BUGGY]  if(isResultUsed  ||  n.getJSDocInfo()  ==  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  n.getJSDocInfo()  ==  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  n.getJSDocInfo()  ==  null)  {	  if(isResultUsed    ||    parent.getJSDocInfo()    ==    null)    {    	non-compiled	[CE]  	25	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  StripProtection(isSimpleOp));  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  StripProtection(isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  StripProtection(isSimpleOp));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  new  StripProtection(isSimpleOp));  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  new  StripProtection(isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  new  StripProtection(isSimpleOp));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  stripProtection(isSimpleOp));  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  stripProtection(isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  stripProtection(isSimpleOp));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  isSimpleOp));  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  isSimpleOp));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  StripProtection(isSimpleOp));  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  StripProtection(isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  parent,  new  StripProtection(isSimpleOp));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  stripProperty(isSimpleOp));  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  stripProperty(isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  stripProperty(isSimpleOp));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
226	[BUG]  [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  isSimpleOp!=  Token.BLOCK)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  isSimpleOp!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  isSimpleOp!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	17	None	replace
227	[BUG]  [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  isSimpleOp  >>  Token.BLOCK)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  isSimpleOp  >>  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  isSimpleOp  >>  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	17	None	replace
228	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	4	None	replace
229	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	4	None	replace
230	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed)  {	  if(isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	4	None	replace
231	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	4	None	replace
232	[BUG]  [BUGGY]  if(isResultUsed  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    USELESS_CODE_ERROR)    {    	non-compiled	[CE]  	34	None	replace
233	[BUG]  [BUGGY]  if(isResultUsed  &&  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    USELESS_CODE_ERROR)    {    	non-compiled	[CE]  	34	None	replace
234	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    USELESS_CODE_ERROR)    {    	non-compiled	[CE]  	34	None	replace
235	[BUG]  [BUGGY]  if(isResultUsed  &&  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    USELESS_CODE_ERROR)    {    	non-compiled	[CE]  	34	None	replace
236	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    USELESS_CODE_ERROR)    {    	non-compiled	[CE]  	34	None	replace
237	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    USELESS_CODE_ERROR)    {    	non-compiled	[CE]  	34	None	replace
238	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp.getType()!=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	32	None	replace
239	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	32	None	replace
240	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	32	None	replace
241	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  >=  Token.EXPR_RESULT)  {  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  >=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()  >=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	32	None	replace
242	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	32	None	replace
243	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  ||  isResultUsed)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    isSimpleOp)    {    	non-compiled	[CE]  	56	None	replace
244	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(n.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    isSimpleOp)    {    	non-compiled	[CE]  	56	None	replace
245	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    isSimpleOp)    {    	non-compiled	[CE]  	56	None	replace
246	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  isSimpleOp)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  isSimpleOp)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    isSimpleOp)    {    	non-compiled	[CE]  	56	None	replace
247	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getFirstChild()  ==  null)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getFirstChild()  ==  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getFirstChild()  ==  null)  {	  if(isResultUsed    ||    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	26	None	replace
248	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getLastChild()!=  null)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getLastChild()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getLastChild()!=  null)  {	  if(isResultUsed    ||    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	26	None	replace
249	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	48	None	replace
250	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	48	None	replace
251	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed  ||  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	48	None	replace
252	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	48	None	replace
253	[BUG]  [BUGGY]  if(parentUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parentUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parentUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	48	None	replace
254	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  level)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  level)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  level)  {	  if(isResultUsed    ||    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	13	None	replace
255	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    ||    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	13	None	replace
256	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  level  <  USELESS_CODE_ERROR)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  level  <  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  level  <  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	13	None	replace
257	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	13	None	replace
258	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  protectSideEffectFreeCode)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed  ||  protectSideEffectFreeCode)  {	  if(isSimpleOp    ||    isResultUsed)    {    	non-compiled	[CE]  	2	None	replace
259	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed  ||  level!=  USELESS_CODE_ERROR)  {	  if(isSimpleOp    ||    isResultUsed)    {    	non-compiled	[CE]  	2	None	replace
260	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  ProtectSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  ProtectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  ProtectSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    ||    ProtectSideEffectFreeCode)    {    	non-compiled	[CE]  	64	None	replace
261	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  ensureSideEffectFreeCode)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  ensureSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  ensureSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    ||    ProtectSideEffectFreeCode)    {    	non-compiled	[CE]  	64	None	replace
262	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    ||    isSimpleOp    ||    ProtectSideEffectFreeCode)    {    	non-compiled	[CE]  	64	None	replace
263	[BUG]  [BUGGY]  if(protectSideEffectFreeCode  &&  isResultUsed  &&  isSimpleOp)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(protectSideEffectFreeCode  &&  isResultUsed  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(protectSideEffectFreeCode  &&  isResultUsed  &&  isSimpleOp)  {	  if(isResultUsed    &&    isSimpleOp    &&    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	54	None	replace
264	[BUG]  [BUGGY]  if(!protectSideEffectFreeCode  &&!isResultUsed  &&  isSimpleOp)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!protectSideEffectFreeCode  &&!isResultUsed  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!protectSideEffectFreeCode  &&!isResultUsed  &&  isSimpleOp)  {	  if(!isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
265	[BUG]  [BUGGY]  if(!isResultUsed  &&  n.getJSDocInfo()!=  null)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  n.getJSDocInfo()!=  null)  {	  if(isResultUsed    ||    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	23	None	replace
266	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	48	None	replace
267	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  &&  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	48	None	replace
268	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	14	None	replace
269	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getType()!=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	14	None	replace
270	[BUG]  [BUGGY]  if(parentUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parentUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parentUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    &&    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  level);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  level);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  sourceFile,  level);	  NodeTraversal.traverse(compiler,    n,    level);    	non-compiled	[CE]  	7	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.level);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.level);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  this.level);	  NodeTraversal.traverse(compiler,    n,    level);    	non-compiled	[CE]  	7	None	replace
273	[BUG]  [BUGGY]  if(parent.getType()!=  Token.FUNCTION  ||  isResultUsed)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()!=  Token.FUNCTION  ||  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.FUNCTION  ||  isResultUsed)  {	  if(parent.getType()    ==    Token.FUNCTION    ||    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
274	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.FUNCTION    ||    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
275	[BUG]  [BUGGY]  if(guardSideEffectFreeCode  &&  isResultUsed  ||  guardSideEffectFreeCode)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(guardSideEffectFreeCode  &&  isResultUsed  ||  guardSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(guardSideEffectFreeCode  &&  isResultUsed  ||  guardSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	53	None	replace
276	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK    ||    isSimpleOp)    {    	non-compiled	[CE]  	62	None	replace
277	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK    ||    isSimpleOp)    {    	non-compiled	[CE]  	62	None	replace
278	[BUG]  [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null  &&  isSimpleOp)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  n.getJSDocInfo()!=  null  &&  isSimpleOp)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    isSimpleOp)    {    	non-compiled	[CE]  	18	None	replace
279	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  protectSideEffectFreeCode)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  protectSideEffectFreeCode)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    isSimpleOp)    {    	non-compiled	[CE]  	18	None	replace
280	[BUG]  [BUGGY]  Node  parent  =  n.getParentOperator();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  parent  =  n.getParentOperator();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  parent  =  n.getParentOperator();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
281	[BUG]  [BUGGY]  if(protectSideEffectFreeCode  ||  isResultUsed  ||  isSimpleOp)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(protectSideEffectFreeCode  ||  isResultUsed  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(protectSideEffectFreeCode  ||  isResultUsed  ||  isSimpleOp)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectionSideEffectFreeCode)    {    	non-compiled	[CE]  	43	None	replace
282	[BUG]  [BUGGY]  if(!isSimpleOp  &&!protectSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isSimpleOp  &&!protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isSimpleOp  &&!protectSideEffectFreeCode)  {	  if(isSimpleOp    &&!isResultUsed)    {    	non-compiled	[CE]  	40	None	replace
283	[BUG]  [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
284	[BUG]  [BUGGY]  if(isResultUsed  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
285	[BUG]  [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
286	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level!=  Token.BLOCK)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
287	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getType()  ==  Token.COMMA)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  parent.getType()  ==  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getType()  ==  Token.COMMA)  {	  if(isResultUsed    ||    parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	55	None	replace
288	[BUG]  [BUGGY]  if(isResultUsed  &&  protectSideEffectFreeCode  ||  isSimpleOp)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  protectSideEffectFreeCode  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  protectSideEffectFreeCode  ||  isSimpleOp)  {	  if(isResultUsed    &&    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	33	None	replace
289	[BUG]  [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  parent.getJSDocInfo()!=  null);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  parent.getJSDocInfo()!=  null);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.setJSDocInfo(isSimpleOp  ||  parent.getJSDocInfo()!=  null);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  	8	None	replace
290	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo()!=  null);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo()!=  null);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo()!=  null);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  	8	None	replace
291	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed)||  isSimpleOp;  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.setJSDocInfo(isResultUsed)||  isSimpleOp;  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.setJSDocInfo(isResultUsed)||  isSimpleOp;	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  not  a  statement	8	None	replace
292	[BUG]  [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null  ||  isSimpleOp)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  n.getJSDocInfo()!=  null  ||  isSimpleOp)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    ||    isSimpleOp)    {    	non-compiled	[CE]  	22	None	replace
293	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  protectSideEffectFreeCode)  {  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  protectSideEffectFreeCode)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    ||    isSimpleOp)    {    	non-compiled	[CE]  	22	None	replace
294	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getFirstChild()!=  null)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  parent.getFirstChild()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getFirstChild()!=  null)  {	  if(isResultUsed    ||    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	26	None	replace
295	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  level!=  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  level!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  level!=  Token.EXPR_RESULT)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	35	None	replace
296	[BUG]  [BUGGY]  if(isResultUsed  &&  level!=  Token.EXPR_RESULT)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  level!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  level!=  Token.EXPR_RESULT)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	35	None	replace
297	[BUG]  [BUGGY]  if(isResultUsed  &&  level  ==  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  level  ==  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  level  ==  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	35	None	replace
298	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp.getType()!=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	32	None	replace
299	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()  >>  Token.EXPR_RESULT)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp.getType()  >>  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp.getType()  >>  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	32	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(parent,  isSimpleOp));  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(parent,  isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtection(parent,  isSimpleOp));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(isResultUsed));  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(isResultUsed));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtection(isResultUsed));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(parent));  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(parent));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtection(parent));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  StripProtection(isSimpleOp));  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  StripProtection(isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  StripProtection(isSimpleOp));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
304	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  protectSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  protectSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	13	None	replace
305	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  >>  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  >>  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  >>  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
306	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent!=  null  ||  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent!=  null  ||  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
307	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.replaceChild(n,  new  Node(Token.EMPTY));	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
308	[BUG]  [BUGGY]  n.removeChild(parent,  isSimpleOp);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.removeChild(parent,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.removeChild(parent,  isSimpleOp);	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
309	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.replaceChild(n,  new  Node(Token.FUNCTION));	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
310	[BUG]  [BUGGY]  n.replaceChild(n,  isSimpleOp);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.replaceChild(n,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.replaceChild(n,  isSimpleOp);	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
311	[BUG]  [BUGGY]  if(!isResultUsed  ||  n.getJSDocInfo()!=  null)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  n.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  n.getJSDocInfo()!=  null)  {	  if(!isResultUsed    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	67	None	replace
312	[BUG]  [BUGGY]  n  =  parent.getPreviousChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n  =  parent.getPreviousChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  parent.getPreviousChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	57	None	replace
313	[BUG]  [BUGGY]  n  =  parent.getParent();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n  =  parent.getParent();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  parent.getParent();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	57	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  CheckSideEffects());  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  CheckSideEffects());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  CheckSideEffects());	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(),  isResultUsed);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(),  isResultUsed);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtection(),  isResultUsed);	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(),  isSimpleOp);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(),  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtection(),  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  StripProtection());  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  StripProtection());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  StripProtection());	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
318	[BUG]  [BUGGY]  if(protectSideEffectFreeCode  ||  isResultUsed)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(protectSideEffectFreeCode  ||  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(protectSideEffectFreeCode  ||  isResultUsed)  {	  if(isResultUsed    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	47	None	replace
319	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	47	None	replace
320	[BUG]  [BUGGY]  if(isSimpleOp  &&  protectSideEffectFreeCode)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  protectSideEffectFreeCode)  {	  if(isSimpleOp    &&    isResultUsed)    {    	non-compiled	[CE]  	36	None	replace
321	[BUG]  [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level!=  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	17	None	replace
322	[BUG]  [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  level  ==  Token.EXPR_RESULT  ||  level!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	17	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  level,  USELESS_CODE_ERROR);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  level,  USELESS_CODE_ERROR);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  level,  USELESS_CODE_ERROR);	  NodeTraversal.traverse(compiler,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	10	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  IS_SIGNATURE_ERROR,  isSimpleOp);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  IS_SIGNATURE_ERROR,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  IS_SIGNATURE_ERROR,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	10	None	replace
325	[BUG]  [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  n.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isSimpleOp(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	66	None	replace
326	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  guardSideEffectFreeCode)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  guardSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed  ||  guardSideEffectFreeCode)  {	  if(isSimpleOp    ||    isResultUsed)    {    	non-compiled	[CE]  	2	None	replace
327	[BUG]  [BUGGY]  Node  n  =  parent.removeFirstChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.removeFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.removeFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
328	[BUG]  [BUGGY]  Node  n  =  parent.getPreviousChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.getPreviousChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.getPreviousChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
329	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getType()!=  Token.EXPR_RESULT)  {	  if(!isResultUsed    &&    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	49	None	replace
330	[BUG]  [BUGGY]  Node  n  =  parent.getOwnerDocument();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.getOwnerDocument();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.getOwnerDocument();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	9	None	replace
331	[BUG]  [BUGGY]  Node  n  =  parent.getChildCount();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.getChildCount();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.getChildCount();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	9	None	replace
332	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOperatorType(parent.getJSDocInfo()))  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOperatorType(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOperatorType(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
333	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
334	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getFirstChild()!=  n)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getFirstChild()!=  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getFirstChild()!=  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
335	[BUG]  [BUGGY]  if(parentUsed  ||  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parentUsed  ||  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parentUsed  ||  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
336	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getFirstChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
337	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp.getType()!=  Token.BLOCK)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	31	None	replace
338	[BUG]  [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.EXPR_RESULT  ||  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	31	None	replace
339	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  >=  Token.BLOCK)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  >=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()  >=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	31	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode);  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode);	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp,  protectSideEffectFreeCode);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp,  protectSideEffectFreeCode);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp,  protectSideEffectFreeCode);	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode);	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode);	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode);	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
345	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  &&  isSimpleOp)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode  &&  isSimpleOp)  {	  if(isResultUsed    ||    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	45	None	replace
346	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	51	None	replace
347	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	51	None	replace
348	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  protectedSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  protectedSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  ||  protectedSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectedSideEffectFreeCode)    {    	non-compiled	[CE]  	44	None	replace
349	[BUG]  [BUGGY]  if(!isResultUsed  ||!isSimpleOp)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||!isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||!isSimpleOp)  {	  if(!isSimpleOp)    {    	non-compiled	[CE]  	38	None	replace
350	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getJSDocInfo()!=  null)  {	  if(isSimpleOp    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	24	None	replace
351	[BUG]  [BUGGY]  if(!isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {	  if(isSimpleOp    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	24	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  level,  isSimpleOp);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceFile,  level,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  sourceFile,  level,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.level,  isSimpleOp);  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.level,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  this.level,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  isResultUsed,  isSimpleOp);  [CE]  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  isResultUsed,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  state,  isResultUsed,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
355	[BUG]  [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  ||  isResultUsed)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  ||  isResultUsed)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.EXPR_RESULT  ||  isResultUsed)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    isSimpleOp)    {    	non-compiled	[CE]  	56	None	replace
356	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent  ==  null  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    isSimpleOp)    {    	non-compiled	[CE]  	56	None	replace
357	[BUG]  [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  &&  isSimpleOp)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.EXPR_RESULT  &&  isSimpleOp)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    isSimpleOp)    {    	non-compiled	[CE]  	56	None	replace
358	[BUG]  [BUGGY]  if(isResultUsed  &&  protectSideEffectFreeCode  &&  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  protectSideEffectFreeCode  &&  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  protectSideEffectFreeCode  &&  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	52	None	replace
359	[BUG]  [BUGGY]  if(!isResultUsed  ||  protectSideEffectFreeCode)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  protectSideEffectFreeCode)  {	  if(!isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	46	None	replace
360	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode)  {	  if(!isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	46	None	replace
361	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  ProtectSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  ||  ProtectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  ||  ProtectSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    ||    ProtectSideEffectFreeCode)    {    	non-compiled	[CE]  	64	None	replace
362	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  ProtectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  ProtectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  ProtectSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    ProtectSideEffectFreeCode)    {    	non-compiled	[CE]  	64	None	replace
363	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  ProtectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  ProtectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  ProtectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    ProtectSideEffectFreeCode)    {    	non-compiled	[CE]  	64	None	replace
364	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	12	None	replace
365	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.COMMA)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()!=  Token.COMMA)  {	  if(isResultUsed    ||    parent.getType()!=    Token.COMMA)    {    	non-compiled	[CE]  	61	None	replace
366	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectionSideEffectFreeCode)    {    	non-compiled	[CE]  	43	None	replace
367	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode  ||  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectionSideEffectFreeCode)    {    	non-compiled	[CE]  	43	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceName,  level,  isSimpleOp);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceName,  level,  isSimpleOp);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  sourceName,  level,  isSimpleOp);	  NodeTraversal.traverse(compiler,    n,    level,    isSimpleOp);    	non-compiled	[CE]  	11	None	replace
369	[BUG]  [BUGGY]  if(isResultUsed  &&  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_FACTOR)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_FACTOR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_FACTOR)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    USELESS_CODE_ERROR)    {    	non-compiled	[CE]  	34	None	replace
370	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getLastChild()  ==  n)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getLastChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getLastChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
371	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.COMMA)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.COMMA)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getFirstChild()    ==    n)    {    	non-compiled	[CE]  	63	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(isResultUsed  ||  isSimpleOp));  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(isResultUsed  ||  isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtection(isResultUsed  ||  isSimpleOp));	  NodeTraversal.traverse(compiler,    n,    new    StripProtection(isSimpleOp));    	non-compiled	[CE]  	60	None	replace
373	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  ||  isResultUsed  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed  ||  parent.getJSDocInfo()!=  null)  {	  if(isSimpleOp    ||    isResultUsed)    {    	non-compiled	[CE]  	2	None	replace
374	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  isSimpleOp));  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  isSimpleOp));	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
375	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.replaceChild(n,  new  Node(Token.EMPTY));	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
376	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
377	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
378	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  ||  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  ||  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getJSDocInfo()!=  null  ||  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
379	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isFunction(parent.getJSDocInfo()))  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isFunction(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isFunction(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isExpressionNode(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	65	None	replace
380	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.COMMA)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.COMMA)  {	  if(isResultUsed    ||    parent.getType()!=    Token.COMMA)    {    	non-compiled	[CE]  	61	None	replace
381	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  &&  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  &&  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  &&  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	51	None	replace
382	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  &&  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  &&  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode  &&  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	51	None	replace
383	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectfreeCode)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectfreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectfreeCode)  {	  if(isResultUsed    &&    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	53	None	replace
384	[BUG]  [BUGGY]  Node  parent  =  n.getParentOfParent();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  parent  =  n.getParentOfParent();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  parent  =  n.getParentOfParent();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
385	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getFirstChild()!=  null)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getFirstChild()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  parent.getFirstChild()!=  null)  {	  if(isResultUsed    &&    isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	52	None	replace
386	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	52	None	replace
387	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode)  {	  if(!isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	46	None	replace
388	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {	  if(!isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	46	None	replace
389	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {	  if(!isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	46	None	replace
390	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.BLOCK)  {	  if(!isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	46	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.COMMA);  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.COMMA);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.COMMA);	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  parent.getJSDocInfo()!=  null);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  parent.getJSDocInfo()!=  null);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp  ||  parent.getJSDocInfo()!=  null);	  Preconditions.checkState(isResultUsed    ||    isSimpleOp);    	non-compiled	[CE]  	58	None	replace
393	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	47	None	replace
394	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getType()!=  Token.COMMA)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getType()!=  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getType()!=  Token.COMMA)  {	  if(!isResultUsed    &&    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	49	None	replace
395	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getFirstChild()  ==  n)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getFirstChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	12	None	replace
396	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.COMMA)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode  ||  parent.getType()  ==  Token.COMMA)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	12	None	replace
397	[BUG]  [BUGGY]  if(parent.getType()!=  Token.FUNCTION  ||  isSimpleOp)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()!=  Token.FUNCTION  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.FUNCTION  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.FUNCTION    ||    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
398	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.FUNCTION    ||    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
399	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.EMPTY)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.EMPTY)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.EMPTY)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	15	None	replace
400	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FOR)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FOR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FOR)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	15	None	replace
401	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  protectedSideEffectFreeCode)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  protectedSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  protectedSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	45	None	replace
402	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  ensureSideEffectFreeCode)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  ensureSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  ensureSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp    &&    protectSideEffectFreeCode)    {    	non-compiled	[CE]  	45	None	replace
403	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isSimpleOp(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	66	None	replace
404	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  ||  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()!=  null  ||  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getJSDocInfo()!=  null  ||  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null    &&    NodeUtil.isSimpleOp(parent.getJSDocInfo()))    {    	non-compiled	[CE]  	66	None	replace
405	[BUG]  [BUGGY]  if(isResultUsed  ||  n.getFirstChild()!=  null)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  n.getFirstChild()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  n.getFirstChild()!=  null)  {	  if(isResultUsed    ||    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	26	None	replace
406	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode  ||  parent.getFirstChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp    ||    guardSideEffectFreeCode)    {    	non-compiled	[CE]  	13	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtectionBuilder());  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtectionBuilder());  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtectionBuilder());	  NodeTraversal.traverse(compiler,    n,    new    StripProtection());    	non-compiled	[CE]  	59	None	replace
408	[BUG]  [BUGGY]  Node  an  =  n.getFirstChild().getNext();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  an  =  n.getFirstChild().getNext();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  n.getFirstChild().getNext();	  Node    an    =    n.getFirstChild();    	non-compiled	[CE]  	68	None	replace
409	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  NodeUtil.isExpressionNode(parent.getFirstChild()))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  NodeUtil.isExpressionNode(parent.getFirstChild()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  NodeUtil.isExpressionNode(parent.getFirstChild()))  {	  if(isResultUsed    &&    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	42	None	replace
410	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  NodeUtil.isSimpleOp(parent.getFirstChild()))  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  NodeUtil.isSimpleOp(parent.getFirstChild()))  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getFirstChild()!=  null  &&  NodeUtil.isSimpleOp(parent.getFirstChild()))  {	  if(isResultUsed    &&    parent.getFirstChild()!=    null)    {    	non-compiled	[CE]  	42	None	replace
411	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  isSimpleOp));  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  isSimpleOp));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  isSimpleOp));	  n.removeChild(parent);    	non-compiled	[CE]  	70	None	replace
412	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectedSideEffectFreeCode)    {    	non-compiled	[CE]  	44	None	replace
413	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectedSideEffectFreeCode)    {    	non-compiled	[CE]  	44	None	replace
414	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  >  USELESS_CODE_ERROR)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  >  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level  >  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    protectedSideEffectFreeCode)    {    	non-compiled	[CE]  	44	None	replace
415	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getFirstChild()  ==  n)  {	  if(isSimpleOp    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	20	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isProtectFreeCode);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isProtectFreeCode);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isProtectFreeCode);	  NodeTraversal.traverse(compiler,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	10	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isProtectionFreeCode);  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isProtectionFreeCode);  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR,  isProtectionFreeCode);	  NodeTraversal.traverse(compiler,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	10	None	replace
418	[BUG]  [BUGGY]  n  =  parent.removeFirstChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n  =  parent.removeFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  parent.removeFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	57	None	replace
419	[BUG]  [BUGGY]  n  =  an.getFirstChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  n  =  an.getFirstChild();  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  an.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  	57	None	replace
420	[BUG]  [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  level!=  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  level!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  isResultUsed  ||  level!=  Token.EXPR_RESULT)  {	  if(isResultUsed    &&    isSimpleOp    ||    level!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	35	None	replace
421	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(n,  Node.newString(Token.NAME,  PROTECTOR_FN));  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  Node  n  =  parent.replaceChild(n,  Node.newString(Token.NAME,  PROTECTOR_FN));  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.replaceChild(n,  Node.newString(Token.NAME,  PROTECTOR_FN));	  Node    n    =    parent.getParent();    	non-compiled	[CE]  	9	None	replace
422	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  >=  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  >=  Token.FUNCTION)  {	  if(isResultUsed    &&    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
423	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    &&    isSimpleOp    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
424	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.COMMA  &&  isSimpleOp)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.COMMA  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  ==  Token.COMMA  &&  isSimpleOp)  {	  if(isResultUsed    ||    parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	55	None	replace
425	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  ==  Token.COMMA)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()  ==  Token.COMMA)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()  ==  Token.COMMA)  {	  if(isResultUsed    ||    parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	55	None	replace
426	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getFirstChild()  ==  n)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getFirstChild()  ==  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  &&  parent.getFirstChild()  ==  n)  {	  if(!isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
427	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getFirstChild()!=  n)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(!isResultUsed  &&  isSimpleOp  &&  parent.getFirstChild()!=  n)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp  &&  parent.getFirstChild()!=  n)  {	  if(!isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
428	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  >=  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  >=  Token.BLOCK)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  >=  Token.BLOCK)  {	  if(isResultUsed    ||    isSimpleOp    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	48	None	replace
429	[BUG]  [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  ||  isSimpleOp)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.EXPR_RESULT  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    isSimpleOp)    {    	non-compiled	[CE]  	56	None	replace
430	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    isSimpleOp)    {    	non-compiled	[CE]  	56	None	replace
431	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
432	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level!=  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level!=  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level!=  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
433	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT  ||  level  ==  USELESS_CODE_ERROR)  {	  if(isResultUsed    ||    isSimpleOp    ||    level    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	16	None	replace
434	[BUG]  [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  isResultUsed  ||  parent.getJSDocInfo()!=  null)  {	  if(isSimpleOp    &&    isResultUsed)    {    	non-compiled	[CE]  	36	None	replace
435	[BUG]  [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  guardSideEffectFreeCode)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  isResultUsed  ||  guardSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  isResultUsed  ||  guardSideEffectFreeCode)  {	  if(isSimpleOp    &&    isResultUsed)    {    	non-compiled	[CE]  	36	None	replace
436	[BUG]  [BUGGY]  if(parent.getType()!=  Token.BLOCK  &&  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(parent.getType()!=  Token.BLOCK  &&  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.BLOCK  &&  parent.getType()!=  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
437	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  &&  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
438	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isSimpleOp  &&  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(parent.getType()!=    Token.BLOCK    ||    parent.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	30	None	replace
439	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.BLOCK  &&  isSimpleOp)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.BLOCK  &&  isSimpleOp)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()!=  Token.BLOCK  &&  isSimpleOp)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK    ||    isSimpleOp)    {    	non-compiled	[CE]  	62	None	replace
440	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.EMPTY)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.EMPTY)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()!=  Token.EMPTY)  {	  if(isResultUsed    ||    isSimpleOp.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	32	None	replace
441	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&!protectSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]        if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {      [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&!protectSideEffectFreeCode)  {  [BUGGY]      return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&!protectSideEffectFreeCode)  {	  if(isSimpleOp    &&!isResultUsed)    {    	non-compiled	[CE]  	40	None	replace
