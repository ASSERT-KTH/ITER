bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!isResultUsed  &&  isSimpleOp)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(!isResultUsed  &&  isSimpleOp)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  isSimpleOp)  {	  if(isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  if(isSimpleOp  ||  isResultUsed)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isSimpleOp  ||  isResultUsed)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  isResultUsed)  {	  if(isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  ==  Token.FUNCTION  ||  isSimpleOp)  {	  if(isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.getFirstChild();	      	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  parent  =  n.getParent();	      	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  level);  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level);	      	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  n.setJSDocInfo(isSimpleOp);  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  n.setJSDocInfo(isSimpleOp);  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.setJSDocInfo(isSimpleOp);	      	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  n  =  parent.getParent();	      	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR);  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  USELESS_CODE_ERROR);	      	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  isSimpleOp);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  level,  isSimpleOp);  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  level,  isSimpleOp);	      	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  guardSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
16	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level  ==  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level!=  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  level!=  Token.EXPR_RESULT)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  level!=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  isSimpleOp)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  isSimpleOp)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  isSimpleOp)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  n.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()  ==  null)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()  ==  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()  ==  null)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  isSimpleOp)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  isSimpleOp)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  ||  isSimpleOp)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  if(isResultUsed  ||  n.getJSDocInfo()!=  null)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  n.getJSDocInfo()!=  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  n.getJSDocInfo()!=  null)  {	  if(isResultUsed    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isSimpleOp  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()  ==  null)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  parent.getJSDocInfo()  ==  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getJSDocInfo()  ==  null)  {	  if(isResultUsed    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getFirstChild()!=  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  parent.getFirstChild()!=  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getFirstChild()!=  null)  {	  if(isResultUsed    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  parent.getType()!=  Token.BLOCK)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  ==  Token.BLOCK)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  if(parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.BLOCK  ||  parent.getType()!=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.BLOCK)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.BLOCK)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp.getType()!=  Token.EXPR_RESULT)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  protectSideEffectFreeCode)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  protectSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  protectSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  level!=  USELESS_CODE_ERROR)  {	  if(isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  level!=  Token.EXPR_RESULT)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  level!=  Token.EXPR_RESULT)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  level!=  Token.EXPR_RESULT)  {	  if(isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  if(isSimpleOp  &&  isResultUsed)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isSimpleOp  &&  isResultUsed)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&  isResultUsed)  {	  if(isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
37	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
38	[BUG]  [BUGGY]  if(!isSimpleOp)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(!isSimpleOp)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isSimpleOp)  {	  if(!isResultUsed)    {    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  if(isSimpleOp  ||!isResultUsed)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isSimpleOp  ||!isResultUsed)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  ||!isResultUsed)  {	  if(!isResultUsed)    {    	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  if(isSimpleOp  &&!isResultUsed)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isSimpleOp  &&!isResultUsed)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isSimpleOp  &&!isResultUsed)  {	  if(!isResultUsed)    {    	non-compiled	[CE]  	6	None	replace
41	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(!isResultUsed  &&  parent.getJSDocInfo()!=  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	4	None	replace
42	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  parent.getFirstChild()!=  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getFirstChild()!=  null)  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	4	None	replace
43	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectionSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
44	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  protectedSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
45	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  &&  protectSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
46	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(!isResultUsed  ||  isSimpleOp)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  isSimpleOp)  {	  if(!isResultUsed)    {    	non-compiled	[CE]  	6	None	replace
47	[BUG]  [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  protectSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  protectSideEffectFreeCode)  {	  if(!isResultUsed)    {    	non-compiled	[CE]  	6	None	replace
48	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  if(!isResultUsed  &&  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(!isResultUsed  &&  parent.getType()!=  Token.BLOCK)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  &&  parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
50	[BUG]  [BUGGY]  if(parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(parent.getType()!=  Token.BLOCK)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()!=  Token.BLOCK)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  protectSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
52	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  parent.getJSDocInfo()!=  null)  {	  if(isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
53	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  guardSideEffectFreeCode)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  isSimpleOp  ||  guardSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  ||  guardSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
54	[BUG]  [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  isSimpleOp  &&  guardSideEffectFreeCode)  {	  if(isResultUsed    &&    isSimpleOp)    {    	non-compiled	[CE]  	3	None	replace
55	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.COMMA)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  parent.getType()  ==  Token.COMMA)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()  ==  Token.COMMA)  {	  if(isResultUsed    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  ||  isSimpleOp)  {	  if(isSimpleOp)    {    	non-compiled	[CE]  	1	None	replace
57	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  n  =  parent.getFirstChild();  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n  =  parent.getFirstChild();	      	non-compiled	[CE]  	5	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp);  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp);	      	non-compiled	[CE]  	5	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection());  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection());  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtection());	      	non-compiled	[CE]  	5	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(isSimpleOp));  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  StripProtection(isSimpleOp));  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	NodeTraversal.traverse(compiler,  n,  new  StripProtection(isSimpleOp));	      	non-compiled	[CE]  	5	None	replace
61	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.COMMA)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.COMMA)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()!=  Token.COMMA)  {	  if(isResultUsed    ||    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	7	None	replace
62	[BUG]  [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  parent.getType()!=  Token.BLOCK  ||  isSimpleOp)  {	  if(isResultUsed    ||    parent.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  parent.getFirstChild()  ==  n)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  ProtectSideEffectFreeCode)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp  ||  ProtectSideEffectFreeCode)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  ||  isSimpleOp  ||  ProtectSideEffectFreeCode)  {	  if(isResultUsed    ||    isSimpleOp)    {    	non-compiled	[CE]  	2	None	replace
65	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isExpressionNode(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	4	None	replace
66	[BUG]  [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(isResultUsed  &&  parent.getJSDocInfo()!=  null  &&  NodeUtil.isSimpleOp(parent.getJSDocInfo()))  {	  if(isResultUsed    &&    parent.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  	4	None	replace
67	[BUG]  [BUGGY]  if(!isResultUsed  ||  parent.getJSDocInfo()!=  null)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  if(!isResultUsed  ||  parent.getJSDocInfo()!=  null)  {  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	if(!isResultUsed  ||  parent.getJSDocInfo()!=  null)  {	  if(!isResultUsed)    {    	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  Node  an  =  n.getFirstChild();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  Node  an  =  n.getFirstChild();  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  n.getFirstChild();	      	non-compiled	[CE]  	5	None	replace
69	[BUG]  [BUGGY]  Node  an  =  parent.getParent();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  Node  an  =  parent.getParent();  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	Node  an  =  parent.getParent();	      	non-compiled	[CE]  	5	None	replace
70	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {    [BUGGY]  n.removeChild(parent);  [BUGGY]    return;  }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	n.removeChild(parent);	      	non-compiled	[CE]  	5	None	replace
