bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	add	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
2	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
3	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";  [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	add	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
4	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";  [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
5	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]    [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	add	  	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
6	[BUG]  [BUGGY]    [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]    [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	  	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
7	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  token.name(n.getType())+ "'  on  the  previous  line? ";  [CE]  cannot  find  symbol  token  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  token.name(n.getType())+ "'  on  the  previous  line? ";  [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  token.name(n.getType())+ "'  on  the  previous  line? ";	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	non-compiled	[CE]  cannot  find  symbol  token	1	None	replace
8	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	add	msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ";	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
9	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ";  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ";	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
10	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";  [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	add	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
11	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  if  (n.isString())  {  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";  [BUGGY]  }  else  if  (isSimpleOp)  {  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  operator  is  not  being  used. ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";	msg  =   "Is  there  a  missing  '+'  on  the  previous  line? ";  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	1	1	replace
