bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    TOken.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	45	None	replace
2	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    TOken.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	45	None	replace
3	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?   "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?   "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?   "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing    '   ",    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	43	None	replace
4	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?   "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?   "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?   "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing    '   ",    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	43	None	replace
5	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing' "+n.getString()  + "'  on  the  previous  line? ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing' "+n.getString()  + "'  on  the  previous  line? ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?   "+n.getString()  + "'  on  the  previous  line? ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?   "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?   "+n.getString()  + "'  on  the  previous  line? ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "+n.getString()  + "'  on  the  previous  line?   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "+n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "+n.getString()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line:    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	46	None	replace
9	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line:   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	25	None	replace
10	[BUG]  [BUGGY]  String  msg  =   "Is  there  a  missing' "+n.getString()  + "'  on  the  previous  line? ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  String  msg  =   "Is  there  a  missing' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	String  msg  =   "Is  there  a  missing' "+n.getString()  + "'  on  the  previous  line? ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    String    msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	40	None	replace
11	[BUG]  [BUGGY]  String  msg  =   "Is  there  a  missing  line: "+n.getString()  + "'  on  the  previous  line?   ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  String  msg  =   "Is  there  a  missing  line: "+n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	String  msg  =   "Is  there  a  missing  line: "+n.getString()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    String    msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	40	None	replace
12	[BUG]  [BUGGY]  String  msg  =   "Is  there  a  missing  line' "+n.getString()  + "'  on  the  previous  line? ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  String  msg  =   "Is  there  a  missing  line' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	String  msg  =   "Is  there  a  missing  line' "+n.getString()  + "'  on  the  previous  line? ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    String    msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	40	None	replace
13	[BUG]  [BUGGY]  String  msg  =   "Is  there  a  missing  line "+n.getString()  + "'  on  the  previous  line?   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  String  msg  =   "Is  there  a  missing  line "+n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	String  msg  =   "Is  there  a  missing  line "+n.getString()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    String    msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	40	None	replace
14	[BUG]  [BUGGY]  String  msg  =   "Is  there  a  missing  line? "  +  n.getString()  + "'  on  the  previous  line?   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  String  msg  =   "Is  there  a  missing  line? "  +  n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	String  msg  =   "Is  there  a  missing  line? "  +  n.getString()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    String    msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	40	None	replace
15	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?n ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    line?    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    line?    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	16	None	replace
17	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line?    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	16	None	replace
18	[BUG]  [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";  [CE]  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	                msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";	  	non-compiled	[CE]  	1	None	add
19	[BUG]  [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ".;  [CE]  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ".;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	                msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ".;	  	non-compiled	[CE]  	1	None	add
20	[BUG]  [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ",;  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ",;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	                msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ",;	  	non-compiled	[CE]  	1	None	add
21	[BUG]  [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =  this  code  lacks  side-effects.  Is  there  a  bug?   ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =  this  code  lacks  side-effects.  Is  there  a  bug?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	                msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    msg  =  this  code  lacks  side-effects.  Is  there  a  bug?   ";	  	non-compiled	[CE]  	1	None	add
22	[BUG]  [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =   "This  code  lacks  side-effects,  Is  there  a  bug?   ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  msg  =   "This  code  lacks  side-effects,  Is  there  a  bug?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	                msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    msg  =   "This  code  lacks  side-effects,  Is  there  a  bug?   ";	  	non-compiled	[CE]  	1	None	add
23	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    element    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	51	None	replace
24	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())  + "'  on  the  previous  line? ",  ancestorType;  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())  + "'  on  the  previous  line? ",  ancestorType;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())  + "'  on  the  previous  line? ",  ancestorType;	  msg    =       "Is    there    a    missing    element    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	51	None	replace
25	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?   "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?   "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?   "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	31	None	replace
26	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	31	None	replace
27	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	31	None	replace
28	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line:    '   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	36	None	replace
29	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;	  msg    =       "Is    there    a    missing    line:    '   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  <identifier>  expected	36	None	replace
30	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?n ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    line:    '   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	36	None	replace
31	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line:   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	22	None	replace
32	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  	20	None	replace
33	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  	20	None	replace
34	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line: ";  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  	20	None	replace
35	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  	20	None	replace
36	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  statement: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  statement: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  statement: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  	20	None	replace
37	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line?n ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?n   ";    	non-compiled	[CE]  	38	None	replace
38	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line?n ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?n   ";    	non-compiled	[CE]  	38	None	replace
39	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	32	None	replace
40	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	32	None	replace
41	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    name    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	19	None	replace
42	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;	  msg    =       "Is    there    a    missing    name    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  not  a  statement	19	None	replace
43	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug?. ";  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug?. ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug?. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.    Is    there    a    bug?       ";    	non-compiled	[CE]  not  a  statement	34	None	replace
44	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug? ",;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug? ",;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug? ",;	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.    Is    there    a    bug?       ";    	non-compiled	[CE]  not  a  statement	34	None	replace
45	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Could  not  be  used. ";  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Could  not  be  used. ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Could  not  be  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.    Is    there    a    bug?       ";    	non-compiled	[CE]  not  a  statement	34	None	replace
46	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?n   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  not  a  statement	4	None	replace
47	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    string    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  not  a  statement	23	None	replace
48	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  character  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  character  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  character  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  not  a  statement	30	None	replace
49	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType())+ "'  operator  is  not  being  used.n ";  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType())+ "'  operator  is  not  being  used.n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType())+ "'  operator  is  not  being  used.n ";	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?       "    +    Token.name(n.getType())    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  not  a  statement	39	None	replace
50	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType())+ ",  operator  is  not  being  used.   ";  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType())+ ",  operator  is  not  being  used.   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType())+ ",  operator  is  not  being  used.   ";	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?       "    +    Token.name(n.getType())    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  not  a  statement	39	None	replace
51	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  not  a  statement	48	None	replace
52	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?n ";  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    line?    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  not  a  statement	24	None	replace
53	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug ";  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug ";	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    	non-compiled	[CE]  not  a  statement	2	None	replace
54	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug: ";  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug: ";	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    	non-compiled	[CE]  not  a  statement	2	None	replace
55	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line    '   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?   ";    	non-compiled	[CE]  not  a  statement	37	None	replace
56	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    line    '   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?   ";    	non-compiled	[CE]  not  a  statement	37	None	replace
57	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;	  msg    =       "Is    there    a    missing    line    '   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?   ";    	non-compiled	[CE]  not  a  statement	37	None	replace
58	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?. ";  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?. ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?. ";	  msg    =       "Is    there    a    missing    line    '   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?   ";    	non-compiled	[CE]  not  a  statement	37	None	replace
59	[BUG]  [BUGGY]  msg  =  n.getString()  + ": ";  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.getString()  + ": ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getString()  + ": ";	  msg    =    n.getString();    	non-compiled	[CE]  not  a  statement	53	None	replace
60	[BUG]  [BUGGY]  msg  =  n.toString();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.toString();  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.toString();	  msg    =    n.getString();    	non-compiled	[CE]  not  a  statement	53	None	replace
61	[BUG]  [BUGGY]  msg  =  n.getQualifiedName();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.getQualifiedName();  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getQualifiedName();	  msg    =    n.getString();    	non-compiled	[CE]  not  a  statement	53	None	replace
62	[BUG]  [BUGGY]  msg  =  n.getString()  + ";n ";  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.getString()  + ";n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getString()  + ";n ";	  msg    =    n.getString();    	non-compiled	[CE]  not  a  statement	53	None	replace
63	[BUG]  [BUGGY]  msg  =  n.getString()  + "n ";  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.getString()  + "n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getString()  + "n ";	  msg    =    n.getString();    	non-compiled	[CE]  not  a  statement	53	None	replace
64	[BUG]  [BUGGY]  msg  =  t.getString();  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  t.getString();  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  t.getString();	  msg    =    n.getString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
65	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "+n.getString()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "+n.getString()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "+n.getString()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
66	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
67	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + ",'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + ",'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + ",'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
68	[BUG]  [BUGGY]  msg  =  msg  + "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  + "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  + "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
69	[BUG]  [BUGGY]  msg  =  msg  + "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  + "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  + "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    string    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
70	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + ",'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "+n.getString()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    string    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
71	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ",  ancestorType);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ",  ancestorType);  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ",  ancestorType);	  msg    =       "Is    there    a    missing    string    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	10	None	replace
72	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  PROTECTOR_FN,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  PROTECTOR_FN,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
73	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  COMPLETE_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  COMPLETE_ERROR,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  COMPLETE_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
74	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  INVALID_NUMBER_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  INVALID_NUMBER_ERROR,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  INVALID_NUMBER_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
75	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  INVALID_TYPE,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  INVALID_TYPE,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  INVALID_TYPE,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
76	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  MAXIMIZED_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  MAXIMIZED_ERROR,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  MAXIMIZED_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
77	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_TYPE,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_TYPE,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  DEFAULT_TYPE,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
78	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    name    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
79	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ".;	  msg    =       "Is    there    a    missing    line:   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  <identifier>  expected	17	None	replace
80	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + ",  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + ",  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + ",  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line:   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
81	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line?. ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line?. ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line?. ";	  msg    =       "Is    there    a    missing    line    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
82	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + ",'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "+n.getString()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
83	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    line    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
84	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ".;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ".;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ".;	  msg    =       "Is    there    a    missing    line    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  <identifier>  expected	8	None	replace
85	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  PROTECTOR_FN,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  PROTECTOR_FN,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
86	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
87	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  INVALID_NUMBER_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  INVALID_NUMBER_ERROR,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  INVALID_NUMBER_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
88	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
89	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
90	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
91	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    n.name(n.getType())    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
92	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    n.name(n.getType())    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
93	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    n.name(n.getType())    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
94	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    name    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
95	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    line:    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
96	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;	  msg    =       "Is    there    a    missing    line:    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	46	None	replace
97	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
98	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
99	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line? ",  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line? ",  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line? ",  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing    '   ",    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	41	None	replace
100	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "','  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "','  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "','  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   ",'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
101	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    line    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
102	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;	  msg    =       "Is    there    a    missing    line    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	48	None	replace
103	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line?. ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line?. ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line?. ";	  msg    =       "Is    there    a    missing    string    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
104	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ".;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ".;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ".;	  msg    =       "Is    there    a    missing    string    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  <identifier>  expected	10	None	replace
105	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    n.name(n.getType())    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
106	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  n.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    n.name(n.getType())    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
107	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  n.getString();  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  n.getString();  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  n.getString();	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
108	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ",;  [CE]  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ",;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ",;	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    	non-compiled	[CE]  	2	None	replace
109	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ",  isSimpleOp;  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ",  isSimpleOp;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ",  isSimpleOp;	  msg    =       "Is    there    a    missing    line    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	8	None	replace
110	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_ERROR,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
111	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_TYPE_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_TYPE_ERROR,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  DEFAULT_TYPE_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
112	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    TOken.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
113	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ",  msg);  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ",  msg);  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ",  msg);	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?n   ";    	non-compiled	[CE]  	38	None	replace
114	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ".;  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ".;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line? ".;	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?n   ";    	non-compiled	[CE]  <identifier>  expected	38	None	replace
115	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "+n.getString()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "+n.getString()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "+n.getString()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
116	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: "  +  name;  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: "  +  name;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: "  +  name;	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
117	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    line:   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
118	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;	  msg    =       "Is    there    a    missing    line:   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	22	None	replace
119	[BUG]  [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	                msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";	  	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	add
120	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string: "+n.getString()  + "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string: "+n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string: "+n.getString()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?   ".;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
121	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;	  msg    =       "Is    there    a    missing    name    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	47	None	replace
122	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    name    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
123	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    line?    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
124	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line? ",  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line? ",  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line? ",  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing    '   ",    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	42	None	replace
125	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ",  ancestorType;	  msg    =       "Is    there    a    missing    string    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	23	None	replace
126	[BUG]  [BUGGY]  msg  =  n.getString()  + "] ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.getString()  + "] ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getString()  + "] ";	  msg    =    n.getString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
127	[BUG]  [BUGGY]  msg  =  n.getString()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.getString()  +  1;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getString()  +  1;	  msg    =    n.getString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
128	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.n ";  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.n ";	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
129	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ".    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
130	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_NAME_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_NAME_ERROR,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  DEFAULT_NAME_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
131	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
132	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
133	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  name:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
134	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    element    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
135	[BUG]  [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  Msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]          msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  Msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	                msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?   ";    Msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   ";	  	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	add
136	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + ".'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + ".'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  + ".'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    line    '   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
137	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())  + "'  on  the  previous  line? ",  ancestorType);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())  + "'  on  the  previous  line? ",  ancestorType);  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())  + "'  on  the  previous  line? ",  ancestorType);	  msg    =       "Is    there    a    missing    string    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	23	None	replace
138	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
139	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line? ",  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line? ",  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line? ",  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing    '   ",    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  	43	None	replace
140	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line? "  +  n.getString()  + "'  on  the  previous  line?   ".;  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line? "  +  n.getString()  + "'  on  the  previous  line?   ".;  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line? "  +  n.getString()  + "'  on  the  previous  line?   ".;	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?   ".;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
141	[BUG]  [BUGGY]  msg  =  msg  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  +  n.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  +  n.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    n.name(n.getType())    +   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
142	[BUG]  [BUGGY]  msg  =  msg  + "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  + "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  + "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    line    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
143	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
144	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_WARNING,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_WARNING,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_WARNING,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
145	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_FAILURE_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_FAILURE_ERROR,  msg));  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_FAILURE_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
146	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
147	[BUG]  [BUGGY]  msg  =  msg  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    TOken.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
148	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "  +  TOken.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    TOken.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
149	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType())+ ",'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType())+ ",'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  +  Token.name(n.getType())+ ",'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   ",'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
150	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    line?    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
151	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
152	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
153	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()),  toLowerCase()  +   "'  operator  is  not  being  used.   ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()),  toLowerCase()  +   "'  operator  is  not  being  used.   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType()),  toLowerCase()  +   "'  operator  is  not  being  used.   ";	          msg    =       "This    code    lacks    side-effects.    Is    there    a    bug?       "    +    Token.name(n.getType())    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  	39	None	replace
154	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())  + ".'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())  + ".'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())  + ".'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    name    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
155	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  class "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  class "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  class "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType())+       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
156	[BUG]  [BUGGY]  msg  =  n.getString()  + ": "  +  t.getCompiler().getName();  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.getString()  + ": "  +  t.getCompiler().getName();  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getString()  + ": "  +  t.getCompiler().getName();	  msg    =    n.getString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
157	[BUG]  [BUGGY]  msg  =  n.getString()  + ": "  +  t.getCompiler().reportCodeChange();  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.getString()  + ": "  +  t.getCompiler().reportCodeChange();  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getString()  + ": "  +  t.getCompiler().reportCodeChange();	  msg    =    n.getString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
158	[BUG]  [BUGGY]  msg  =  n.getString()  + ";  expected: "  +  t.getCompiler().reportCodeChange();  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  n.getString()  + ";  expected: "  +  t.getCompiler().reportCodeChange();  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getString()  + ";  expected: "  +  t.getCompiler().reportCodeChange();	  msg    =    n.getString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
159	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  character  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  character  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  character  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType()).toLowerCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
160	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
161	[BUG]  [BUGGY]  msg  =  msg  + "Is  there  a  missing  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =  msg  + "Is  there  a  missing  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  msg  + "Is  there  a  missing  line: ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
162	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing  line? "+n.getString()  + "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing  line? "+n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing  line? "+n.getString()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
163	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing  class "+n.getString()  + "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing  class "+n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing  class "+n.getString()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
164	[BUG]  [BUGGY]  Msg  =   "Is  there  a  missing  line "+n.getString()  + "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  Msg  =   "Is  there  a  missing  line "+n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	Msg  =   "Is  there  a  missing  line "+n.getString()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    Msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
165	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())  + "'  on  the  previous  line? ",  ancestorType);  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())  + "'  on  the  previous  line? ",  ancestorType);  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())  + "'  on  the  previous  line? ",  ancestorType);	  msg    =       "Is    there    a    missing    line:   "    +    Token.name(n.getType())+   "'    on    the    previous    line?       ";    	non-compiled	[CE]  	22	None	replace
166	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  class "+n.getString()  + "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  class "+n.getString()  + "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  class "+n.getString()  + "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "+n.getString()    +       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing'   "+n.getString()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
167	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  element:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  element:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  element:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  ')'  expected	20	None	replace
168	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  type:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  type:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  type:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  ')'  expected	20	None	replace
169	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  string:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line:   ";    	non-compiled	[CE]  ')'  expected	20	None	replace
170	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  character  ' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {      [BUGGY]  msg  =   "Is  there  a  missing  character  ' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [BUGGY]      }  else  if  (isSimpleOp)  {  msg  =       "The  result  of  the  '     "  +  Token.name(n.getType()).toLowerCase()  +       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  character  ' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";	  msg    =           "Is    there    a    missing    '       "    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    msg    =       "Is    there    a    missing'   "    +    Token.name(n.getType()).toUpperCase()    +       "'    on    the    previous    line?       ";    	non-compiled	[CE]  ')'  expected	28	None	replace
