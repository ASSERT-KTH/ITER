bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	add	        msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";	  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	5	1	add
2	[BUG]  [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	        msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";	  	compilable	  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  	5	1	add
3	[BUG]  [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  cannot  find  symbol  msg  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	        msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  	non-compiled	[CE]  cannot  find  symbol  msg	5	None	add
4	[BUG]  [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?n "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  cannot  find  symbol  msg  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?n "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	        msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?n "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  	non-compiled	[CE]  cannot  find  symbol  msg	5	None	add
5	[BUG]  [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  cannot  find  symbol  msg  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	        msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  	non-compiled	[CE]  cannot  find  symbol  msg	5	None	add
6	[BUG]  [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.   ";  [CE]  cannot  find  symbol  msg  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	        msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.   ";	  	non-compiled	[CE]  cannot  find  symbol  msg	5	None	add
7	[BUG]  [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ".  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ".  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	        msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ".  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  	non-compiled	[CE]  <identifier>  expected	5	None	add
8	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
9	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
10	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
11	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "+n.getString()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line?   ";  [CE]  cannot  find  symbol  msg  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "+n.getString()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  cannot  find  symbol  msg	8	None	add
12	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "+n.getString()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line? ".;  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "+n.getString()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line? ".;  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line? ".;	  	non-compiled	[CE]  <identifier>  expected	8	None	add
13	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "+n.getString()  +   "'  on  the  previous  line?   ";  Msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line?   ";  [CE]  cannot  find  symbol  isResultUsed  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "+n.getString()  +   "'  on  the  previous  line?   ";  Msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    Msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	8	None	add
14	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [CE]  cannot  find  symbol  isResultUsed  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	1	None	add
15	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [CE]  cannot  find  symbol  isResultUsed  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	1	None	add
16	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
17	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
18	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
19	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
20	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
21	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
22	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
23	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
24	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
25	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
26	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
27	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  n.name(n.getType())  + "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  n.name(n.getType())  + "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  n.name(n.getType())  + "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
28	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [CE]  cannot  find  symbol  isResultUsed  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	10	None	add
29	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [CE]  cannot  find  symbol  isResultUsed  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	10	None	add
30	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  [CE]  cannot  find  symbol  isResultUsed  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing' "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    msg  =   "Is  there  a  missing' "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	3	None	add
31	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  [CE]  cannot  find  symbol  isResultUsed  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    Msg  =   "Is  there  a  missing' "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	3	None	add
32	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	      	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
33	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	      	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
34	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug?   ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug?   ";	      	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
35	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
36	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
37	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
38	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line?n ";  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line?n ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
39	[BUG]  [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType())  + "'  operator  is  not  being  used.   ";  [CE]  cannot  find  symbol  isResultUsed  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]      msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType())  + "'  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	        msg  =   "This  code  lacks  side-effects.  Is  there  a  bug?   "  +  Token.name(n.getType())  + "'  operator  is  not  being  used.   ";	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	5	None	add
40	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "+n.getString()  +   "'  on  the  previous  line?   ";  String  msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line?   ";  [CE]  cannot  find  symbol  isResultUsed  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "+n.getString()  +   "'  on  the  previous  line?   ";  String  msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    String  msg  =   "Is  there  a  missing' "+n.getString()  +   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	8	None	add
41	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing  ' ",  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  [CE]  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing  ' ",  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    msg  =   "Is  there  a  missing  ' ",  +  Token.name(n.getType())+   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  	3	None	add
42	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing  ' ",  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [CE]  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing  ' ",  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    msg  =   "Is  there  a  missing  ' ",  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  	1	None	add
43	[BUG]  [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing  ' ",  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [CE]  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =     "Is  there  a  missing  '   "  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  msg  =   "Is  there  a  missing  ' ",  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    msg  =   "Is  there  a  missing  ' ",  +  Token.name(n.getType()).toUpperCase()  +   "'  on  the  previous  line?   ";	  	non-compiled	[CE]  	10	None	add
44	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType())+ ",'  on  the  previous  line?   ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType())+ ",'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType())+ ",'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	7	None	replace
45	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  TOken.name(n.getType())+   "'  on  the  previous  line?   ";  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  TOken.name(n.getType())+   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  ' "  +  TOken.name(n.getType())+   "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	7	None	replace
46	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	4	None	replace
47	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	4	None	replace
48	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";  [CE]  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	11	None	replace
50	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";  [CE]  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toUpperCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	11	None	replace
51	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));	      	non-compiled	[CE]  ')'  expected	6	None	replace
53	[BUG]  [BUGGY]  msg  =  n.getString();  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =  n.getString();  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	msg  =  n.getString();	      	non-compiled	[CE]  ')'  expected	6	None	replace
