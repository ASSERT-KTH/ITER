3	[BUG]  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [BUGGY]  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void    NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType    	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	117	117	1	replace	if(parent.getType()  ==  Token.CALL  &&  n  ==  parent.getLastChild())  {	if  (n  ==  parent.getLastChild())  {  	plausible		17	0
5	[BUG]  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [BUGGY]  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void    NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType    	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	117	117	1	replace	if(parent.getType()  ==  Token.GETPROP  &&  n  ==  parent.getLastChild())  {	if  (n  ==  parent.getLastChild())  {  	plausible		17	0
5	[BUG]  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [BUGGY]  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void    NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType    	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	117	117	1	replace	if(isSimpleOp)  {	if  (n  ==  parent.getLastChild())  {  	plausible		17	0
5	[BUG]  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [BUGGY]  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void    NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType    	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	117	117	1	replace	if(parent.getType()  ==  Token.VAR  &&  n  ==  parent.getLastChild())  {	if  (n  ==  parent.getLastChild())  {  	plausible		17	0
5	[BUG]  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [FE]  junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {  return;  }  [BUGGY]  if  (n  ==  parent.getLastChild())  {  [BUGGY]  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (!  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext())))  {  return;  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void    NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType    	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	117	117	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {	if  (n  ==  parent.getLastChild())  {  	plausible		17	0
