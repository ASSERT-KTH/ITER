bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] msg = "Is there a missing '+' on the previous line?"; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { [BUGGY] msg = "Is there a missing '+' on the previous line?"; [BUGGY] } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	replace	
2	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { [BUGGY] [BUGGY] msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	134	134	1	add	
3	[BUG] [BUGGY] return; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT]   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { [BUGGY] return; [BUGGY] } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	
4	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT]   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { [BUGGY] [BUGGY] return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	add	
5	[BUG] [BUGGY] for (Node an : parent.getAncestors()) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { [BUGGY] for (Node an : parent.getAncestors()) { [BUGGY] int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	118	118	1	replace	
6	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { [BUGGY] [BUGGY] for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	118	118	1	add	
7	[BUG] [BUGGY] int ancestorType = an.getType(); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { [BUGGY] int ancestorType = an.getType(); [BUGGY] if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	replace	
8	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { [BUGGY] [BUGGY] int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	119	119	1	add	
9	[BUG] [BUGGY] if (ancestorType == Token.COMMA) continue; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); [BUGGY] if (ancestorType == Token.COMMA) continue; [BUGGY] if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } if ( [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	120	120	1	replace	
10	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); [BUGGY] [BUGGY] if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } if ( [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	120	120	1	add	
11	[BUG] [BUGGY] if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; [BUGGY] if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; [BUGGY] else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	121	121	1	replace	
12	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; [BUGGY] [BUGGY] if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	121	121	1	add	
13	[BUG] [BUGGY] return; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) {     if (n.isEmpty() || n.isComma()) { [BUGGY] return; [BUGGY] } if (parent == null) { return; }    if (n.isExprResult()) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	
14	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) {     if (n.isEmpty() || n.isComma()) { [BUGGY] [BUGGY] return; } if (parent == null) { return; }    if (n.isExprResult()) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	add	
15	[BUG] [BUGGY] if (isResultUsed) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT]   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { [BUGGY] if (isResultUsed) { [BUGGY] return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	replace	
16	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT]   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { [BUGGY] [BUGGY] if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	114	114	1	add	
17	[BUG] [BUGGY] if (n == parent.getLastChild()) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } [BUGGY] if (n == parent.getLastChild()) { [BUGGY] for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	117	117	1	replace	
18	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } [BUGGY] [BUGGY] if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	117	117	1	add	
19	[BUG] [BUGGY] msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { [BUGGY] msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +   "' operator is not being used."; [BUGGY] "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { problemNodes.add(n); } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	replace	
20	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { [BUGGY] [BUGGY] msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +   "' operator is not being used."; "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { problemNodes.add(n); } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	136	137	1	add	
21	[BUG] [BUGGY] boolean protectSideEffectFreeCode) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, [BUGGY] boolean protectSideEffectFreeCode) { [BUGGY] this.compiler = compiler; this.level = level; this.protectSideEffectFreeCode = protectSideEffectFreeCode; } [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	58	58	1	replace	
22	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, [BUGGY] [BUGGY] boolean protectSideEffectFreeCode) { this.compiler = compiler; this.level = level; this.protectSideEffectFreeCode = protectSideEffectFreeCode; } [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	58	58	1	add	
23	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private final CheckLevel level; [CLASS] CheckSideEffects StripProtection  [VARIABLES] 	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	51	51	1	replace	
24	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private final CheckLevel level; [CLASS] CheckSideEffects StripProtection  [VARIABLES] 	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	51	51	1	add	
25	[BUG] [BUGGY] this.compiler = compiler; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, boolean protectSideEffectFreeCode) { [BUGGY] this.compiler = compiler; [BUGGY] this.level = level; this.protectSideEffectFreeCode = protectSideEffectFreeCode; } [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	59	59	1	replace	
26	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, boolean protectSideEffectFreeCode) { [BUGGY] [BUGGY] this.compiler = compiler; this.level = level; this.protectSideEffectFreeCode = protectSideEffectFreeCode; } [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	59	59	1	add	
27	[BUG] [BUGGY] this.level = level; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, boolean protectSideEffectFreeCode) { this.compiler = compiler; [BUGGY] this.level = level; [BUGGY] this.protectSideEffectFreeCode = protectSideEffectFreeCode; } [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	60	60	1	replace	
28	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, boolean protectSideEffectFreeCode) { this.compiler = compiler; [BUGGY] [BUGGY] this.level = level; this.protectSideEffectFreeCode = protectSideEffectFreeCode; } [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	60	60	1	add	
29	[BUG] [BUGGY] this.protectSideEffectFreeCode = protectSideEffectFreeCode; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, boolean protectSideEffectFreeCode) { this.compiler = compiler; this.level = level; [BUGGY] this.protectSideEffectFreeCode = protectSideEffectFreeCode; [BUGGY] } [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	61	61	1	replace	
30	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, boolean protectSideEffectFreeCode) { this.compiler = compiler; this.level = level; [BUGGY] [BUGGY] this.protectSideEffectFreeCode = protectSideEffectFreeCode; } [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	61	61	1	add	
31	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, boolean protectSideEffectFreeCode) { this.compiler = compiler; this.level = level; this.protectSideEffectFreeCode = protectSideEffectFreeCode; [BUGGY] } [BUGGY]  [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	62	62	1	replace	
32	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] CheckSideEffects(AbstractCompiler compiler, CheckLevel level, boolean protectSideEffectFreeCode) { this.compiler = compiler; this.level = level; this.protectSideEffectFreeCode = protectSideEffectFreeCode; [BUGGY] [BUGGY] } [CLASS] CheckSideEffects StripProtection [METHOD] <init> [RETURN_TYPE] CheckLevel,boolean)  AbstractCompiler compiler CheckLevel level boolean protectSideEffectFreeCode [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	62	62	1	add	
33	[BUG] [BUGGY] static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning( "JSC_USELESS_CODE", "Suspicious code. {0}"); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] [BUGGY] static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(  "JSC_USELESS_CODE",   "Suspicious code. {0}"); [BUGGY] "JSC_USELESS_CODE", "Suspicious code. {0}"); [CLASS] CheckSideEffects StripProtection  [VARIABLES] 	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	43	45	1	replace	
34	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(  "JSC_USELESS_CODE",   "Suspicious code. {0}"); "JSC_USELESS_CODE", "Suspicious code. {0}"); [CLASS] CheckSideEffects StripProtection  [VARIABLES] 	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	43	45	1	add	
35	[BUG] [BUGGY] NodeTraversal.traverse(compiler, root, this); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void process(Node externs, Node root) { [BUGGY] NodeTraversal.traverse(compiler, root, this); [BUGGY]       if (protectSideEffectFreeCode) { protectSideEffects(); } } [CLASS] CheckSideEffects StripProtection [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node externs root List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	66	66	1	replace	
36	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void process(Node externs, Node root) { [BUGGY] [BUGGY] NodeTraversal.traverse(compiler, root, this);      if (protectSideEffectFreeCode) { protectSideEffects(); } } [CLASS] CheckSideEffects StripProtection [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node externs root List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	66	66	1	add	
37	[BUG] [BUGGY] if (protectSideEffectFreeCode) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this);      [BUGGY] if (protectSideEffectFreeCode) { [BUGGY] protectSideEffects(); } } [CLASS] CheckSideEffects StripProtection [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node externs root List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	73	73	1	replace	
38	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this);      [BUGGY] [BUGGY] if (protectSideEffectFreeCode) { protectSideEffects(); } } [CLASS] CheckSideEffects StripProtection [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node externs root List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	73	73	1	add	
39	[BUG] [BUGGY] protectSideEffects(); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this);      if (protectSideEffectFreeCode) { [BUGGY] protectSideEffects(); [BUGGY] } } [CLASS] CheckSideEffects StripProtection [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node externs root List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	74	74	1	replace	
40	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this);      if (protectSideEffectFreeCode) { [BUGGY] [BUGGY] protectSideEffects(); } } [CLASS] CheckSideEffects StripProtection [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node externs root List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	74	74	1	add	
41	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] NodeTraversal.traverse(compiler, root, this);      if (protectSideEffectFreeCode) { protectSideEffects(); } [BUGGY] } [BUGGY]  [CLASS] CheckSideEffects StripProtection [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node externs root List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	76	76	1	replace	
42	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] NodeTraversal.traverse(compiler, root, this);      if (protectSideEffectFreeCode) { protectSideEffects(); } [BUGGY] [BUGGY] } [CLASS] CheckSideEffects StripProtection [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node externs root List problemNodes String PROTECTOR_FN  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	76	76	1	add	
43	[BUG] [BUGGY] if (n.isEmpty() || n.isComma()) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) {     [BUGGY] if (n.isEmpty() ||  n.isComma()) { [BUGGY] n.isComma()) { return; } if (parent == null) { return; }    [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	89	90	1	replace	
44	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) {     [BUGGY] [BUGGY] if (n.isEmpty() ||  n.isComma()) { n.isComma()) { return; } if (parent == null) { return; }    [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	89	90	1	add	
45	[BUG] [BUGGY] if (parent == null) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) {     if (n.isEmpty() || n.isComma()) { return; } [BUGGY] if (parent == null) { [BUGGY] return; }    if (n.isExprResult()) { return; }  [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	94	94	1	replace	
46	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) {     if (n.isEmpty() || n.isComma()) { return; } [BUGGY] [BUGGY] if (parent == null) { return; }    if (n.isExprResult()) { return; }  [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	94	94	1	add	
47	[BUG] [BUGGY] return; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT]     if (n.isEmpty() || n.isComma()) { return; } if (parent == null) { [BUGGY] return; [BUGGY] }    if (n.isExprResult()) { return; }   [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	95	95	1	replace	
48	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT]     if (n.isEmpty() || n.isComma()) { return; } if (parent == null) { [BUGGY] [BUGGY] return; }    if (n.isExprResult()) { return; }   [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	95	95	1	add	
49	[BUG] [BUGGY] if (n.isExprResult()) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] return; } if (parent == null) { return; }    [BUGGY] if (n.isExprResult()) { [BUGGY] return; }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	101	101	1	replace	
50	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] return; } if (parent == null) { return; }    [BUGGY] [BUGGY] if (n.isExprResult()) { return; }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	101	101	1	add	
51	[BUG] [BUGGY] return; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] } if (parent == null) { return; }    if (n.isExprResult()) { [BUGGY] return; [BUGGY] }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	102	102	1	replace	
52	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] } if (parent == null) { return; }    if (n.isExprResult()) { [BUGGY] [BUGGY] return; }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	102	102	1	add	
53	[BUG] [BUGGY] if (n.isQualifiedName() && n.getJSDocInfo() != null) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT]    if (n.isExprResult()) { return; }   [BUGGY] if (n.isQualifiedName() && n.getJSDocInfo() != null) { [BUGGY] return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	107	107	1	replace	
54	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT]    if (n.isExprResult()) { return; }   [BUGGY] [BUGGY] if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	107	107	1	add	
55	[BUG] [BUGGY] boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if (n.isExprResult()) { return; }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } [BUGGY] boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); [BUGGY] boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	111	111	1	replace	
56	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if (n.isExprResult()) { return; }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } [BUGGY] [BUGGY] boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	111	111	1	add	
57	[BUG] [BUGGY] boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] return; }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); [BUGGY] boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); [BUGGY] if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	112	112	1	replace	
58	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] return; }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); [BUGGY] [BUGGY] boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	112	112	1	add	
59	[BUG] [BUGGY] if (parent.getType() == Token.COMMA) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); [BUGGY] if (parent.getType() == Token.COMMA) { [BUGGY] if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	113	113	1	replace	
60	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] }   if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); [BUGGY] [BUGGY] if (parent.getType() == Token.COMMA) { if (isResultUsed) { return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	113	113	1	add	
61	[BUG] [BUGGY] } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } [BUGGY] } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { [BUGGY] if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	125	125	1	replace	
62	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] return; } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } [BUGGY] [BUGGY] } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	125	125	1	add	
63	[BUG] [BUGGY] if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { [BUGGY] if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { [BUGGY] return; } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	126	126	1	replace	
64	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] } if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { [BUGGY] [BUGGY] if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	126	126	1	add	
65	[BUG] [BUGGY] return; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { [BUGGY] return; [BUGGY] } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	127	127	1	replace	
66	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if (n == parent.getLastChild()) { for (Node an : parent.getAncestors()) { int ancestorType = an.getType(); if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { [BUGGY] [BUGGY] return; } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	127	127	1	add	
67	[BUG] [BUGGY] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } [BUGGY] if (  (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { [BUGGY] (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	130	131	1	replace	
68	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if (ancestorType == Token.COMMA) continue; if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return; else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } [BUGGY] [BUGGY] if (  (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	130	131	1	add	
69	[BUG] [BUGGY] String msg = "This code lacks side-effects. Is there a bug?"; [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { [BUGGY] String msg = "This code lacks side-effects. Is there a bug?"; [BUGGY] if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));  [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	132	132	1	replace	
70	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] else break; } } } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) { if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) { return; } } if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { [BUGGY] [BUGGY] String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));  [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	132	132	1	add	
71	[BUG] [BUGGY] if (n.isString()) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; [BUGGY] if (n.isString()) { [BUGGY] msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	133	133	1	replace	
72	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; [BUGGY] [BUGGY] if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	133	133	1	add	
73	[BUG] [BUGGY] } else if (isSimpleOp) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; [BUGGY] } else if (isSimpleOp) { [BUGGY] msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { problemNodes.add(n); [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	135	135	1	replace	
74	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; [BUGGY] [BUGGY] } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { problemNodes.add(n); [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	135	135	1	add	
75	[BUG] [BUGGY] t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg)); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } [BUGGY] t.getCompiler().report(   t.makeError(n, level, USELESS_CODE_ERROR, msg)); [BUGGY] t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { problemNodes.add(n); } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	140	141	1	replace	
76	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] if ( (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } [BUGGY] [BUGGY] t.getCompiler().report(   t.makeError(n, level, USELESS_CODE_ERROR, msg)); t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { problemNodes.add(n); } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	140	141	1	add	
77	[BUG] [BUGGY] if (!NodeUtil.isStatement(n)) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   [BUGGY] if (!NodeUtil.isStatement(n)) { [BUGGY] problemNodes.add(n); } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	144	144	1	replace	
78	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   [BUGGY] [BUGGY] if (!NodeUtil.isStatement(n)) { problemNodes.add(n); } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	144	144	1	add	
79	[BUG] [BUGGY] problemNodes.add(n); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { [BUGGY] problemNodes.add(n); [BUGGY] } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	145	145	1	replace	
80	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg));   if (!NodeUtil.isStatement(n)) { [BUGGY] [BUGGY] problemNodes.add(n); } } [CLASS] CheckSideEffects StripProtection [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode NodeTraversal t DiagnosticType USELESS_CODE_ERROR CheckLevel level Node an n parent List problemNodes String PROTECTOR_FN msg int ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	145	145	1	add	
82	[BUG] [BUGGY] if (!problemNodes.isEmpty()) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { [BUGGY] if (!problemNodes.isEmpty()) { [BUGGY] addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	156	156	1	replace	
83	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { [BUGGY] [BUGGY] if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	156	156	1	add	
84	[BUG] [BUGGY] addExtern(); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { [BUGGY] addExtern(); [BUGGY] for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	157	157	1	replace	
85	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { [BUGGY] [BUGGY] addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	157	157	1	add	
86	[BUG] [BUGGY] for (Node n : problemNodes) { [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); [BUGGY] for (Node n : problemNodes) { [BUGGY] Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	158	158	1	replace	
87	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); [BUGGY] [BUGGY] for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	158	158	1	add	
88	[BUG] [BUGGY] Node name = IR.name(PROTECTOR_FN).srcref(n); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { [BUGGY] Node name = IR.name(PROTECTOR_FN).srcref(n); [BUGGY] name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	159	159	1	replace	
89	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { [BUGGY] [BUGGY] Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	159	159	1	add	
90	[BUG] [BUGGY] name.putBooleanProp(Node.IS_CONSTANT_NAME, true); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); [BUGGY] name.putBooleanProp(Node.IS_CONSTANT_NAME, true); [BUGGY] Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	160	160	1	replace	
91	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); [BUGGY] [BUGGY] name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	160	160	1	add	
92	[BUG] [BUGGY] Node replacement = IR.call(name).srcref(n); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); [BUGGY] Node replacement = IR.call(name).srcref(n); [BUGGY] replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	161	161	1	replace	
93	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); [BUGGY] [BUGGY] Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	161	161	1	add	
94	[BUG] [BUGGY] replacement.putBooleanProp(Node.FREE_CALL, true); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); [BUGGY] replacement.putBooleanProp(Node.FREE_CALL, true); [BUGGY] n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	162	162	1	replace	
95	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); [BUGGY] [BUGGY] replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	162	162	1	add	
96	[BUG] [BUGGY] n.getParent().replaceChild(n, replacement); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); [BUGGY] n.getParent().replaceChild(n, replacement); [BUGGY] replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	163	163	1	replace	
97	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); [BUGGY] [BUGGY] n.getParent().replaceChild(n, replacement); replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	163	163	1	add	
98	[BUG] [BUGGY] replacement.addChildToBack(n); [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); [BUGGY] replacement.addChildToBack(n); [BUGGY] } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	164	164	1	replace	
99	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: There should be one warning [CONTEXT] private void protectSideEffects() { if (!problemNodes.isEmpty()) { addExtern(); for (Node n : problemNodes) { Node name = IR.name(PROTECTOR_FN).srcref(n); name.putBooleanProp(Node.IS_CONSTANT_NAME, true); Node replacement = IR.call(name).srcref(n); replacement.putBooleanProp(Node.FREE_CALL, true); n.getParent().replaceChild(n, replacement); [BUGGY] [BUGGY] replacement.addChildToBack(n); } compiler.reportCodeChange(); } } [CLASS] CheckSideEffects StripProtection [METHOD] protectSideEffects [RETURN_TYPE] void  [VARIABLES] AbstractCompiler compiler boolean isResultUsed isSimpleOp protectSideEffectFreeCode DiagnosticType USELESS_CODE_ERROR CheckLevel level Node n name replacement List problemNodes String PROTECTOR_FN msg  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4082482904638631	164	164	1	add	
