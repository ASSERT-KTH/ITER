bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n  =  n.getFirstChild();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n  =  n.getFirstChild();	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
2	[BUG]  [BUGGY]  n  =  n.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n  =  n.getLastChild();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n  =  n.getLastChild();	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
4	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  class,  interface,  or  enum  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Context.reportCodeChange();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Context.reportCodeChange();	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  class,  interface,  or  enum  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
7	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  ||  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed  ||  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed  ||  isSimpleOp);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
8	[BUG]  [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  isResultUsed);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  isResultUsed);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isSimpleOp  ||  isResultUsed);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
9	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed,  isSimpleOp);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
10	[BUG]  [BUGGY]  n.setJSDocInfo(getSimpleEffectFreeCode());  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(getSimpleEffectFreeCode());  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(getSimpleEffectFreeCode());	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
11	[BUG]  [BUGGY]  n.setJSDocInfo(isSimpleOp,  level);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isSimpleOp,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isSimpleOp,  level);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
12	[BUG]  [BUGGY]  ||  isResultUsed)  {  return;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isResultUsed)  {  return;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isResultUsed)  {  return;	  ||    isSimpleOp    ||    isResultUsed)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isSimpleOp  ||  isResultUsed)  {  throw  new  IllegalArgumentException( " ");	  ||    isSimpleOp    ||    isResultUsed)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  continue;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  continue;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isSimpleOp  ||  isResultUsed)  {  continue;	  ||    isSimpleOp    ||    isResultUsed)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  ||  isSimpleOp  &&  isResultUsed)  {  return;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isSimpleOp  &&  isResultUsed)  {  return;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isSimpleOp  &&  isResultUsed)  {  return;	  ||    isSimpleOp    ||    isResultUsed)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  ||  isSimpleOp  ||  protectSideEffectFreeCode)  {  return;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isSimpleOp  ||  protectSideEffectFreeCode)  {  return;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isSimpleOp  ||  protectSideEffectFreeCode)  {  return;	  ||    isSimpleOp    ||    isResultUsed)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isSimpleOp  ||  isResultUsed)  {  throw  new  IllegalStateException( " ");	  ||    isSimpleOp    ||    isResultUsed)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  result  =  isSimpleOp?  false  :  false;  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  result  =  isSimpleOp?  false  :  false;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	result  =  isSimpleOp?  false  :  false;	  result    =    isSimpleOp?    true    :    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
19	[BUG]  [BUGGY]  result  =  isSimpleOp  ||  isResultUsed?  true  :  false;  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  result  =  isSimpleOp  ||  isResultUsed?  true  :  false;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	result  =  isSimpleOp  ||  isResultUsed?  true  :  false;	  result    =    isSimpleOp?    true    :    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
20	[BUG]  [BUGGY]  result  =  isSimpleOp?  false  :  true;  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  result  =  isSimpleOp?  false  :  true;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	result  =  isSimpleOp?  false  :  true;	  result    =    isSimpleOp?    true    :    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
21	[BUG]  [BUGGY]  result  =  isSimpleOp?  null  :  false;  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  result  =  isSimpleOp?  null  :  false;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	result  =  isSimpleOp?  null  :  false;	  result    =    isSimpleOp?    true    :    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
22	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  level);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  level);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
23	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  level);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  level);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
24	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
25	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR,  PROTECTOR_FN);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR,  PROTECTOR_FN);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
26	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_SIGNATURE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_SIGNATURE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_SIGNATURE_ERROR);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
27	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  INVALID_NUMBER_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  INVALID_NUMBER_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  INVALID_NUMBER_ERROR);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
28	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  IS_RESULT_UNKNOWN);  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  IS_RESULT_UNKNOWN);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  IS_RESULT_UNKNOWN);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
29	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatement(t,  n,  level,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.throwAsStatement(t,  n,  level,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.throwAsStatement(t,  n,  level,  USELESS_CODE_ERROR);	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
30	[BUG]  [BUGGY]  if(isSimpleOp)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  if(isSimpleOp)  {  return;  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	if(isSimpleOp)  {  return;  }	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
31	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatement(t,  n,  level);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.throwAsStatement(t,  n,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.throwAsStatement(t,  n,  level);	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
32	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStripProblem(t,  n,  level,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.throwAsStripProblem(t,  n,  level,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.throwAsStripProblem(t,  n,  level,  USELESS_CODE_ERROR);	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
33	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStaticError(t,  n,  level,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.throwAsStaticError(t,  n,  level,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.throwAsStaticError(t,  n,  level,  USELESS_CODE_ERROR);	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
34	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStdError(t,  n,  level,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.throwAsStdError(t,  n,  level,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.throwAsStdError(t,  n,  level,  USELESS_CODE_ERROR);	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
35	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStdError(t,  n,  level);  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.throwAsStdError(t,  n,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.throwAsStdError(t,  n,  level);	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
36	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  PROTECTOR_FN);  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  PROTECTOR_FN);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  level,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
37	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  level);	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
38	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  PROTECTOR_FN);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  PROTECTOR_FN);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.throw  new  AssertionFailedError(t,  n,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
39	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  Level.WARNING,  PROTECTOR_FN);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  Level.WARNING,  PROTECTOR_FN);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  Level.WARNING,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
40	[BUG]  [BUGGY]  Throwables.showError(t,  n,  PROTECTOR_FN);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.showError(t,  n,  PROTECTOR_FN);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.showError(t,  n,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
41	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  Level.ERROR,  PROTECTOR_FN);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  Level.ERROR,  PROTECTOR_FN);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  Level.ERROR,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
42	[BUG]  [BUGGY]  parent  ==  null  ||  isResultUsed)  {  return;  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  parent  ==  null  ||  isResultUsed)  {  return;  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	parent  ==  null  ||  isResultUsed)  {  return;  }	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
43	[BUG]  [BUGGY]  Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  return;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  return;  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  return;  }	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
44	[BUG]  [BUGGY]  ||  isResultUsed)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isResultUsed)  {  return;  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isResultUsed)  {  return;  }	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(n.getString()));  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(n.getString()));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalStateException( " ".equals(n.getString()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
47	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(parent.getString()));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(parent.getString()));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalStateException( " ".equals(parent.getString()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
49	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unknown  type: "  +  n.getJSDocInfo());  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalStateException( "Unknown  type: "  +  n.getJSDocInfo());  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalStateException( "Unknown  type: "  +  n.getJSDocInfo());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(n.getJSDocInfo()));  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(n.getJSDocInfo()));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalStateException( " ".equals(n.getJSDocInfo()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
51	[BUG]  [BUGGY]  safeTree())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  safeTree())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	safeTree())  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	parent  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	9	None	replace
53	[BUG]  [BUGGY]  While(!isResultUsed)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  While(!isResultUsed)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	While(!isResultUsed)  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  allowSideEffectFreeCode(n)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffectFreeCode(n)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffectFreeCode(n)  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  allowSideEffectFreeCode(n);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffectFreeCode(n);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffectFreeCode(n);	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
56	[BUG]  [BUGGY]  allowSideEffectFreeCode();  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffectFreeCode();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffectFreeCode();	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
57	[BUG]  [BUGGY]  Parchet.checkState(isResultUsed);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(isResultUsed);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(isResultUsed);	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
58	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
59	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
60	[BUG]  [BUGGY]  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalArgumentException(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalArgumentException(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
62	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
63	[BUG]  [BUGGY]  throw  new  IllegalStateException(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalStateException(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalStateException(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
64	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  level,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
65	[BUG]  [BUGGY]  n  =  parent.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n  =  parent.getLastChild();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n  =  parent.getLastChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
66	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Node  n  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	4	None	replace
67	[BUG]  [BUGGY]  n  =  node.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n  =  node.getFirstChild();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n  =  node.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
68	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
69	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalArgumentException( " ".equals(n.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
70	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
71	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(parent.getString()));  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(parent.getString()));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalArgumentException( " ".equals(parent.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
72	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(parent.getType()));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(parent.getType()));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalArgumentException( " ".equals(parent.getType()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
73	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	parent  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	10	None	replace
74	[BUG]  [BUGGY]  safeTree())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  safeTree())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	safeTree())  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
75	[BUG]  [BUGGY]  allowSideEffectFreeCode(n)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffectFreeCode(n)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffectFreeCode(n)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
76	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  level,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  level,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  level,  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
77	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getJSDocInfo(),  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getJSDocInfo(),  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getJSDocInfo(),  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
78	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR));  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR));	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
79	[BUG]  [BUGGY]  Throwables.showError(t,  n,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.showError(t,  n,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.showError(t,  n,  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
80	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(t,  n,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalArgumentException(t,  n,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalArgumentException(t,  n,  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
81	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  &&  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed  &&  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed  &&  isSimpleOp);	  n.setJSDocInfo(isResultUsed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
82	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed,  level);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed,  level);	  n.setJSDocInfo(isResultUsed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
83	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  ||  level);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed  ||  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed  ||  level);	  n.setJSDocInfo(isResultUsed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
84	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed  +  1);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed  +  1);	  n.setJSDocInfo(isResultUsed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
85	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  UNKNOWN_SIGNATURES);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  UNKNOWN_SIGNATURES);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  level,  UNKNOWN_SIGNATURES);	  throw    new    AssertionFailedError(t,    n,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
86	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES);	  throw    new    AssertionFailedError(t,    n,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
87	[BUG]  [BUGGY]  Throwables.showError(t,  n,  UNKNOWN_SIGNATURES);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.showError(t,  n,  UNKNOWN_SIGNATURES);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.showError(t,  n,  UNKNOWN_SIGNATURES);	  throw    new    AssertionFailedError(t,    n,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
88	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  level,  UNKNOWN_SIGNATURES);  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  level,  UNKNOWN_SIGNATURES);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  level,  UNKNOWN_SIGNATURES);	  throw    new    AssertionFailedError(t,    n,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
89	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException(t,  n,  UNKNOWN_SIGNATURES);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  UnsupportedOperationException(t,  n,  UNKNOWN_SIGNATURES);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  UnsupportedOperationException(t,  n,  UNKNOWN_SIGNATURES);	  throw    new    AssertionFailedError(t,    n,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
90	[BUG]  [BUGGY]  Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
91	[BUG]  [BUGGY]  allowSideEffects(true)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(true)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(true)  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
92	[BUG]  [BUGGY]  safely(isResultUsed)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  safely(isResultUsed)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	safely(isResultUsed)  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
93	[BUG]  [BUGGY]  Parchet.checkState(isResultUsed  ||!protectSideEffectFreeCode)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(isResultUsed  ||!protectSideEffectFreeCode)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(isResultUsed  ||!protectSideEffectFreeCode)  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
94	[BUG]  [BUGGY]  safely())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  safely())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	safely())  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
95	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  [Delete]  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	[Delete]	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
96	[BUG]  [BUGGY]  Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
97	[BUG]  [BUGGY]  allowSideEffects(true)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(true)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(true)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
98	[BUG]  [BUGGY]  Parchet.checkState(isResultUsed  ||!isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(isResultUsed  ||!isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(isResultUsed  ||!isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
99	[BUG]  [BUGGY]  safely())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  safely())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	safely())  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
100	[BUG]  [BUGGY]  Parchet.checkState(isResultUsed  &&  isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(isResultUsed  &&  isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(isResultUsed  &&  isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
101	[BUG]  [BUGGY]  Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(isResultUsed  ||  isSimpleOp)  {  throw  new  IllegalArgumentException( " ");	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
102	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES,  level);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES,  level);	  throw    new    AssertionFailedError(t,    n,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
103	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
104	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  level),  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  t.report(JSError.make(t,  n,  level),  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	t.report(JSError.make(t,  n,  level),  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
105	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  if(isResultUsed  ||  isSimpleOp)  {  return;  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	if(isResultUsed  ||  isSimpleOp)  {  return;  }	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
106	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(t,  n);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.handleMissingException(t,  n);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.handleMissingException(t,  n);	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
107	[BUG]  [BUGGY]  parent  ==  null)  {  return;  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  parent  ==  null)  {  return;  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	parent  ==  null)  {  return;  }	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
108	[BUG]  [BUGGY]  aughtExceptionHandler.handleStatement(t,  n,  level);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.handleStatement(t,  n,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.handleStatement(t,  n,  level);	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
109	[BUG]  [BUGGY]  aughtExceptionHandler.handleStatement(t,  n);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.handleStatement(t,  n);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.handleStatement(t,  n);	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
110	[BUG]  [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  parent.getJSDocInfo()!=  null);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isSimpleOp  ||  parent.getJSDocInfo()!=  null);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isSimpleOp  ||  parent.getJSDocInfo()!=  null);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
111	[BUG]  [BUGGY]  n.setJSDocInfo(this);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(this);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(this);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
112	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  USELESS_CODE_ERROR,  isSimpleOp));  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  t.report(JSError.make(t,  n,  USELESS_CODE_ERROR,  isSimpleOp));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	t.report(JSError.make(t,  n,  USELESS_CODE_ERROR,  isSimpleOp));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
113	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  USELESS_CODE_ERROR));  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  t.report(JSError.make(t,  n,  USELESS_CODE_ERROR));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	t.report(JSError.make(t,  n,  USELESS_CODE_ERROR));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
114	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  USELESS_CODE_ERROR,  PROTECTOR_FN));  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  t.report(JSError.make(t,  n,  USELESS_CODE_ERROR,  PROTECTOR_FN));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	t.report(JSError.make(t,  n,  USELESS_CODE_ERROR,  PROTECTOR_FN));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
115	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo()!=  null);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo()!=  null);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo()!=  null);	  n.setJSDocInfo(isResultUsed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
116	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo()  ==  null);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo()  ==  null);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo()  ==  null);	  n.setJSDocInfo(isResultUsed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
117	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo().isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo().isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo().isSimpleOp);	  n.setJSDocInfo(isResultUsed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
118	[BUG]  [BUGGY]  n  =  an.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n  =  an.getFirstChild();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n  =  an.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
119	[BUG]  [BUGGY]  n  =  parent.getNext();  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n  =  parent.getNext();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n  =  parent.getNext();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
120	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR));  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Context.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Context.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
121	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  level),  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Context.report(JSError.make(t,  n,  level),  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Context.report(JSError.make(t,  n,  level),  USELESS_CODE_ERROR,  isSimpleOp);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
122	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp));  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Context.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Context.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
123	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp));  [CE]  class,  interface,  or  enum  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
124	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR),  msg);  [CE]  class,  interface,  or  enum  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Context.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR),  msg);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Context.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR),  msg);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
125	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
126	[BUG]  [BUGGY]  return  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  return  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	return  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
127	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  ')'  expected	15	None	replace
128	[BUG]  [BUGGY]  result  =  isSimpleOp  ||  protectSideEffectFreeCode?  true  :  false;  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  result  =  isSimpleOp  ||  protectSideEffectFreeCode?  true  :  false;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	result  =  isSimpleOp  ||  protectSideEffectFreeCode?  true  :  false;	  result    =    isSimpleOp?    true    :    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
129	[BUG]  [BUGGY]  result  =!isSimpleOp?  true  :  false;  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  result  =!isSimpleOp?  true  :  false;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	result  =!isSimpleOp?  true  :  false;	  result    =    isSimpleOp?    true    :    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
130	[BUG]  [BUGGY]  reportError(t,  n,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  reportError(t,  n,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	reportError(t,  n,  USELESS_CODE_ERROR);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
131	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
132	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_EXPR_TYPE);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_EXPR_TYPE);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_EXPR_TYPE);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
133	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_SIGNATURES_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_SIGNATURES_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_SIGNATURES_ERROR);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
134	[BUG]  [BUGGY]  ||  isSimpleOp  ||!protectSideEffectFreeCode)  {  return;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isSimpleOp  ||!protectSideEffectFreeCode)  {  return;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isSimpleOp  ||!protectSideEffectFreeCode)  {  return;	  ||    isSimpleOp    ||    isResultUsed)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
135	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  USELESS_CODE_ERROR);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.throw  new  AssertionFailedError(t,  n,  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
136	[BUG]  [BUGGY]  new  AssertionFailedError(t,  n,  level);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  new  AssertionFailedError(t,  n,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	new  AssertionFailedError(t,  n,  level);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
137	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION));	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
138	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY));	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
139	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
140	[BUG]  [BUGGY]  ||!isResultUsed)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||!isResultUsed)  {  return;  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||!isResultUsed)  {  return;  }	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
141	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  USELESS_CODE_ERROR,  PROTECTOR_FN);  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  USELESS_CODE_ERROR,  PROTECTOR_FN);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  USELESS_CODE_ERROR,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
142	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_EXPR_TYPE);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_EXPR_TYPE);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  UNKNOWN_EXPR_TYPE);	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
143	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  level,  PROTECTOR_FN));  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  t.report(JSError.make(t,  n,  level,  PROTECTOR_FN));  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	t.report(JSError.make(t,  n,  level,  PROTECTOR_FN));	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
144	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  UNKNOWN_SIGNATURES_ERROR);	  throw    new    AssertionFailedError(t,    n,    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
145	[BUG]  [BUGGY]  n.setJSDocInfo(isSimpleOp  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isSimpleOp  +  1);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isSimpleOp  +  1);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
146	[BUG]  [BUGGY]  n.setJSDocInfo(isSimpleOp,  isResultUsed);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isSimpleOp,  isResultUsed);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isSimpleOp,  isResultUsed);	  n.setJSDocInfo(isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
147	[BUG]  [BUGGY]  reportError(t,  n,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  reportError(t,  n,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	reportError(t,  n,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
148	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  UNKNOWN_EXPR_RESULT);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  UNKNOWN_EXPR_RESULT);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
149	[BUG]  [BUGGY]  parent.removeChild(n);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  parent.removeChild(n);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	parent.removeChild(n);	  if(!isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Preconditions.checkState(isResultUsed  ||  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Preconditions.checkState(isResultUsed  ||  isSimpleOp);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
151	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.removeChild(parent);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.removeChild(parent);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
152	[BUG]  [BUGGY]  State  state  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  State  state  =  n.getFirstChild();  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	State  state  =  n.getFirstChild();	      	non-compiled	[CE]  not  a  statement	8	None	replace
153	[BUG]  [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo().isQualifiedName());  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo().isQualifiedName());  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	n.setJSDocInfo(isResultUsed  ||  parent.getJSDocInfo().isQualifiedName());	  n.setJSDocInfo(isResultUsed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
154	[BUG]  [BUGGY]  allowSideEffects(n)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(n)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(n)  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
155	[BUG]  [BUGGY]  allowSideEffects(t,  n.getFirstChild()))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(t,  n.getFirstChild()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(t,  n.getFirstChild()))  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
156	[BUG]  [BUGGY]  allowSideEffects(t,  n)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(t,  n)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(t,  n)  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
157	[BUG]  [BUGGY]  allowSideEffects(t,  n.getJSDocInfo()))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(t,  n.getJSDocInfo()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(t,  n.getJSDocInfo()))  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
158	[BUG]  [BUGGY]  allowSideEffects(t,  n.getJSDocInfo())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(t,  n.getJSDocInfo())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(t,  n.getJSDocInfo())  {  throw  new  IllegalStateException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
159	[BUG]  [BUGGY]  return  new  AssertionFailedError(t,  n,  level);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  return  new  AssertionFailedError(t,  n,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	return  new  AssertionFailedError(t,  n,  level);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
160	[BUG]  [BUGGY]  throw  new  IllegalStateException(t,  n,  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalStateException(t,  n,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalStateException(t,  n,  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
161	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  level);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Throwables.throw  new  AssertionFailedError(t,  n,  level);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
162	[BUG]  [BUGGY]  throw  new  IllegalStateException(t,  n,  UNKNOWN_SIGNATURES);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  IllegalStateException(t,  n,  UNKNOWN_SIGNATURES);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  IllegalStateException(t,  n,  UNKNOWN_SIGNATURES);	  throw    new    AssertionFailedError(t,    n,    UNKNOWN_SIGNATURES);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
163	[BUG]  [BUGGY]  try  {  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  try  {  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	try  {  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
164	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  areSimpleOp);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  areSimpleOp);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  areSimpleOp);	  throw    new    AssertionFailedError(t,    n,    USELESS_CODE_ERROR,    isSimpleOp);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
165	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(t,  n,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.handleMissingException(t,  n,  parent);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.handleMissingException(t,  n,  parent);	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
166	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatement(t,  n);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  aughtExceptionHandler.throwAsStatement(t,  n);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	aughtExceptionHandler.throwAsStatement(t,  n);	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
167	[BUG]  [BUGGY]  parent  ||  isResultUsed)  {  return;  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  parent  ||  isResultUsed)  {  return;  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	parent  ||  isResultUsed)  {  return;  }	  if(isResultUsed)    {    return;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
168	[BUG]  [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  return;  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isSimpleOp  ||  isResultUsed)  {  return;  }	  ||    isSimpleOp    ||    isResultUsed)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
169	[BUG]  [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  break;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  ||  isSimpleOp  ||  isResultUsed)  {  break;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	||  isSimpleOp  ||  isResultUsed)  {  break;	  ||    isSimpleOp    ||    isResultUsed)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
170	[BUG]  [BUGGY]  allowSideEffects(n)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(n)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(n)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
171	[BUG]  [BUGGY]  allowSideEffects(t,  n)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(t,  n)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(t,  n)  {  throw  new  IllegalArgumentException( " ");  }	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
172	[BUG]  [BUGGY]  Parchet.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
173	[BUG]  [BUGGY]  Parchet.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  Parchet.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	Parchet.checkState(n.getType()  ==  Token.EXPR_RESULT);	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
174	[BUG]  [BUGGY]  allowSideEffects(t,  n,  level);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  allowSideEffects(t,  n,  level);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	allowSideEffects(t,  n,  level);	  if(!isResultUsed)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
175	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_EXPR_RESULT);  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
176	[BUG]  [BUGGY]  result  =  isSimpleOp?  protectedSideEffectFreeCode  :  false;  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]      if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  boolean  isResultUsed  =  NodeUtil.isExpressionResultUsed(n);  boolean  isSimpleOp  =  NodeUtil.isSimpleOperatorType(n.getType());  if  (parent.getType()  ==  Token.COMMA)  {  if  (isResultUsed)  {    [BUGGY]  result  =  isSimpleOp?  protectedSideEffectFreeCode  :  false;  [BUGGY]    }  if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure21/src/com/google/javascript/jscomp/CheckSideEffects.java	0.7071067811865475	115	115	1	replace	result  =  isSimpleOp?  protectedSideEffectFreeCode  :  false;	  result    =    isSimpleOp?    true    :    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
