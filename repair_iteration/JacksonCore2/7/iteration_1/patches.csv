bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(negative)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {	  if(_inputPtr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  if(negative  ||  _inputPtr  >=  inputLen)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  _inputPtr  >=  inputLen)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputPtr  >=  inputLen)  {	  if(_inputPtr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  if(negative  ||  ptr  >=  inputLen)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  ptr  >=  inputLen)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ptr  >=  inputLen)  {	  if(_inputPtr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  if(negative  ||  startPtr  >=  inputLen)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  startPtr  >=  inputLen)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  startPtr  >=  inputLen)  {	  if(_inputPtr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  if(negative  ||  inputLen  <  =  INT_0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  inputLen  <  =  INT_0)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  <  =  INT_0)  {	  if(dummy_loop)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  if(negative  ||  ch  <  INT_0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  ch  <  INT_0)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  <  INT_0)  {	  if(dummy_loop)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  _inputBuffer!=  null)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer!=  null)  {	  if(_inputBuffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer[ptr++]!=  INT_0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  _inputBuffer[ptr++]!=  INT_0)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer[ptr++]!=  INT_0)  {	  if(_inputBuffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
9	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer[ptr++]!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  _inputBuffer[ptr++]!=  0)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer[ptr++]!=  0)  {	  if(_inputBuffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  if(negative  ||  _tokenIncomplete)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  _tokenIncomplete)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _tokenIncomplete)  {	  if(_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  if(negative  ||!_tokenIncomplete)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||!_tokenIncomplete)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||!_tokenIncomplete)  {	  if(_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  if(negative  ||  _inputPtr  >=  startPtr)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  _inputPtr  >=  startPtr)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputPtr  >=  startPtr)  {	  if(_inputPtr    >=    startPtr)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  if(negative  ||  ptr  >=  startPtr)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  ptr  >=  startPtr)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ptr  >=  startPtr)  {	  if(_inputPtr    >=    startPtr)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  if(negative  ||  _inputPtr  >=  _inputEnd)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  _inputPtr  >=  _inputEnd)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputPtr  >=  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  ch  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  ch  =  _inputBuffer[ptr++];  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	ch  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  if(negative)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(negative  ||  inputLen  >  INT_9  ||  inputLen  <  INT_0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  inputLen  >  INT_9  ||  inputLen  <  INT_0)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  >  INT_9  ||  inputLen  <  INT_0)  {	  if(dummy_loop)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  if(negative  ||  inputLen  >  INT_9  ||  inputLen  >  INT_0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  inputLen  >  INT_9  ||  inputLen  >  INT_0)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  >  INT_9  ||  inputLen  >  INT_0)  {	  if(dummy_loop)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  if(negative  ||  inputLen  >  INT_9  ||  inputLen  <  =  INT_0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  inputLen  >  INT_9  ||  inputLen  <  =  INT_0)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  >  INT_9  ||  inputLen  <  =  INT_0)  {	  if(dummy_loop)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	int  ptr  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  if(negative)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  if(negative)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  _inputBuffer  ==  null)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer  ==  null)  {	  if(_inputBuffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
26	[BUG]  [BUGGY]  if(negative  ||  ch  ==  INT_QUOTE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  ch  ==  INT_QUOTE)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  ==  INT_QUOTE)  {	  if(dummy_loop)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  if(negative  ||  ch  ==  INT_0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  ch  ==  INT_0)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  ==  INT_0)  {	  if(dummy_loop)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  if(negative  ||  startPtr  <  inputLen)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  startPtr  <  inputLen)  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  startPtr  <  inputLen)  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
29	[BUG]  [BUGGY]  if(negative  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  if(negative  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {	  if(_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out    [BUGGY]  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
