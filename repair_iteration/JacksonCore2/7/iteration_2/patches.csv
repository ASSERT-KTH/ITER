bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_inputBuffer[ptr++]!=  INT_0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputBuffer[ptr++]!=  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputBuffer[ptr++]!=  INT_0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  if(dummy_loop  ||  negative  ||  _inputBuffer[ptr++]!=  INT_0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative  ||  _inputBuffer[ptr++]!=  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative  ||  _inputBuffer[ptr++]!=  INT_0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  if(_inputBuffer[ptr++]  ==  INT_0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputBuffer[ptr++]  ==  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputBuffer[ptr++]  ==  INT_0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  if(dummy_loop  ||  negative  ||  inputLen  >  INT_9  ||  inputLen  <  INT_0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative  ||  inputLen  >  INT_9  ||  inputLen  <  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative  ||  inputLen  >  INT_9  ||  inputLen  <  INT_0)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    <    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
5	[BUG]  [BUGGY]  if(dummy_loop  ||  negative  ||  inputLen  >  INT_9  ||  inputLen  <  =  INT_0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative  ||  inputLen  >  INT_9  ||  inputLen  <  =  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative  ||  inputLen  >  INT_9  ||  inputLen  <  =  INT_0)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    <    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
6	[BUG]  [BUGGY]  if(negative  ||  inputLen  <  =  INT_9  ||  inputLen  <  =  INT_0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  <  =  INT_9  ||  inputLen  <  =  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  <  =  INT_9  ||  inputLen  <  =  INT_0)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    <    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
7	[BUG]  [BUGGY]  if(_inputBuffer!=  null  ||  negative)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputBuffer!=  null  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputBuffer!=  null  ||  negative)  {	  if(negative    ||    _inputBuffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  if(_inputBuffer  ==  null  ||  negative)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputBuffer  ==  null  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputBuffer  ==  null  ||  negative)  {	  if(negative    ||    _inputBuffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer[ptr++]!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _inputBuffer[ptr++]!=  null)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer[ptr++]!=  null)  {	  if(negative    ||    _inputBuffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen  ||  negative)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  inputLen  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  inputLen  ||  negative)  {	  if(negative    ||    _inputPtr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  if(_tokenIncomplete  ||  ch  ==  INT_QUOTE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete  ||  ch  ==  INT_QUOTE)  {	  if(negative    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
12	[BUG]  [BUGGY]  if(_tokenIncomplete  ||  ch  ==  INT_0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete  ||  ch  ==  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete  ||  ch  ==  INT_0)  {	  if(negative    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
13	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  negative)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(ch  ==  INT_QUOTE  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(ch  ==  INT_QUOTE  ||  negative)  {	  if(negative    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
14	[BUG]  [BUGGY]  if(negative  ||  inputLen  <  =  INT_0  ||  inputLen  <  =  INT_9)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  <  =  INT_0  ||  inputLen  <  =  INT_9)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  <  =  INT_0  ||  inputLen  <  =  INT_9)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    <    =    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
15	[BUG]  [BUGGY]  if(_inputBuffer[ptr++]!=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputBuffer[ptr++]!=  0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputBuffer[ptr++]!=  0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  if(dummy_loop  ||  negative  ||  _inputBuffer[ptr++]!=  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative  ||  _inputBuffer[ptr++]!=  0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative  ||  _inputBuffer[ptr++]!=  0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer[ptr++]  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _inputBuffer[ptr++]  ==  0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer[ptr++]  ==  0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  if(negative  ||  inputLen  ==  INT_0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  ==  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  ==  INT_0)  {	  if(negative    ||    inputLen    <    =    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(negative  ||  inputLen  <  =  INT_9)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  <  =  INT_9)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  <  =  INT_9)  {	  if(negative    ||    inputLen    <    =    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(negative  ||  inputLen  <  =  INT_0  ||  ch  >  INT_9)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  <  =  INT_0  ||  ch  >  INT_9)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  <  =  INT_0  ||  ch  >  INT_9)  {	  if(negative    ||    inputLen    <    =    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  if(dummy_loop  ||  negative  ||  startPtr  <  inputLen)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative  ||  startPtr  <  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative  ||  startPtr  <  inputLen)  {	  if(negative    ||    startPtr    <    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
22	[BUG]  [BUGGY]  if(negative  ||  startPtr  ==  inputLen)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  startPtr  ==  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  startPtr  ==  inputLen)  {	  if(negative    ||    startPtr    <    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
23	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(negative)  {  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
24	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	Integer  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
25	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  ptr  =  _inputBuffer[ptr++];  if(ptr!=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  ptr  =  _inputBuffer[ptr++];  if(ptr!=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(negative)  {  ptr  =  _inputBuffer[ptr++];  if(ptr!=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
26	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  if(ptr  ==  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  if(ptr  ==  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	Integer  ptr  =  _inputBuffer[ptr++];  if(ptr  ==  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
27	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    <    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
28	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	Integer  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    <    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
29	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_negative)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_negative)  {	  if(negative    ||    ch    ==    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
30	[BUG]  [BUGGY]  if(negative  ||  ch  ==  INT_9)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  ==  INT_9)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  ==  INT_9)  {	  if(negative    ||    ch    ==    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
31	[BUG]  [BUGGY]  if(dummy_loop)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
32	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
33	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
34	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
35	[BUG]  [BUGGY]  if(dummy_loop  ||  negative  ||  ptr  >=  inputLen)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative  ||  ptr  >=  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative  ||  ptr  >=  inputLen)  {	  if(negative    ||    ptr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  if(dummy_loop  ||  negative)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative)  {	  if(negative    ||    ptr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
37	[BUG]  [BUGGY]  if(negative  ||  ptr  ==  inputLen)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ptr  ==  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ptr  ==  inputLen)  {	  if(negative    ||    ptr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  if(dummy_loop)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    inputLen)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
39	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(negative)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(ptr  >=  inputLen)  {  if(negative)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(ptr  >=  inputLen)  {  if(negative)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    inputLen)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
40	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    inputLen)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
41	[BUG]  [BUGGY]  if(dummy_loop)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  false);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  false);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  false);  }	  if(negative)    {    if(ptr    >=    inputLen)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
42	[BUG]  [BUGGY]  if(dummy_loop  ||  negative  ||  ptr  >=  startPtr)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative  ||  ptr  >=  startPtr)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative  ||  ptr  >=  startPtr)  {	  if(negative    ||    ptr    >=    startPtr)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
43	[BUG]  [BUGGY]  if(ptr  >=  startPtr  ||  negative)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(ptr  >=  startPtr  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(ptr  >=  startPtr  ||  negative)  {	  if(negative    ||    ptr    >=    startPtr)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
45	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
46	[BUG]  [BUGGY]  readFully(_inputBuffer,  startPtr,  inputLen);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  readFully(_inputBuffer,  startPtr,  inputLen);  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	readFully(_inputBuffer,  startPtr,  inputLen);	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
47	[BUG]  [BUGGY]  readFully(_inputBuffer,  ptr,  inputLen);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  readFully(_inputBuffer,  ptr,  inputLen);  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	readFully(_inputBuffer,  ptr,  inputLen);	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
48	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  negative)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd  ||  negative)  {	  if(negative    ||    _inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
49	[BUG]  [BUGGY]  if(negative  ||  startPtr  >=  _inputEnd)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  startPtr  >=  _inputEnd)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  startPtr  >=  _inputEnd)  {	  if(negative    ||    _inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
50	[BUG]  [BUGGY]  if(!_tokenIncomplete)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(!_tokenIncomplete)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(!_tokenIncomplete)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
51	[BUG]  [BUGGY]  if(!isIncomplete())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(!isIncomplete())  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(!isIncomplete())  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputPtr;    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
53	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr!=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr!=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr!=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputPtr;    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
54	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  ==  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  ==  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  ==  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputPtr;    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
55	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputPtr;    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
56	[BUG]  [BUGGY]  if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
57	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NULL)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NULL)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NULL)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
58	[BUG]  [BUGGY]  if(_tokenIncomplete  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
59	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
60	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer[ptr++]  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _inputBuffer[ptr++]  ==  null)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer[ptr++]  ==  null)  {	  if(negative    ||    _inputBuffer    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
61	[BUG]  [BUGGY]  if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
62	[BUG]  [BUGGY]  if(dummy_loop  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
63	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
64	[BUG]  [BUGGY]  if(!_tokenIncomplete  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(!_tokenIncomplete  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(!_tokenIncomplete  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
65	[BUG]  [BUGGY]  if(_tokenIncomplete  ||  negative)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete  ||  negative)  {	  if(negative    ||!_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
66	[BUG]  [BUGGY]  if(dummy_loop  ||  negative  ||!_tokenIncomplete)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative  ||!_tokenIncomplete)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative  ||!_tokenIncomplete)  {	  if(negative    ||!_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
67	[BUG]  [BUGGY]  if(!_tokenIncomplete  ||  negative)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(!_tokenIncomplete  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(!_tokenIncomplete  ||  negative)  {	  if(negative    ||!_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
68	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr  ||  negative)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  startPtr  ||  negative)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  startPtr  ||  negative)  {	  if(negative    ||    _inputPtr    >=    startPtr)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
69	[BUG]  [BUGGY]  if(negative  ||  _tokenIncomplete  ||  ptr  >=  inputLen)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _tokenIncomplete  ||  ptr  >=  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _tokenIncomplete  ||  ptr  >=  inputLen)  {	  if(negative    ||    _tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
70	[BUG]  [BUGGY]  ch  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  ch  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	ch  =  _inputBuffer[ptr++]  +  1;	  ch    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	17	None	replace
71	[BUG]  [BUGGY]  ch  =  _inputBuffer[ptr++]  +  startPtr;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  ch  =  _inputBuffer[ptr++]  +  startPtr;  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	ch  =  _inputBuffer[ptr++]  +  startPtr;	  ch    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	17	None	replace
72	[BUG]  [BUGGY]  if(negative  &&  startPtr  >=  inputLen)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  &&  startPtr  >=  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  &&  startPtr  >=  inputLen)  {	  if(negative    ||    startPtr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
73	[BUG]  [BUGGY]  if(dummy_loop  ||  negative  ||  inputLen  >  INT_9  ||  inputLen  >  INT_0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  negative  ||  inputLen  >  INT_9  ||  inputLen  >  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  negative  ||  inputLen  >  INT_9  ||  inputLen  >  INT_0)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    >    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
74	[BUG]  [BUGGY]  if(negative  ||  inputLen  <  =  INT_9  ||  inputLen  >  INT_0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  <  =  INT_9  ||  inputLen  >  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  <  =  INT_9  ||  inputLen  >  INT_0)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    >    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
75	[BUG]  [BUGGY]  char  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  char  ptr  =  _inputBuffer[ptr++];  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	char  ptr  =  _inputBuffer[ptr++];	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
76	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	int  ptr  =  _inputBuffer[ptr++]  &  0xff;	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
77	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	int  ptr  =  _inputBuffer[ptr++]  +  1;	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
78	[BUG]  [BUGGY]  if(negative  ||  ch  <  INT_9  ||  ch  >  INT_9)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  <  INT_9  ||  ch  >  INT_9)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  <  INT_9  ||  ch  >  INT_9)  {	  if(negative    ||    ch    <    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
79	[BUG]  [BUGGY]  if(negative  ||  ch  <  INT_0  ||  ch  >  INT_9)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  <  INT_0  ||  ch  >  INT_9)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  <  INT_0  ||  ch  >  INT_9)  {	  if(negative    ||    ch    <    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
80	[BUG]  [BUGGY]  if(negative  ||  ch  <  =  INT_0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  <  =  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  <  =  INT_0)  {	  if(negative    ||    ch    <    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
81	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
82	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
83	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  inputLen)  {  if(negative)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
84	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
85	[BUG]  [BUGGY]  if(dummy_loop)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
86	[BUG]  [BUGGY]  if(dummy_loop)  {  if(negative)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop)  {  if(negative)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop)  {  if(negative)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
87	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  false);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  false);  }	  if(negative)    {    if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
88	[BUG]  [BUGGY]  if(negative  &&  _inputPtr  >=  startPtr)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  &&  _inputPtr  >=  startPtr)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  &&  _inputPtr  >=  startPtr)  {	  if(negative    ||    _inputPtr    >=    startPtr)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
89	[BUG]  [BUGGY]  if(negative  &&  _inputPtr  >=  _inputEnd)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  &&  _inputPtr  >=  _inputEnd)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  &&  _inputPtr  >=  _inputEnd)  {	  if(negative    ||    _inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
90	[BUG]  [BUGGY]  read  =  _reader.read(_inputBuffer,  startPtr,  inputLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  read  =  _reader.read(_inputBuffer,  startPtr,  inputLen);  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	read  =  _reader.read(_inputBuffer,  startPtr,  inputLen);	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
91	[BUG]  [BUGGY]  read  =  _reader.read(buf,  startPtr,  inputLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  read  =  _reader.read(buf,  startPtr,  inputLen);  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	read  =  _reader.read(buf,  startPtr,  inputLen);	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
92	[BUG]  [BUGGY]  readFully(_inputBuffer,  startPtr,  inputLen));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  readFully(_inputBuffer,  startPtr,  inputLen));  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	readFully(_inputBuffer,  startPtr,  inputLen));	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
93	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
94	[BUG]  [BUGGY]  if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_LONG))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_LONG))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_LONG))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
95	[BUG]  [BUGGY]  ch  =  _inputBuffer[ptr++]  +  inputLen;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  ch  =  _inputBuffer[ptr++]  +  inputLen;  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	ch  =  _inputBuffer[ptr++]  +  inputLen;	  ch    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	17	None	replace
96	[BUG]  [BUGGY]  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  int  ptr  =  _inputPtr;  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputPtr;    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
97	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    <    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
98	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  if(negative)  {  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  if(negative)  {  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    <    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
99	[BUG]  [BUGGY]  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  startPtr)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  startPtr)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  startPtr)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    <    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
100	[BUG]  [BUGGY]  if(dummy_loop  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
101	[BUG]  [BUGGY]  if(negative  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
102	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  +  startPtr;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  +  startPtr;  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	int  ptr  =  _inputBuffer[ptr++]  +  startPtr;	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
103	[BUG]  [BUGGY]  if(!isInvalid())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(!isInvalid())  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(!isInvalid())  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
104	[BUG]  [BUGGY]  if(negative  ||  _tokenIncomplete  ||  startPtr  >=  inputLen)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _tokenIncomplete  ||  startPtr  >=  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _tokenIncomplete  ||  startPtr  >=  inputLen)  {	  if(negative    ||    _tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
105	[BUG]  [BUGGY]  if(negative  ||  inputLen  >  _inputEnd)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  >  _inputEnd)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  >  _inputEnd)  {	  if(negative    ||    _tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
106	[BUG]  [BUGGY]  if(negative  ||  ch  ==  INT_MINUS)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  ==  INT_MINUS)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  ==  INT_MINUS)  {	  if(negative    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
107	[BUG]  [BUGGY]  if(negative  ||  ch  ==  INT_DECEMBER)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  ==  INT_DECEMBER)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  ==  INT_DECEMBER)  {	  if(negative    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
108	[BUG]  [BUGGY]  if(negative  &&  startPtr  <  inputLen)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  &&  startPtr  <  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  &&  startPtr  <  inputLen)  {	  if(negative    ||    startPtr    <    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
109	[BUG]  [BUGGY]  if(negative  ||  inputLen  >  INT_9  ||  inputLen  >=  INT_0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  >  INT_9  ||  inputLen  >=  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  >  INT_9  ||  inputLen  >=  INT_0)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    >    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
110	[BUG]  [BUGGY]  if(dummy_loop)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  false);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop)  {  if(ptr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  false);  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
111	[BUG]  [BUGGY]  if(negative  &&  ptr  >=  startPtr)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  &&  ptr  >=  startPtr)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  &&  ptr  >=  startPtr)  {	  if(negative    ||    ptr    >=    startPtr)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
112	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _inputBuffer.length  ==  0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer.length  ==  0)  {	  if(negative    ||    _inputBuffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
113	[BUG]  [BUGGY]  if(negative  ||  startPtr  >  inputLen)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  startPtr  >  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  startPtr  >  inputLen)  {	  if(negative    ||    startPtr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
114	[BUG]  [BUGGY]  if(negative)  {  if(ch  >  INT_9  ||  ch  <  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative)  {  if(ch  >  INT_9  ||  ch  <  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  if(ch  >  INT_9  ||  ch  <  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
115	[BUG]  [BUGGY]  if(negative)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
116	[BUG]  [BUGGY]  if(negative)  {  if(ch  <  INT_0  ||  ch  >=  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative)  {  if(ch  <  INT_0  ||  ch  >=  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  if(ch  <  INT_0  ||  ch  >=  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
117	[BUG]  [BUGGY]  if(negative)  {  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative)  {  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative)  {  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
118	[BUG]  [BUGGY]  if(negative  &&  _inputPtr  >=  inputLen)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  &&  _inputPtr  >=  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  &&  _inputPtr  >=  inputLen)  {	  if(negative    ||    _inputPtr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
119	[BUG]  [BUGGY]  if(negative  ||  ch  <  INT_9)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  <  INT_9)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  <  INT_9)  {	  if(negative    ||    ch    <    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
120	[BUG]  [BUGGY]  if(negative  ||  ch  >=  INT_0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  >=  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  >=  INT_0)  {	  if(negative    ||    ch    <    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
121	[BUG]  [BUGGY]  if(negative  ||  _tokenIncomplete  ||  startPtr  >=  _inputEnd)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _tokenIncomplete  ||  startPtr  >=  _inputEnd)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _tokenIncomplete  ||  startPtr  >=  _inputEnd)  {	  if(negative    ||!_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
122	[BUG]  [BUGGY]  if(negative  &&  inputLen  <  =  INT_0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  &&  inputLen  <  =  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  &&  inputLen  <  =  INT_0)  {	  if(negative    ||    inputLen    <    =    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
123	[BUG]  [BUGGY]  readInt(ch,  startPtr,  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  readInt(ch,  startPtr,  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	readInt(ch,  startPtr,  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    inputLen)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
124	[BUG]  [BUGGY]  if(dummy_loop)  {  if(ptr  >=  inputLen)return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(dummy_loop)  {  if(ptr  >=  inputLen)return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(dummy_loop)  {  if(ptr  >=  inputLen)return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    inputLen)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
125	[BUG]  [BUGGY]  if(negative  &&  ptr  >=  inputLen)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  &&  ptr  >=  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  &&  ptr  >=  inputLen)  {	  if(negative    ||    ptr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
126	[BUG]  [BUGGY]  if(negative  ||  inputLen  <  =  INT_0  ||  inputLen  >  INT_9)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  <  =  INT_0  ||  inputLen  >  INT_9)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  <  =  INT_0  ||  inputLen  >  INT_9)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    <    =    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
127	[BUG]  [BUGGY]  if(negative  ||  inputLen  >=  INT_9  ||  inputLen  <  =  INT_0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  inputLen  >=  INT_9  ||  inputLen  <  =  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  inputLen  >=  INT_9  ||  inputLen  <  =  INT_0)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    <    =    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
128	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer[ptr++]  ==  INT_0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _inputBuffer[ptr++]  ==  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer[ptr++]  ==  INT_0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
129	[BUG]  [BUGGY]  if(negative  &&  _inputBuffer[ptr++]!=  INT_0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  &&  _inputBuffer[ptr++]!=  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  &&  _inputBuffer[ptr++]!=  INT_0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
130	[BUG]  [BUGGY]  if(negative  ||  _inputBuffer[ptr++]!=  INT_DEFAULT)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _inputBuffer[ptr++]!=  INT_DEFAULT)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _inputBuffer[ptr++]!=  INT_DEFAULT)  {	  if(negative    ||    _inputBuffer[ptr++]!=    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
131	[BUG]  [BUGGY]  if(negative  ||  ptr  <  inputLen)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ptr  <  inputLen)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ptr  <  inputLen)  {	  if(negative    ||    ptr    >=    startPtr)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
132	[BUG]  [BUGGY]  if(negative  ||  ptr  >=  _inputEnd)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ptr  >=  _inputEnd)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ptr  >=  _inputEnd)  {	  if(negative    ||    ptr    >=    startPtr)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
133	[BUG]  [BUGGY]  if(negative  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(negative    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
134	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  _inputBuffer[ptr++]!=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  _inputBuffer[ptr++]!=  0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd  &&  _inputBuffer[ptr++]!=  0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
135	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(ptr  >=  inputLen)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
136	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
137	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
138	[BUG]  [BUGGY]  if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_LIST))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_LIST))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_LIST))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
139	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    <    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
140	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    <    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
141	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  inputLen)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  inputLen)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    <    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
142	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {	  if(negative    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
143	[BUG]  [BUGGY]  if(negative  ||!_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||!_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||!_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(negative    ||!_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
144	[BUG]  [BUGGY]  if(negative  ||!_tokenIncomplete  ||  ch  ==  INT_LCURLY)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||!_tokenIncomplete  ||  ch  ==  INT_LCURLY)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||!_tokenIncomplete  ||  ch  ==  INT_LCURLY)  {	  if(negative    ||!_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
145	[BUG]  [BUGGY]  if(negative  ||!_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||!_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||!_tokenIncomplete  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NULL))  {	  if(negative    ||!_tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
146	[BUG]  [BUGGY]  ch  =  _decodedData[ptr++];  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  ch  =  _decodedData[ptr++];  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	ch  =  _decodedData[ptr++];	  ch    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	17	None	replace
147	[BUG]  [BUGGY]  ch  =  _reader[ptr++];  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  ch  =  _reader[ptr++];  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	ch  =  _reader[ptr++];	  ch    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	17	None	replace
148	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  int  ptr  =  _inputPtr;  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_tokenIncomplete)  {  int  ptr  =  _inputPtr;  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_tokenIncomplete)  {  int  ptr  =  _inputPtr;  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputPtr;    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
149	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  return  _handleInvalidNumberStart(ch,  true);  }	  if(negative)    {    if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    return    _handleInvalidNumberStart(ch,    true);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
150	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  startPtr)  {  if(negative)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
151	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
152	[BUG]  [BUGGY]  if(negative  ||  ch  ==  INT_0  ||  ch  ==  INT_9)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  ==  INT_0  ||  ch  ==  INT_9)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  ==  INT_0  ||  ch  ==  INT_9)  {	  if(negative    ||    ch    ==    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
153	[BUG]  [BUGGY]  if(negative  ||  ch  >  INT_9  ||  ch  <  INT_0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  ch  >  INT_9  ||  ch  <  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  ch  >  INT_9  ||  ch  <  INT_0)  {	  if(negative    ||    inputLen    >    INT_9    ||    inputLen    <    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
154	[BUG]  [BUGGY]  if(negative  ||  _tokenIncomplete  ||  ch  ==  INT_LCURLY)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(negative  ||  _tokenIncomplete  ||  ch  ==  INT_LCURLY)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(negative  ||  _tokenIncomplete  ||  ch  ==  INT_LCURLY)  {	  if(negative    ||    _tokenIncomplete)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
155	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  inputLen)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
156	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
157	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
158	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  inputLen)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  inputLen)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
159	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(_inputPtr  >=  _inputEnd)  {  int  ptr  =  _inputBuffer[ptr++];  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    int    ptr    =    _inputBuffer[ptr++];    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
160	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  _inputBuffer[ptr++]!=  INT_0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out      [BUGGY]  if(ch  ==  INT_0  ||  _inputBuffer[ptr++]!=  INT_0)  {  [BUGGY]      if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  _inputPtr  =  ptr;  return  _handleInvalidNumberStart(ch,  true);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	if(ch  ==  INT_0  ||  _inputBuffer[ptr++]!=  INT_0)  {	  if(negative    ||    _inputBuffer[ptr++]!=    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
