bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  startPtr  =  ptr-1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  [BUGGY]  final  int  startPtr  =  ptr-1;  [BUGGY]  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  ptr-1;	int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  [BUGGY]  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  [BUGGY]  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;	int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  int  startPtr  =  _inputBuffer.length-1;  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  [BUGGY]  int  startPtr  =  _inputBuffer.length-1;  [BUGGY]  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputBuffer.length-1;	int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  	non-compiled	[CE]  <identifier>  expected	9	None	replace
4	[BUG]  [BUGGY]  final  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  [BUGGY]  final  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  [BUGGY]  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;	int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  	non-compiled	[CE]  <identifier>  expected	9	None	replace
5	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  [BUGGY]    [BUGGY]  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	  	int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  int  startPtr  =  ptr  -  1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  [BUGGY]  int  startPtr  =  ptr  -  1;  [BUGGY]  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  ptr  -  1;	int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  int  startPtr  =  _inputEnd-1;  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  [BUGGY]  int  startPtr  =  _inputEnd-1;  [BUGGY]  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputEnd-1;	int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  	non-compiled	[CE]  <identifier>  expected	9	None	replace
