bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  startPtr  =  _inputBuffer.length+1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputBuffer.length+1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputBuffer.length+1;	  int    startPtr    =    _inputEnd+1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
2	[BUG]  [BUGGY]  int  startPtr  =  _inputStart+1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputStart+1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputStart+1;	  int    startPtr    =    _inputEnd+1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
3	[BUG]  [BUGGY]  int  startPtr  =  ch  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  ch  -  1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  ch  -  1;	  int    startPtr    =    _inputPtr    -    1;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
4	[BUG]  [BUGGY]  final  int  startPtr  =  _inputStart+1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputStart+1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputStart+1;	  final    int    startPtr    =    _inputStart-1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
5	[BUG]  [BUGGY]  if(ptr  <  inputLen)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  inputLen)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  <  inputLen)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
6	[BUG]  [BUGGY]  if(ptr  ==  inputLen)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  ==  inputLen)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  ==  inputLen)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
7	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
8	[BUG]  [BUGGY]  ||  negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  ||  negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	||  negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
9	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
10	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(_tokenIncomplete)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
11	[BUG]  [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  ==  _inputEnd)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
12	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  <  _inputEnd)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
13	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  >=  _inputEnd)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ".);  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
14	[BUG]  [BUGGY]  if(ptr  ==  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  ==  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  ==  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  <  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  ||  negative)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  ||  negative)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	||  negative)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
17	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_NUMBER)  {  if(negative)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_ERROR)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_NUMBER_ERROR)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_NUMBER_ERROR)  {  if(negative)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
19	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	Integer  ptr  =  _inputBuffer[ptr++]  +  1;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	17	None	replace
20	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	17	None	replace
21	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  ptr  =  _inputBuffer[ptr++];	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	17	None	replace
22	[BUG]  [BUGGY]  int  startPtr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputBuffer[ptr++]  &  0xff;	  int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  char  startPtr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  char  startPtr  =  _inputBuffer[ptr++];  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	char  startPtr  =  _inputBuffer[ptr++];	  int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  int  startPtr  =  _inputBuffer[ptr++]  &  0xFF;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputBuffer[ptr++]  &  0xFF;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputBuffer[ptr++]  &  0xFF;	  int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  int  startPtr  =  ptr  -  1?  negative  :  ptr;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  ptr  -  1?  negative  :  ptr;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  ptr  -  1?  negative  :  ptr;	  int    startPtr    =    negative?    ptr    -    1    :    ptr;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
26	[BUG]  [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  _inputBuffer[ptr++];  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  negative?  ptr  -  1  :  _inputBuffer[ptr++];	  int    startPtr    =    negative?    ptr    -    1    :    ptr;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
27	[BUG]  [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  _inputBuffer[ptr];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  _inputBuffer[ptr];  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  negative?  ptr  -  1  :  _inputBuffer[ptr];	  int    startPtr    =    negative?    ptr    -    1    :    ptr;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
28	[BUG]  [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  final  int  len  =  _inputBuffer[ptr++];  if(len  ==  0)  {  return  len;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  final  int  len  =  _inputBuffer[ptr++];  if(len  ==  0)  {  return  len;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  if(ptr  >=  _inputEnd)  {  final  int  len  =  _inputBuffer[ptr++];  if(len  ==  0)  {  return  len;  }	  if(ptr    >=    _inputEnd)    {    final    int    len    =    _inputBuffer[ptr++];    if(len    ==    0)    {    return    len;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
29	[BUG]  [BUGGY]  final  int  len  =  _inputBuffer[ptr++];  if(len  ==  0)  {  return  len;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  len  =  _inputBuffer[ptr++];  if(len  ==  0)  {  return  len;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  len  =  _inputBuffer[ptr++];  if(len  ==  0)  {  return  len;  }	  if(ptr    >=    _inputEnd)    {    final    int    len    =    _inputBuffer[ptr++];    if(len    ==    0)    {    return    len;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
30	[BUG]  [BUGGY]  final  int  len  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  len  =  _inputBuffer[ptr++];  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  len  =  _inputBuffer[ptr++];	  if(ptr    >=    _inputEnd)    {    final    int    len    =    _inputBuffer[ptr++];    if(len    ==    0)    {    return    len;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  final  int  len  =  _inputBuffer[ptr++];  if(len!=  0)  {  return  len;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  final  int  len  =  _inputBuffer[ptr++];  if(len!=  0)  {  return  len;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  if(ptr  >=  _inputEnd)  {  final  int  len  =  _inputBuffer[ptr++];  if(len!=  0)  {  return  len;  }	  if(ptr    >=    _inputEnd)    {    final    int    len    =    _inputBuffer[ptr++];    if(len    ==    0)    {    return    len;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputBuffer[ptr++]  &  0xff;	  final    int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputBuffer[ptr++]  +  1;	  final    int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  final  int  startPtr  =  _inputBuffer.length[ptr++];  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputBuffer.length[ptr++];  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputBuffer.length[ptr++];	  final    int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  if(negative)  {  final  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  final  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  final  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  }	  final    int    startPtr    =    _inputBuffer.length-1;    //    to    include    sign/digit    already    read    final    int    inputLen    =    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(_tokenIncomplete)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
37	[BUG]  [BUGGY]  ||  negative)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  ||  negative)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	||  negative)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
38	[BUG]  [BUGGY]  if(!negative)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(!negative)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(!negative)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
39	[BUG]  [BUGGY]  ||  negative)  {  if(ptr  ==  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  ||  negative)  {  if(ptr  ==  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	||  negative)  {  if(ptr  ==  inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
40	[BUG]  [BUGGY]  int  startPtr  =  _inputPtr  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputPtr  +  1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputPtr  +  1;	  int    startPtr    =    ptr    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  int  startPtr  =  _inputEnd-4;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputEnd-4;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputEnd-4;	  int    startPtr    =    _inputEnd-2;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
42	[BUG]  [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr-1]  &  0xff;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr-1]  &  0xff;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputBuffer[ptr-1]  &  0xff;	  final    int    startPtr    =    _inputBuffer[ptr-1];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
43	[BUG]  [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr-1]  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr-1]  +  1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputBuffer[ptr-1]  +  1;	  final    int    startPtr    =    _inputBuffer[ptr-1];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
44	[BUG]  [BUGGY]  if(!negative)  {  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(!negative)  {  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(!negative)  {  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  }	  if(negative)    {    int    startPtr    =    _inputBuffer.length-1;    //    to    include    sign/digit    already    read    final    int    inputLen    =    _inputEnd;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
45	[BUG]  [BUGGY]  final  int  startPtr  =  _inputEnd+1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputEnd+1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputEnd+1;	  final    int    startPtr    =    _inputEnd-1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  final  int  startPtr  =  _inputEnd;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputEnd;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputEnd;	  final    int    startPtr    =    _inputLatin1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
47	[BUG]  [BUGGY]  final  int  startPtr  =  _inputLen;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputLen;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputLen;	  final    int    startPtr    =    _inputLatin1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
48	[BUG]  [BUGGY]  final  int  startPtr  =  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputBuffer.length;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputBuffer.length;	  final    int    startPtr    =    _inputLatin1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
49	[BUG]  [BUGGY]  final  int  startPtr  =  ptr;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  ptr;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  ptr;	  final    int    startPtr    =    _inputLatin1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
50	[BUG]  [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  ==  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
51	[BUG]  [BUGGY]  if(!negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(!negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(!negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
52	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  <  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
53	[BUG]  [BUGGY]  final  int  startPtr  =  _inputBuffer.length  -2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputBuffer.length  -2;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputBuffer.length  -2;	  final    int    startPtr    =    _inputBuffer.length-1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  int  startPtr  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputBuffer[ptr++]  +  1;	  int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	12	None	replace
55	[BUG]  [BUGGY]  if(negative)  {  if(ptr  <  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  if(ptr  <  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  if(ptr  <  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
56	[BUG]  [BUGGY]  if(negative)  {  if(ptr  <  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  if(ptr  <  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  if(ptr  <  inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
57	[BUG]  [BUGGY]  if(negative)  {  if(ptr  ==  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  if(ptr  ==  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  if(ptr  ==  inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
58	[BUG]  [BUGGY]  int  startPtr  =  _inputEnd+1  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputEnd+1  +  1;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputEnd+1  +  1;	  int    startPtr    =    _inputEnd+1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
59	[BUG]  [BUGGY]  final  int  startPtr  =  _inputLatin2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputLatin2;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputLatin2;	  final    int    startPtr    =    _inputLatin1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
60	[BUG]  [BUGGY]  final  int  startPtr  =  _inputStart;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputStart;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputStart;	  final    int    startPtr    =    _inputLatin1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
61	[BUG]  [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  final  int  inputLen  =  _inputBuffer[ptr++];  if(inputLen  ==  0)  {  return  inputLen;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  final  int  inputLen  =  _inputBuffer[ptr++];  if(inputLen  ==  0)  {  return  inputLen;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  if(ptr  >=  _inputEnd)  {  final  int  inputLen  =  _inputBuffer[ptr++];  if(inputLen  ==  0)  {  return  inputLen;  }	  if(ptr    >=    _inputEnd)    {    final    int    len    =    _inputBuffer[ptr++];    if(len    ==    0)    {    return    len;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
62	[BUG]  [BUGGY]  final  int  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  ptr  =  _inputBuffer[ptr++];  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  ptr  =  _inputBuffer[ptr++];	  if(ptr    >=    _inputEnd)    {    final    int    len    =    _inputBuffer[ptr++];    if(len    ==    0)    {    return    len;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
63	[BUG]  [BUGGY]  final  int  startPtr  =  _outputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _outputBuffer[ptr++];  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _outputBuffer[ptr++];	  final    int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
64	[BUG]  [BUGGY]  int  startPtr  =  _inputBuffer.length  -3;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputBuffer.length  -3;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputBuffer.length  -3;	  int    startPtr    =    _inputBuffer.length    -2;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
65	[BUG]  [BUGGY]  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
66	[BUG]  [BUGGY]  if(negative)  {  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
67	[BUG]  [BUGGY]  if(!negative)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(!negative)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(!negative)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
68	[BUG]  [BUGGY]  if(negative)  {  if(ptr  ==  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  if(ptr  ==  inputLen)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  if(ptr  ==  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
69	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  inputLen)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  >=  inputLen)  {  if(!negative)  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
70	[BUG]  [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  if(ptr  >=  _inputEnd)  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
71	[BUG]  [BUGGY]  if(negative)  {  int  startPtr  =  _inputBuffer.length-1;//  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  int  startPtr  =  _inputBuffer.length-1;//  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  int  startPtr  =  _inputBuffer.length-1;//  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  }	  if(negative)    {    int    startPtr    =    _inputBuffer.length-1;    //    to    include    sign/digit    already    read    final    int    inputLen    =    _inputEnd;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
72	[BUG]  [BUGGY]  if(negative)  {  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  0;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(negative)  {  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  0;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(negative)  {  int  startPtr  =  _inputBuffer.length-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  0;  }	  if(negative)    {    int    startPtr    =    _inputBuffer.length-1;    //    to    include    sign/digit    already    read    final    int    inputLen    =    _inputEnd;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
73	[BUG]  [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr-1].length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr-1].length;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputBuffer[ptr-1].length;	  final    int    startPtr    =    _inputBuffer[ptr-1];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
74	[BUG]  [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  ch;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  ch;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  negative?  ptr  -  1  :  ch;	  int    startPtr    =    negative?    ptr    -    1    :    ptr;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
75	[BUG]  [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  _inputPtr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  _inputPtr;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  negative?  ptr  -  1  :  _inputPtr;	  int    startPtr    =    negative?    ptr    -    1    :    ptr;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
76	[BUG]  [BUGGY]  final  int  startPtr  =  _inputEnd-2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputEnd-2;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputEnd-2;	  final    int    startPtr    =    _inputEnd-1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
77	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  inputLen)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  >=  inputLen)  {  if(!negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
78	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
79	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
80	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
81	[BUG]  [BUGGY]  int  startPtr  =  _inputEnd?  ptr  -  1  :  ptr;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputEnd?  ptr  -  1  :  ptr;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputEnd?  ptr  -  1  :  ptr;	  int    startPtr    =    negative?    ptr    -    1    :    ptr;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
82	[BUG]  [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  negative?  ptr  -  1  :  _inputBuffer.length;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  negative?  ptr  -  1  :  _inputBuffer.length;	  int    startPtr    =    negative?    ptr    -    1    :    ptr;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
83	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  _inputEnd)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  _inputEnd)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_NUMBER)  {  if(ptr  >=  _inputEnd)  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
84	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  if(ptr  >=  _inputEnd)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_0)  {  if(ptr  >=  _inputEnd)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_0)  {  if(ptr  >=  _inputEnd)  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
85	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
86	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_QUOTE)  {  if(negative)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
87	[BUG]  [BUGGY]  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  >=  inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
88	[BUG]  [BUGGY]  final  int  startPtr  =  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  0;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  0;	  final    int    startPtr    =    _inputLatin1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
89	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(dummy_loop  ==  negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  inputLen)  {  if(dummy_loop  ==  negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  >=  inputLen)  {  if(dummy_loop  ==  negative)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
90	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(dummy_loop!=  negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  inputLen)  {  if(dummy_loop!=  negative)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  >=  inputLen)  {  if(dummy_loop!=  negative)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
91	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_NUMBER)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
92	[BUG]  [BUGGY]  int  startPtr  =  _inputEnd-3;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputEnd-3;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputEnd-3;	  int    startPtr    =    _inputEnd-2;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
93	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ch  ==  INT_QUOTE)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
94	[BUG]  [BUGGY]  final  int  startPtr  =  _inputEnd-9;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputEnd-9;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputEnd-9;	  final    int    startPtr    =    _inputEnd-1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
95	[BUG]  [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  final  int  startPtr  =  _inputBuffer[ptr++].length;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	final  int  startPtr  =  _inputBuffer[ptr++].length;	  final    int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
96	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
97	[BUG]  [BUGGY]  int  startPtr  =  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;      [BUGGY]  int  startPtr  =  _inputBuffer[ptr++].length;  [BUGGY]      final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	int  startPtr  =  _inputBuffer[ptr++].length;	  int    startPtr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	12	None	replace
