bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (ch  <  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if  (ch  <  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE)  {	  if    (ch    <    intLen    ||    ch    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  if  (ch  <  intLen  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if  (ch  <  intLen  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  intLen  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {	  if    (ch    <    intLen    ||    ch    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  if  (ch  <  intLen  &&  ch  >  INT_9)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if  (ch  <  intLen  &&  ch  >  INT_9)  {  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  intLen  &&  ch  >  INT_9)  {	  if    (ch    <    intLen    ||    ch    >    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]!=  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]!=  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]!=	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  if  (ch  ==  '.'  ||  ch  =='<  ')  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if  (ch  ==  '.'  ||  ch  =='<  ')  {  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  ==  '.'  ||  ch  =='<  ')  {	  if    (ch    <    =    INT_0    ||    ch    >    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  if  (ch  <  intLen  ||  ch  >  INT_10)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if  (ch  <  intLen  ||  ch  >  INT_10)  {  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  intLen  ||  ch  >  INT_10)  {	  if    (ch    <    INT_0    ||    ch    >    INT_10)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  if  (ch  <  intLen  &&  ch  <  =  INT_9)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if  (ch  <  intLen  &&  ch  <  =  INT_9)  {  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  intLen  &&  ch  <  =  INT_9)  {	  if    (ch    <    intLen    ||    ch    >    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  if  (ch  <  =  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if  (ch  <  =  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  =  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE)  {	  if    (ch    <    intLen    ||    ch    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  if  (ch  <  =  INT_0  ||  ch  >  INT_10)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if  (ch  <  =  INT_0  ||  ch  >  INT_10)  {  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  =  INT_0  ||  ch  >  INT_10)  {	  if    (ch    <    INT_0    ||    ch    >    INT_10)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
14	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
15	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
17	[BUG]  [BUGGY]  if(ch  <  intLen  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  <  intLen  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  intLen  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {	  if    (ch    <    intLen    ||    ch    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputLen)  {  return  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputLen)  {  return  0;  }  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(_inputPtr  >=  inputLen)  {  return  0;  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];    [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }  [BUGGY]    break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	3	None	replace
