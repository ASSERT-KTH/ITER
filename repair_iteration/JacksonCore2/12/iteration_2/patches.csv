bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (ch  <  intLen  &&  ch  >  INT_10)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if  (ch  <  intLen  &&  ch  >  INT_10)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  intLen  &&  ch  >  INT_10)  {	  if    (ch    <    intLen    ||    ch    >    INT_10)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    if(buf[ptr++]!=    	non-compiled	[CE]  <identifier>  expected	7	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]!=  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]!=  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]!=	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    if(buf[ptr++]!=    	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  if(ch!=  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch!=  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch!=  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    if(buf[ptr++]!=    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if    (ch    ==    '.'    ||    ch    =='<    ')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if    (ch    ==    '.'    ||    ch    =='<    ')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
8	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(ptr  >=  inputLen)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch!=  '.')  {  if(ptr  >=  inputLen)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch!=  '.')  {  if(ptr  >=  inputLen)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
9	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputLen)return  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputLen)return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ptr  >=  inputLen)return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
10	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
11	[BUG]  [BUGGY]  ||(ch  ==  '.'  &&  ch  <  =  'A'  &&  ch  <  =  'Z')||(ch  >=  'a'  &&  ch  <  =  'z'))  {  break  dummy_loop;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  ||(ch  ==  '.'  &&  ch  <  =  'A'  &&  ch  <  =  'Z')||(ch  >=  'a'  &&  ch  <  =  'z'))  {  break  dummy_loop;  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	||(ch  ==  '.'  &&  ch  <  =  'A'  &&  ch  <  =  'Z')||(ch  >=  'a'  &&  ch  <  =  'z'))  {  break  dummy_loop;	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
12	[BUG]  [BUGGY]  ||(ch  ==  '.'  &&  ch  <  =  'A'  &&  ch  <  =  'Z')||(ch  >=  'a'  &&  ch  <  =  'z'))  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  ||(ch  ==  '.'  &&  ch  <  =  'A'  &&  ch  <  =  'Z')||(ch  >=  'a'  &&  ch  <  =  'z'))  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	||(ch  ==  '.'  &&  ch  <  =  'A'  &&  ch  <  =  'Z')||(ch  >=  'a'  &&  ch  <  =  'z'))  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  ||(ch  ==  '.'  &&  ch  <  =  'A'  &&  ch  <  =  'Z')||(ch  >=  'A'  &&  ch  <  =  'Z'))  {  break  dummy_loop;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  ||(ch  ==  '.'  &&  ch  <  =  'A'  &&  ch  <  =  'Z')||(ch  >=  'A'  &&  ch  <  =  'Z'))  {  break  dummy_loop;  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	||(ch  ==  '.'  &&  ch  <  =  'A'  &&  ch  <  =  'Z')||(ch  >=  'A'  &&  ch  <  =  'Z'))  {  break  dummy_loop;	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
14	[BUG]  [BUGGY]  if(ch!=  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch!=  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch!=  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _symbols.get(i);    if(    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _symbols.get(i);    if(    	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _symbols.get(i);    if(    	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  if(ch!=  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch!=  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch!=  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char    c    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[ptr];  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[ptr];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[ptr];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char    c    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[0];  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[0];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[0];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char    c    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(ch!=  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch!=  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch!=  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    char    c    =    getChar();    if(c!=    '.')    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
21	[BUG]  [BUGGY]  if(ptr  >=  startPtr)  {  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  d  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ptr  >=  startPtr)  {  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  d  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ptr  >=  startPtr)  {  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  d	  if(ch    ==    '.')    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    char    c    =    getChar();    if(c!=    '.')    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
22	[BUG]  [BUGGY]  if(ptr  >=  startPtr)  {  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ptr  >=  startPtr)  {  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ptr  >=  startPtr)  {  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop	  if(ch    ==    '.')    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    char    c    =    getChar();    if(c!=    '.')    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
23	[BUG]  [BUGGY]  if  (ch  <  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if  (ch  <  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {	  if    (ch    <    intLen    ||    ch    >    Integer.MAX_VALUE    ||    ch    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
24	[BUG]  [BUGGY]  if  (ch  <  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if  (ch  <  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {	  if    (ch    <    intLen    ||    ch    >    Integer.MAX_VALUE    ||    ch    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  if(ch  <  intLen  ||  ch  >  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  intLen  ||  ch  >  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  intLen  ||  ch  >  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE)  {	  if(ch    <    intLen    ||    ch    >    Integer.MAX_VALUE    ||    ch    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
26	[BUG]  [BUGGY]  if(ch  <  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {	  if(ch    <    intLen    ||    ch    >    Integer.MAX_VALUE    ||    ch    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
27	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[ptr];  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[ptr];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[ptr];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  ||  ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _input  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  ||  ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _input  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	||  ch  ==  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _input	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
31	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)return  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)return  0;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
32	[BUG]  [BUGGY]  if  (ch  <  INT_0  ||  ch  <  =  INT_9)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if  (ch  <  INT_0  ||  ch  <  =  INT_9)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  INT_0  ||  ch  <  =  INT_9)  {	  if    (ch    <    intLen    &&    ch    <    =    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
33	[BUG]  [BUGGY]  if  (ch  <  intLen  ||  ch  <  =  INT_9)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if  (ch  <  intLen  ||  ch  <  =  INT_9)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  intLen  ||  ch  <  =  INT_9)  {	  if    (ch    <    intLen    &&    ch    <    =    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
34	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ptr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
35	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(ptr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch!=  '.')  {  if(ptr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch!=  '.')  {  if(ptr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
36	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputEnd)return  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputEnd)return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ptr  >=  inputEnd)return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
37	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
38	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(ptr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
39	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
40	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch!=  '.')  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch!=  '.')  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
41	[BUG]  [BUGGY]  if(ch  <  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {	  if    (ch    <    Integer.MIN_VALUE    ||    ch    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
42	[BUG]  [BUGGY]  if  (ch  ==  Integer.MIN_VALUE  ||  ch  ==  Integer.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if  (ch  ==  Integer.MIN_VALUE  ||  ch  ==  Integer.MAX_VALUE)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  ==  Integer.MIN_VALUE  ||  ch  ==  Integer.MAX_VALUE)  {	  if    (ch    <    =    Integer.MIN_VALUE    ||    ch    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
45	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
46	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
47	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  'e'  ||  ch  ==  'E')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
48	[BUG]  [BUGGY]  if(ch  =='}  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  =='}  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  =='}  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char    c    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  if(ch  =='<  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  =='<  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  =='<  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char    c    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
50	[BUG]  [BUGGY]  if(ch  <  =  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char    c    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
51	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _symbols.get(i);    if(    	non-compiled	[CE]  <identifier>  expected	4	None	replace
52	[BUG]  [BUGGY]  if(ch  =='<  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  =='<  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  =='<  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _symbols.get(i);    if(    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  if(ch  =='}  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  =='}  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  =='}  ')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _symbols.get(i);    if(    	non-compiled	[CE]  <identifier>  expected	4	None	replace
54	[BUG]  [BUGGY]  if(ch  =='}  ')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  =='}  ')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  =='}  ')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
55	[BUG]  [BUGGY]  if(ch  =='<  ')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  =='<  ')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  =='<  ')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
56	[BUG]  [BUGGY]  if(ch  <  =  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  '.')  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
57	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
58	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  INT_0)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  INT_0)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
59	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    if(buf[ptr++]!=    	non-compiled	[CE]  <identifier>  expected	7	None	replace
60	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    if(buf[ptr++]!=    	non-compiled	[CE]  <identifier>  expected	7	None	replace
61	[BUG]  [BUGGY]  if(ch  =='{  ')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  =='{  ')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  =='{  ')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  if(buf[ptr++]  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    if(buf[ptr++]!=    	non-compiled	[CE]  <identifier>  expected	7	None	replace
62	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  'e'  ||  ch  ==  'E')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
63	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
64	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
65	[BUG]  [BUGGY]  if  (ch  <  INT_0  &&  ch  <  =  INT_9)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if  (ch  <  INT_0  &&  ch  <  =  INT_9)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  <  INT_0  &&  ch  <  =  INT_9)  {	  if    (ch    <    intLen    &&    ch    <    =    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
66	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  INT_0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  INT_0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    char    c    =    getChar();    if(c!=    '.')    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
67	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop	  if(ch    ==    '.')    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    char    c    =    getChar();    if(c!=    '.')    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
68	[BUG]  [BUGGY]  if(ch  ==  '.')  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {	  if    (ch    <    intLen    &&    ch    >    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
69	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '>')  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '>')  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.'  ||  ch  ==  '>')  {	  if    (ch    ==    '.'    ||    ch    =='<    ')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
70	[BUG]  [BUGGY]  if  (ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if  (ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if  (ch  ==  'n'  ||  ch  ==  'r')  {	  if    (ch    ==    '.'    ||    ch    =='<    ')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
71	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputLen)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputLen)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputLen)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
72	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputLen)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputLen)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0)  {  if(_inputPtr  >=  inputLen)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
73	[BUG]  [BUGGY]  if(ch  <  =  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  Integer.MIN_VALUE  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {	  if    (ch    <    intLen    ||    ch    >    Integer.MAX_VALUE    ||    ch    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
74	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  INT_0  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  INT_0  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MIN_VALUE)  {	  if    (ch    <    intLen    ||    ch    >    Integer.MAX_VALUE    ||    ch    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
75	[BUG]  [BUGGY]  if(ch!=  INT_0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch!=  INT_0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch!=  INT_0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  char  c  =  getChar();  if(c!=  '.')  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    char    c    =    getChar();    if(c!=    '.')    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
76	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.'  ||  ch  ==  '@')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
77	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
78	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  =='<  ')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.'  ||  ch  =='<  ')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.'  ||  ch  =='<  ')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
79	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ':')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ':')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.'  ||  ch  ==  ':')  {  if(_inputPtr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
80	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(inputPtr  >=  inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(inputPtr  >=  inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(inputPtr  >=  inputEnd)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
81	[BUG]  [BUGGY]  if(ch  <  intLen  &&  ch  <  =  INT_0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  intLen  &&  ch  <  =  INT_0)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  intLen  &&  ch  <  =  INT_0)  {	  if    (ch    <    intLen    &&    ch    <    =    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
82	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
83	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_1)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_1)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_1)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
84	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.'  ||  ch  ==  '@')  {  if(_inputPtr  >=  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
85	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  '.')  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  '.')  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  '.')  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
86	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_10)  {  if(ch  ==  '.')  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_10)  {  if(ch  ==  '.')  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_10)  {  if(ch  ==  '.')  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
87	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ptr  <  inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ptr  <  inputEnd)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ptr  <  inputEnd)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
88	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
89	[BUG]  [BUGGY]  if(ch!=  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch!=  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch!=  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
90	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  char[]  buf[]  =  _symbols.get(i);  if(	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char[]    buf[]    =    _symbols.get(i);    if(    	non-compiled	[CE]  <identifier>  expected	4	None	replace
91	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
92	[BUG]  [BUGGY]  ||  ch  ==  '.')  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  ||  ch  ==  '.')  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	||  ch  ==  '.')  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
93	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  >=  '.')  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  >=  '.')  {  break  dummy_loop;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(ch  >=  '.')  {  break  dummy_loop;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
94	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_0)  {	  if    (ch    ==    '.'    ||    ch    =='<    ')    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
95	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_0)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char    c    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
96	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  0,  len  =  _inputBuffer.length;  i  <  len;  ++i)  {  char  c  =  _inputBuffer[i];  }	  if(ch    ==    '.')    {    for(int    i    =    0,    len    =    _inputBuffer.length;    i    <    len;    ++i)    {    char    c    =    _inputBuffer[i];    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
97	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(inputLen  <  =  _inputEnd)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(inputLen  <  =  _inputEnd)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(inputLen  <  =  _inputEnd)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
98	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputLen)return  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  inputLen)return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(_inputPtr  >=  inputLen)return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
99	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(inputPtr  >=  inputLen)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  ==  '.')  {  if(inputPtr  >=  inputLen)  {  return  0;  }  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  ==  '.')  {  if(inputPtr  >=  inputLen)  {  return  0;  }	  if(ch    ==    '.')    {    if(_inputPtr    >=    inputLen)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
100	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      int  intLen  =  1;  //  already  got  one    int_loop:  while  (true)  {  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];      [BUGGY]  if(ch  <  INT_0  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {  [BUGGY]      break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	if(ch  <  INT_0  ||  ch  >  Integer.MAX_VALUE  ||  ch  >  Integer.MAX_VALUE)  {	  if(ch    <    intLen    ||    ch    >    Integer.MAX_VALUE    ||    ch    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
