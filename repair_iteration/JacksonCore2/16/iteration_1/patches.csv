bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ch  =(int)_inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  ch  =(int)_inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	ch  =(int)_inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  int  len  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  len  =  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  len  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  int  expLen  =  _inputPtr  +  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =  _inputPtr  +  1;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputPtr  +  1;	  int    expLen    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
6	[BUG]  [BUGGY]  int  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
7	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr++].length;	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  char  expLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  char  expLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	char  expLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  int  expLen  =(ptr  >=  inputLen)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(ptr  >=  inputLen)?  0  :  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  >=  inputLen)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    >=    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  int  expLen  =(ptr  >>  inputLen)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(ptr  >>  inputLen)?  0  :  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  >>  inputLen)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    >=    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  int  expLen  =  _inputEnd  +  1;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =  _inputEnd  +  1;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputEnd  +  1;	  int    expLen    =    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  int  expLen  =  _inputEnd  -  fractLen;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =  _inputEnd  -  fractLen;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputEnd  -  fractLen;	  int    expLen    =    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
13	[BUG]  [BUGGY]  int  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  1  :  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  inputLen)?  1  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =  _inputBuffer.length  -  1;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  1;	  int    expLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
17	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  fractLen;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =  _inputBuffer.length  -  fractLen;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  fractLen;	  int    expLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer[ptr++];	  int    expLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =  _inputBuffer.length  -  2;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  2;	  int    expLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  >  inputLen)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(_inputPtr  >  inputLen)?  0  :  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  >  inputLen)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    >=    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++].length;	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
22	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[ptr++].length  +  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[ptr++].length  +  1;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[ptr++].length  +  1;	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
23	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	Integer  ptr  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  ch  =(int)_reader[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  ch  =(int)_reader[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	ch  =(int)_reader[ptr++];	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  int  ptr  =  _reader.readInt();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  ptr  =  _reader.readInt();  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =  _reader.readInt();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =  _inputBuffer.length  +  1;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  +  1;	  int    expLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
28	[BUG]  [BUGGY]  int  expLen  =  _inputPtr.length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =  _inputPtr.length;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputPtr.length;	  int    expLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer.length  :  0;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer.length  :  0;  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer.length  :  0;	  int    expLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  if(ptr  >=  inputLen)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ptr  >=  inputLen)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  int  ptr  =(int)_inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  int  ptr  =(int)_inputBuffer[ptr++];  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =(int)_inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }    [BUGGY]  if(ptr  >=  inputLen)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [BUGGY]    if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ptr  >=  inputLen)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
