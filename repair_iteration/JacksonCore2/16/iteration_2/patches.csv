bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  expLen  =(ptr  <  0)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  <  0)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  <  0)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    0)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
2	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  0)?  1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  0)?  1  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  0)?  1  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    0)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
3	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  >=  0)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  >=  0)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  >=  0)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    0)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
4	[BUG]  [BUGGY]  int  expLen  =(ptr  <  inputLen)?  _inputBuffer.length  :  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  <  inputLen)?  _inputBuffer.length  :  0;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  <  inputLen)?  _inputBuffer.length  :  0;	  int    expLen    =(_inputPtr    <    inputLen)?    _inputBuffer.length    :    0;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
5	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  0)?  _inputBuffer.length  :  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  0)?  _inputBuffer.length  :  0;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  0)?  _inputBuffer.length  :  0;	  int    expLen    =(_inputPtr    <    inputLen)?    _inputBuffer.length    :    0;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
6	[BUG]  [BUGGY]  int  expLen  =(int)_inputBuffer[ptr++]?  _inputPtr.length  :  0;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(int)_inputBuffer[ptr++]?  _inputPtr.length  :  0;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(int)_inputBuffer[ptr++]?  _inputPtr.length  :  0;	  int    expLen    =(_inputPtr    <    inputLen)?    _inputBuffer.length    :    0;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
7	[BUG]  [BUGGY]  char  ptr  =(char)_inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  char  ptr  =(char)_inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	char  ptr  =(char)_inputBuffer[ptr++];	  int    ptr    =(int)_inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	31	None	replace
8	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  1  +  fractLen;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  -  1  +  fractLen;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  1  +  fractLen;	  int    expLen    =    _inputBuffer.length    -    1;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
9	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  4;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  -  4;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  4;	  int    expLen    =    _inputBuffer.length    -    1;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
10	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  /  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  /  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  /  1;	  int    expLen    =    _inputBuffer.length    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
11	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  +  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  +  2;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  +  2;	  int    expLen    =    _inputBuffer.length    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
12	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer[ptr++]  &  0xff;	  int    expLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	18	None	replace
13	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer[ptr++]  +  1;	  int    expLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	18	None	replace
14	[BUG]  [BUGGY]  char  expLen  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  char  expLen  =  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	char  expLen  =  _inputBuffer[ptr++];	  int    expLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	18	None	replace
15	[BUG]  [BUGGY]  int  expLen  =(ptr  >  inputLen)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  >  inputLen)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  >  inputLen)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    >    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
16	[BUG]  [BUGGY]  int  expLen  =(ptr  >  _inputLen)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  >  _inputLen)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  >  _inputLen)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    >    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
17	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  >>  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  >>  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  >>  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  int  len  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  len  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  len  =  _inputBuffer[ptr++]  &  0xff;	  int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  char  len  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  char  len  =  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	char  len  =  _inputBuffer[ptr++];	  int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  int  len  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  len  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  len  =  _inputBuffer[ptr++]  +  1;	  int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  int  expLen  =(ptr  <  inputLen)?  1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  <  inputLen)?  1  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  <  inputLen)?  1  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    inputLen)?    1    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	15	None	replace
24	[BUG]  [BUGGY]  int  expLen  =(_inputBuffer[ptr++]  <  _inputLen)?  1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputBuffer[ptr++]  <  _inputLen)?  1  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputBuffer[ptr++]  <  _inputLen)?  1  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    inputLen)?    1    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	15	None	replace
25	[BUG]  [BUGGY]  int  expLen  =  fractLen  -  _inputEnd;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  fractLen  -  _inputEnd;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  fractLen  -  _inputEnd;	  int    expLen    =    _inputEnd    -    fractLen;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  int  expLen  =  _inputEnd  -  fractLen  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputEnd  -  fractLen  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputEnd  -  fractLen  +  1;	  int    expLen    =    _inputEnd    -    fractLen;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  int  expLen  =  ch  -  fractLen;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  ch  -  fractLen;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  ch  -  fractLen;	  int    expLen    =    _inputEnd    -    fractLen;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  int  expLen  =  ptr  -  fractLen;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  ptr  -  fractLen;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  ptr  -  fractLen;	  int    expLen    =    _inputEnd    -    fractLen;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
29	[BUG]  [BUGGY]  int  expLen  =  fractLen  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  fractLen  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  fractLen  +  1;	  int    expLen    =    _inputPtr    +    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  int  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length  +  1;	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length    +    1;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
31	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr++].length  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr++].length  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr++].length  +  1;	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length    +    1;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
32	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	24	None	replace
33	[BUG]  [BUGGY]  char  ptr  =  _reader.readInt();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  char  ptr  =  _reader.readInt();  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	char  ptr  =  _reader.readInt();	  int    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
34	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readInt();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  Integer  ptr  =  _reader.readInt();  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	Integer  ptr  =  _reader.readInt();	  int    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
35	[BUG]  [BUGGY]  int  expLen  =  _inputPtr.length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputPtr.length  -  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputPtr.length  -  1;	  int    expLen    =    _inputPtr.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
36	[BUG]  [BUGGY]  int  expLen  =  _inputEnd.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputEnd.length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputEnd.length;	  int    expLen    =    _inputPtr.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
37	[BUG]  [BUGGY]  char  expLen  =  _inputPtr.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  char  expLen  =  _inputPtr.length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	char  expLen  =  _inputPtr.length;	  int    expLen    =    _inputPtr.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
38	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  fractLen  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  -  fractLen  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  fractLen  +  1;	  int    expLen    =    _inputBuffer.length    -    fractLen;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
39	[BUG]  [BUGGY]  int  expLen  =  fractLen  -  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  fractLen  -  _inputBuffer.length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  fractLen  -  _inputBuffer.length;	  int    expLen    =    _inputBuffer.length    -    fractLen;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
40	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  fractLen  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  -  fractLen  -  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  fractLen  -  1;	  int    expLen    =    _inputBuffer.length    -    fractLen;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
41	[BUG]  [BUGGY]  ch  =(char)_inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  ch  =(char)_inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	ch  =(char)_inputBuffer[ptr++];	  ch    =(int)_inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	1	None	replace
42	[BUG]  [BUGGY]  char  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  char  ptr  =  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	char  ptr  =  _inputBuffer[ptr++];	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =  _inputBuffer[ptr++]  &  0xff;	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	3	None	replace
44	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  &  0xFF;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  &  0xFF;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =  _inputBuffer[ptr++]  &  0xFF;	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  int  expLen  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr++].length;	  int    expLen    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
46	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[ptr++].length;	  int    expLen    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
47	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
48	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  _inputPtr  =  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	_inputPtr  =  _inputBuffer[ptr++];	  if(ptr    >=    inputLen)    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
49	[BUG]  [BUGGY]  ||  _inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  ||  _inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	||  _inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
50	[BUG]  [BUGGY]  char  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  char  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	char  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;	  char    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
51	[BUG]  [BUGGY]  Char  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  Char  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	Char  expLen  =(ptr  <  inputLen)?  0  :  _inputBuffer[ptr++].length;	  char    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
52	[BUG]  [BUGGY]  int  expLen  =(_inputBuffer[ptr++]  <  inputLen)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputBuffer[ptr++]  <  inputLen)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputBuffer[ptr++]  <  inputLen)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(ptr    <    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	13	None	replace
53	[BUG]  [BUGGY]  int  expLen  =(ptr  >=  inputLen)?  1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  >=  inputLen)?  1  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  >=  inputLen)?  1  :  _inputBuffer[ptr++];	  int    expLen    =(ptr    >=    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
54	[BUG]  [BUGGY]  int  expLen  =(ptr  <  0)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  <  0)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  <  0)?  0  :  _inputBuffer[ptr++].length;	  int    expLen    =(_inputPtr    <    0)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
55	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  >=  0)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  >=  0)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  >=  0)?  0  :  _inputBuffer[ptr++].length;	  int    expLen    =(_inputPtr    <    0)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  0)?  1  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  0)?  1  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  0)?  1  :  _inputBuffer[ptr++].length;	  int    expLen    =(_inputPtr    <    0)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_QUOTE)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(!_tokenIncomplete)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
58	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(!_tokenIncomplete)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
59	[BUG]  [BUGGY]  ch  =(char)_reader[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  ch  =(char)_reader[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	ch  =(char)_reader[ptr++];	  ch    =(int)_reader[ptr++];    	non-compiled	[CE]  <identifier>  expected	25	None	replace
60	[BUG]  [BUGGY]  ch  =(int)_reader[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  ch  =(int)_reader[ptr++]  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	ch  =(int)_reader[ptr++]  +  1;	  ch    =(int)_reader[ptr++];    	non-compiled	[CE]  <identifier>  expected	25	None	replace
61	[BUG]  [BUGGY]  int  expLen  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	23	None	replace
62	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	23	None	replace
63	[BUG]  [BUGGY]  int  expLen  =(ptr  >=  _inputEnd)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  >=  _inputEnd)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  >=  _inputEnd)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(ptr    >>    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  int  expLen  =(_inputBuffer[ptr++].length  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputBuffer[ptr++].length  <  inputLen)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputBuffer[ptr++].length  <  inputLen)?  0  :  _inputBuffer[ptr++].length;	  int    expLen    =(ptr    <    inputLen)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
65	[BUG]  [BUGGY]  int  expLen  =(ptr  >=  inputLen)?  0  :  _inputBuffer[ptr++].length;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  >=  inputLen)?  0  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  >=  inputLen)?  0  :  _inputBuffer[ptr++].length;	  int    expLen    =(ptr    <    inputLen)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  ';'  expected	6	None	replace
66	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  3;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  -  3;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  3;	  int    expLen    =    _inputBuffer.length    -    2;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
67	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(_inputPtr  >=  inputLen)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
68	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  'e'  ||  ch  ==  'E')  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
69	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
70	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_QUOTE)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(_inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
71	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(_inputPtr  >=  inputLen)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(!_tokenIncomplete)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
72	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_0)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_0)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(!_tokenIncomplete)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
73	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_NUMBER)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(!_tokenIncomplete)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
74	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =  _inputBuffer[ptr++]  +  1;	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	3	None	replace
75	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  /  fractLen;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  /  fractLen;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  /  fractLen;	  int    expLen    =    _inputBuffer.length    -    fractLen;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
76	[BUG]  [BUGGY]  int  expLen  =(_inputBuffer[ptr++]  <  ptr)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputBuffer[ptr++]  <  ptr)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputBuffer[ptr++]  <  ptr)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(ptr    <    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	13	None	replace
77	[BUG]  [BUGGY]  Integer  ptr  =(Integer)_inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  Integer  ptr  =(Integer)_inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	Integer  ptr  =(Integer)_inputBuffer[ptr++];	  int    ptr    =(int)_inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	31	None	replace
78	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  *  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  *  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  *  1;	  int    expLen    =    _inputBuffer.length    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
79	[BUG]  [BUGGY]  int  expLen  =  _inputPtr.length  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputPtr.length  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputPtr.length  +  1;	  int    expLen    =    _inputPtr.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
80	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  0;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  0;	  int    expLen    =(_inputPtr    <    inputLen)?    _inputBuffer.length    :    0;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
81	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  _inputBuffer.length  :  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  _inputBuffer.length  :  0;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  _inputEnd)?  _inputBuffer.length  :  0;	  int    expLen    =(_inputPtr    <    inputLen)?    _inputBuffer.length    :    0;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
82	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	Integer  ptr  =  _inputBuffer[ptr++]  +  1;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  ';'  expected	24	None	replace
83	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++].length  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++].length  +  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++].length  +  1;	  int    expLen    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[ptr++].length;    	non-compiled	[CE]  ';'  expected	21	None	replace
84	[BUG]  [BUGGY]  int  expLen  =  _inputPtr  +  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputPtr  +  2;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputPtr  +  2;	  int    expLen    =    _inputPtr    +    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
85	[BUG]  [BUGGY]  int  expLen  =(ptr  +  inputLen)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(ptr  +  inputLen)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(ptr  +  inputLen)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(ptr    >=    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
86	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  >  0)?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  >  0)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  >  0)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    >    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
87	[BUG]  [BUGGY]  int  ptr  =  _reader.readInt(_inputBuffer,  inputLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  ptr  =  _reader.readInt(_inputBuffer,  inputLen);  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =  _reader.readInt(_inputBuffer,  inputLen);	  int    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
88	[BUG]  [BUGGY]  int  expLen  =  _inputEnd  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputEnd  -  1;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputEnd  -  1;	  int    expLen    =    _inputEnd    +    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
89	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer[ptr++]  +  fractLen;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer[ptr++]  +  fractLen;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer[ptr++]  +  fractLen;	  int    expLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	18	None	replace
90	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
91	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  <  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  <  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
92	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(!_tokenIncomplete  ||  fractLen  ==  0)  {  break  dummy_loop;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(!_tokenIncomplete  ||  fractLen  ==  0)  {  break  dummy_loop;  }  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	if(ptr  >=  inputLen)  {  if(!_tokenIncomplete  ||  fractLen  ==  0)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(!_tokenIncomplete)    {    break    dummy_loop;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
93	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  fractLen  *  2;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  -  fractLen  *  2;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  fractLen  *  2;	  int    expLen    =    _inputBuffer.length    -    fractLen;    	non-compiled	[CE]  ';'  expected	17	None	replace
94	[BUG]  [BUGGY]  Integer  ptr  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  Integer  ptr  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	Integer  ptr  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
95	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  ptr  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  ';'  expected	3	None	replace
96	[BUG]  [BUGGY]  int  expLen  =  _inputBuffer.length  -  10;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputBuffer.length  -  10;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputBuffer.length  -  10;	  int    expLen    =    _inputBuffer.length    -    2;    	non-compiled	[CE]  ';'  expected	19	None	replace
97	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  _inputLen)?  1  :  _inputBuffer[ptr++];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  _inputLen)?  1  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  _inputLen)?  1  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    inputLen)?    1    :    _inputBuffer[ptr++];    	non-compiled	[CE]  ';'  expected	15	None	replace
98	[BUG]  [BUGGY]  int  expLen  =(_inputBuffer  <  inputLen)?  1  :  _inputBuffer[ptr++];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputBuffer  <  inputLen)?  1  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputBuffer  <  inputLen)?  1  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    inputLen)?    1    :    _inputBuffer[ptr++];    	non-compiled	[CE]  ';'  expected	15	None	replace
99	[BUG]  [BUGGY]  int  expLen  =(_inputBuffer  <  0)?  0  :  _inputBuffer[ptr++];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputBuffer  <  0)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputBuffer  <  0)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(_inputPtr    <    0)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  ';'  expected	14	None	replace
100	[BUG]  [BUGGY]  int  len  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  len  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  len  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];	  int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  ';'  expected	4	None	replace
101	[BUG]  [BUGGY]  int  len  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  Integer.toString(_inputBuffer[ptr++]);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  len  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  Integer.toString(_inputBuffer[ptr++]);  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  len  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  Integer.toString(_inputBuffer[ptr++]);	  int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  ';'  expected	4	None	replace
102	[BUG]  [BUGGY]  int  len  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++].length;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  len  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++].length;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  len  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++].length;	  int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
103	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[ptr++].length();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[ptr++].length();  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[ptr++].length();	  int    expLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[ptr++].length    +    1;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
104	[BUG]  [BUGGY]  int  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr,  fractLen);  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr,  fractLen);	  int    ptr    =    _reader.readInt();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
105	[BUG]  [BUGGY]  int  ptr  =  _reader.readInt(_inputBuffer,  fractLen);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  ptr  =  _reader.readInt(_inputBuffer,  fractLen);  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  ptr  =  _reader.readInt(_inputBuffer,  fractLen);	  int    ptr    =    _reader.readInt();    	non-compiled	[CE]  ';'  expected	26	None	replace
106	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputEnd  :  0;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputEnd  :  0;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  inputLen)?  _inputEnd  :  0;	  int    expLen    =(_inputPtr    <    inputLen)?    _inputBuffer.length    :    0;    	non-compiled	[CE]  ';'  expected	29	None	replace
107	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];	  int    expLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  ';'  expected	18	None	replace
108	[BUG]  [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  fractLen;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  fractLen;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputPtr  <  inputLen)?  _inputBuffer[ptr++]  :  fractLen;	  int    expLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  ';'  expected	18	None	replace
109	[BUG]  [BUGGY]  int  expLen  =  _inputPtr  -  fractLen;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =  _inputPtr  -  fractLen;  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =  _inputPtr  -  fractLen;	  int    expLen    =    _inputEnd    -    fractLen;    	non-compiled	[CE]  ';'  expected	12	None	replace
110	[BUG]  [BUGGY]  int  expLen  =(_inputBuffer  <  inputLen)?  0  :  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }      [BUGGY]  int  expLen  =(_inputBuffer  <  inputLen)?  0  :  _inputBuffer[ptr++];  [BUGGY]      if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	int  expLen  =(_inputBuffer  <  inputLen)?  0  :  _inputBuffer[ptr++];	  int    expLen    =(ptr    <    inputLen)?    0    :    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
