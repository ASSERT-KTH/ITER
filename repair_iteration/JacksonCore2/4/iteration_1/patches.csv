bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd  :  0;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  negative?  _inputEnd  :  0;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd  :  0;	  int    ptr    =    negative?    _inputPtr    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputBuffer.length  :  0;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  negative?  _inputBuffer.length  :  0;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputBuffer.length  :  0;	  int    ptr    =    negative?    _inputPtr    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputPtr  :  -1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  negative?  _inputPtr  :  -1;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputPtr  :  -1;	  int    ptr    =    negative?    _inputPtr    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  int  len  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  len  =  _inputBuffer[ptr++];  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  len  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char[]  buf  =  _reader.getChars(ch);  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char[]  buf  =  _reader.getChars(ch);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
7	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readInt();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  Integer  ptr  =  _reader.readInt();  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _reader.readInt();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
8	[BUG]  [BUGGY]  char  ptr  =  0;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  0;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  0;	  int    ptr    =    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  int  ptr  =  _inputEnd-1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  _inputEnd-1;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputEnd-1;	  int    ptr    =    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  char  ptr  =  _inputEnd;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  _inputEnd;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _inputEnd;	  int    ptr    =    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length-1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  _inputBuffer.length-1;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer.length-1;	  int    ptr    =    _inputPtr-1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  char  ptr  =  _inputPtr-1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  _inputPtr-1;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _inputPtr-1;	  int    ptr    =    _inputPtr-1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  char  ptr  =  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  _inputBuffer.length;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _inputBuffer.length;	  int    ptr    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
14	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[ptr++];	  int    ptr    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[0].length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  _inputBuffer[0].length;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[0].length;	  int    ptr    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  String  ptr  =  _inputPtr;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  String  ptr  =  _inputPtr;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  _inputPtr;	  char    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  char  ptr  =  ch;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  ch;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  ch;	  char    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  char  ptr  =  negative;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  negative;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative;	  char    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  int  ptr  =  negative?  0  :  0;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  negative?  0  :  0;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  0  :  0;	  int    ptr    =    negative?    _inputPtr    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputPtr  :  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  negative?  _inputPtr  :  1;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputPtr  :  1;	  int    ptr    =    negative?    _inputPtr    :    0;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr++];  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[_inputPtr++];	  int    ptr    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[ptr++];  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[ptr++];	  int    ptr    =    _inputPtr-1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
23	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputPtr-1  :  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  negative?  _inputPtr-1  :  0;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputPtr-1  :  0;	  int    ptr    =    _inputPtr-1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++];  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++];	  char    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputPtr  :  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  negative?  _inputPtr  :  0;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputPtr  :  0;	  char    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
26	[BUG]  [BUGGY]  char  ptr  =  negative?  0  :  _inputPtr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  negative?  0  :  _inputPtr;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  0  :  _inputPtr;	  char    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
27	[BUG]  [BUGGY]  int  ptr  =  _reader.readInt();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  _reader.readInt();  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _reader.readInt();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  int  ptr  =  _reader.read();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  _reader.read();  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _reader.read();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  int  ptr  =(negative?  0  :  negative);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =(negative?  0  :  negative);  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(negative?  0  :  negative);	  int    ptr    =    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  int    ptr    =    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length;	  int    ptr    =    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  0)?  0  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =(_inputPtr  <  0)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  0)?  0  :  _inputBuffer[_inputPtr++];	  int    ptr    =    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
33	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++].charAt(ch);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  char  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++].charAt(ch);  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++].charAt(ch);	  char    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer[ptr++];  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd  :  _inputBuffer[ptr++];	  int    ptr    =    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer.length;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd  :  _inputBuffer.length;	  int    ptr    =    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  int  ptr  =  _inputEnd.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);    [BUGGY]  int  ptr  =  _inputEnd.length;  [BUGGY]    int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputEnd.length;	  int    ptr    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
