bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputPtr-2  :  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputPtr-2  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputPtr-2  :  0;	  int    ptr    =    negative?    _inputPtr-1    :    0;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
2	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputBuffer.length-1  :  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputBuffer.length-1  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputBuffer.length-1  :  0;	  int    ptr    =    negative?    _inputPtr-1    :    0;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
3	[BUG]  [BUGGY]  String  ptr  =  _inputPtr-1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  _inputPtr-1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  _inputPtr-1;	  char    ptr    =    _inputPtr-1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
4	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[ptr++];	  char    ptr    =    _inputPtr-1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
5	[BUG]  [BUGGY]  char  ptr  =  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _inputBuffer[_inputPtr++];	  int    ptr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
6	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ptr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
7	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr++]  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[_inputPtr++]  +  1;	  int    ptr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
8	[BUG]  [BUGGY]  int  ptr  =  _reader.readLine();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _reader.readLine();  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _reader.readLine();	  int    ptr    =    _reader.read();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
9	[BUG]  [BUGGY]  char  ptr  =  _reader.read();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  _reader.read();  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _reader.read();	  int    ptr    =    _reader.read();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
10	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  _inputPtr,  negative);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  _inputPtr,  negative);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _reader.read(_inputBuffer,  _inputPtr,  negative);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
11	[BUG]  [BUGGY]  char  ptr  =  negative?  0  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  0  :  _inputBuffer[_inputPtr++];	  char    ptr    =    negative?    0    :    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
12	[BUG]  [BUGGY]  String  ptr  =  negative?  0  :  _inputPtr;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  negative?  0  :  _inputPtr;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  negative?  0  :  _inputPtr;	  char    ptr    =    negative?    0    :    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
13	[BUG]  [BUGGY]  String  ptr  =  ch;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  ch;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  ch;	  char    ptr    =    ch;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
14	[BUG]  [BUGGY]  char  ptr  =  _inputBuffer[ch];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  _inputBuffer[ch];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _inputBuffer[ch];	  char    ptr    =    ch;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
15	[BUG]  [BUGGY]  char  ptr  =(ch  ==  INT_CHAR)?  1  :  ch;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =(ch  ==  INT_CHAR)?  1  :  ch;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =(ch  ==  INT_CHAR)?  1  :  ch;	  char    ptr    =    ch;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
16	[BUG]  [BUGGY]  char  ptr  =  ch  ==  INT_CHAR?  0  :  ch;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  ch  ==  INT_CHAR?  0  :  ch;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  ch  ==  INT_CHAR?  0  :  ch;	  char    ptr    =    ch;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
17	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
18	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  >=  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  >=  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  >=  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
19	[BUG]  [BUGGY]  char  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
20	[BUG]  [BUGGY]  int  ptr  =  _inputEnd?  _inputBuffer[ptr++]  :  negative;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputEnd?  _inputBuffer[ptr++]  :  negative;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputEnd?  _inputBuffer[ptr++]  :  negative;	  int    ptr    =    negative?    _inputEnd    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	34	None	replace
21	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];	  int    ptr    =    negative?    _inputEnd    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	34	None	replace
22	[BUG]  [BUGGY]  int  ptr  =  _inputEnd.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputEnd.length  -  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputEnd.length  -  1;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
23	[BUG]  [BUGGY]  char  ptr  =  _inputEnd.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  _inputEnd.length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _inputEnd.length;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
24	[BUG]  [BUGGY]  int  ptr  =  _inputEnd.length  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputEnd.length  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputEnd.length  +  1;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
25	[BUG]  [BUGGY]  String  ptr  =  _inputEnd;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  _inputEnd;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  _inputEnd;	  char    ptr    =    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ch,  0);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char[]  buf  =  _reader.getChars(ch,  0);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char[]  buf  =  _reader.getChars(ch,  0);	  char[]    buf    =    _reader.getChars(ch);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ch,  negative);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char[]  buf  =  _reader.getChars(ch,  negative);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char[]  buf  =  _reader.getChars(ch,  negative);	  char[]    buf    =    _reader.getChars(ch);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ptr);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char[]  buf  =  _reader.getChars(ptr);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char[]  buf  =  _reader.getChars(ptr);	  char[]    buf    =    _reader.getChars(ch);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ch,  fractLen);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char[]  buf  =  _reader.getChars(ch,  fractLen);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char[]  buf  =  _reader.getChars(ch,  fractLen);	  char[]    buf    =    _reader.getChars(ch);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  String  ptr  =  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  0;	  char    ptr    =    0;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _inputBuffer[ptr++]  +  1;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  String  ptr  =  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  _inputBuffer[_inputPtr++];	  String    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
34	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[0].length  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer[0].length  -  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[0].length  -  1;	  int    ptr    =    _inputBuffer[0].length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
35	[BUG]  [BUGGY]  char  ptr  =  _inputBuffer[0].length;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  _inputBuffer[0].length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _inputBuffer[0].length;	  int    ptr    =    _inputBuffer[0].length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
36	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[1].length;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer[1].length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[1].length;	  int    ptr    =    _inputBuffer[0].length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
37	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer.length  -  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd  :  _inputBuffer.length  -  1;	  int    ptr    =    negative?    _inputEnd    :    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
38	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer[_inputPtr++].length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer[_inputPtr++].length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd  :  _inputBuffer[_inputPtr++].length;	  int    ptr    =    negative?    _inputEnd    :    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
39	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd  :  _inputBuffer[_inputPtr++];	  int    ptr    =    negative?    _inputEnd    :    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
40	[BUG]  [BUGGY]  String  ptr  =  negative;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  negative;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  negative;	  char    ptr    =    negative;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
41	[BUG]  [BUGGY]  char  ptr  =  _inputBuffer.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  _inputBuffer.length  -  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _inputBuffer.length  -  1;	  char    ptr    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
42	[BUG]  [BUGGY]  String  ptr  =  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  _inputBuffer.length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  _inputBuffer.length;	  char    ptr    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
43	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputBuffer[ptr++].charAt(ch):  _inputBuffer[ptr++].charAt(ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputBuffer[ptr++].charAt(ch):  _inputBuffer[ptr++].charAt(ch);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputBuffer[ptr++].charAt(ch):  _inputBuffer[ptr++].charAt(ch);	  char    ptr    =    negative?    _inputPtr    :    _inputBuffer[ptr++].charAt(ch);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
44	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];	  char    ptr    =    negative?    _inputPtr    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	24	None	replace
45	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr++].length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr++].length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr++].length;	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++].length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
46	[BUG]  [BUGGY]  char  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length;	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++].length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
47	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  >=  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  >=  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  >=  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length;	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++].length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
48	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputBuffer.length  :  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputBuffer.length  :  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputBuffer.length  :  1;	  int    ptr    =    negative?    _inputBuffer.length    :    0;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
49	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputBuffer.length  :  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputBuffer.length  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputBuffer.length  :  0;	  int    ptr    =    negative?    _inputBuffer.length    :    0;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
50	[BUG]  [BUGGY]  char  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _inputBuffer[ptr++];	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
51	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[ptr++]  &  0xff;	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
52	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[ptr++]  +  1;	  int    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
53	[BUG]  [BUGGY]  int  ptr  =(negative?  0  :  ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(negative?  0  :  ch);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(negative?  0  :  ch);	  int    ptr    =(negative?    0    :    negative);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
54	[BUG]  [BUGGY]  int  ptr  =(negative?  1  :  negative);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(negative?  1  :  negative);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(negative?  1  :  negative);	  int    ptr    =(negative?    0    :    negative);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
55	[BUG]  [BUGGY]  int  ptr  =(negative?  0  :  _inputBuffer.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(negative?  0  :  _inputBuffer.length);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(negative?  0  :  _inputBuffer.length);	  int    ptr    =(negative?    0    :    negative);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
56	[BUG]  [BUGGY]  int  ptr  =(negative?  0  :  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(negative?  0  :  1);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(negative?  0  :  1);	  int    ptr    =(negative?    0    :    negative);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
57	[BUG]  [BUGGY]  int  ptr  =  _inputEnd+1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputEnd+1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputEnd+1;	  int    ptr    =    _inputEnd-1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
58	[BUG]  [BUGGY]  int  ptr  =  _inputEnd-2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputEnd-2;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputEnd-2;	  int    ptr    =    _inputEnd-1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
59	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputBuffer.length  :  -1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputBuffer.length  :  -1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputBuffer.length  :  -1;	  int    ptr    =    negative?    _inputPtr    :    -1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
60	[BUG]  [BUGGY]  int  len  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  len  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  len  =  _inputBuffer[ptr++]  &  0xff;	  int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	5	None	replace
61	[BUG]  [BUGGY]  char  len  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  len  =  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  len  =  _inputBuffer[ptr++];	  int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	5	None	replace
62	[BUG]  [BUGGY]  int  len  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  len  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  len  =  _inputBuffer[ptr++]  +  1;	  int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  Integer  ptr  =  _reader.indexOf(negative);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  Integer  ptr  =  _reader.indexOf(negative);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _reader.indexOf(negative);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
64	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readUnsignedInt();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  Integer  ptr  =  _reader.readUnsignedInt();  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _reader.readUnsignedInt();	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  int  ptr  =  negative?  0  :  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  0  :  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  0  :  1;	  int    ptr    =    negative?    0    :    0;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
66	[BUG]  [BUGGY]  int  ptr  =  negative?  1  :  0;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  1  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  1  :  0;	  int    ptr    =    negative?    0    :    0;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
67	[BUG]  [BUGGY]  int  ptr  =  negative?  0  :  -1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  0  :  -1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  0  :  -1;	  int    ptr    =    negative?    0    :    0;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
68	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  >=  0)?  0  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  >=  0)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  >=  0)?  0  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    0)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	32	None	replace
69	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  0)?  1  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  <  0)?  1  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  0)?  1  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    0)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	32	None	replace
70	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  1)?  0  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  <  1)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  1)?  0  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    0)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	32	None	replace
71	[BUG]  [BUGGY]  Char  ptr  =  negative?  _inputPtr  :  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  Char  ptr  =  negative?  _inputPtr  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Char  ptr  =  negative?  _inputPtr  :  0;	  char    ptr    =    negative?    _inputPtr    :    0;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
72	[BUG]  [BUGGY]  String  ptr  =  negative?  _inputPtr  :  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  negative?  _inputPtr  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  negative?  _inputPtr  :  0;	  char    ptr    =    negative?    _inputPtr    :    0;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
73	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputStart  :  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputStart  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputStart  :  0;	  int    ptr    =    negative?    _inputEnd    :    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
74	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd  :  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd  :  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd  :  1;	  int    ptr    =    negative?    _inputEnd    :    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
75	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputEnd  :  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputEnd  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputEnd  :  0;	  int    ptr    =    negative?    _inputEnd    :    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
76	[BUG]  [BUGGY]  char  ptr  =  _reader.readInt();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  _reader.readInt();  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  _reader.readInt();	  int    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
77	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputBuffer.length-1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputBuffer.length-1  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputBuffer.length-1  :  _inputBuffer[ptr++];	  int    ptr    =    negative?    _inputPtr-1    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
78	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr-1];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer[ptr-1];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[ptr-1];	  int    ptr    =    negative?    _inputPtr-1    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
79	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length  -1  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer.length  -1  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer.length  -1  +  1;	  int    ptr    =    _inputBuffer.length-1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
80	[BUG]  [BUGGY]  int  ptr  =  negative?  0  :  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  0  :  _inputBuffer.length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  0  :  _inputBuffer.length;	  int    ptr    =    negative?    _inputBuffer.length    :    0;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
81	[BUG]  [BUGGY]  char  ptr  =  negative?  ch  :  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  ch  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  ch  :  0;	  char    ptr    =    ch;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
82	[BUG]  [BUGGY]  char  ptr  =  negative?  0  :  ch;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  0  :  ch;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  0  :  ch;	  char    ptr    =    ch;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
83	[BUG]  [BUGGY]  char  ptr  =  negative?  ch  :  'n';  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  ch  :  'n';  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  ch  :  'n';	  char    ptr    =    ch;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
84	[BUG]  [BUGGY]  String  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++];	  String    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
85	[BUG]  [BUGGY]  String  ptr  =  negative?  _inputPtr  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  negative?  _inputPtr  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  negative?  _inputPtr  :  _inputBuffer[_inputPtr++];	  String    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
86	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++].length  +  1;	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++].length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
87	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[0].length  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer[0].length  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer[0].length  +  1;	  int    ptr    =    _inputBuffer[0].length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
88	[BUG]  [BUGGY]  char  ptr  =  negative?  0  :  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  0  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  0  :  0;	  char    ptr    =    negative?    _inputPtr    :    0;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
89	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputPtr  :  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputPtr  :  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputPtr  :  1;	  char    ptr    =    negative?    _inputPtr    :    0;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
90	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputEnd  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputEnd  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputEnd  :  _inputBuffer[ptr++];	  char    ptr    =    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
91	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputEnd  :  _inputBuffer[0];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputEnd  :  _inputBuffer[0];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputEnd  :  _inputBuffer[0];	  char    ptr    =    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
92	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd-1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd-1  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd-1  :  _inputBuffer[ptr++];	  int    ptr    =    _inputEnd-1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
93	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd-1  :  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd-1  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd-1  :  0;	  int    ptr    =    _inputEnd-1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
94	[BUG]  [BUGGY]  int  ptr  =  negative?  0  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  0  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  0  :  _inputBuffer[ptr++];	  int    ptr    =    negative?    _inputEnd    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	34	None	replace
95	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd  :  _inputBuffer[ptr++]  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd  :  _inputBuffer[ptr++]  +  1;	  int    ptr    =    negative?    _inputEnd    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	34	None	replace
96	[BUG]  [BUGGY]  char  ptr  =  negative?  0  :  _inputBuffer[ptr++].charAt(ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  0  :  _inputBuffer[ptr++].charAt(ch);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  0  :  _inputBuffer[ptr++].charAt(ch);	  char    ptr    =    negative?    _inputPtr    :    _inputBuffer[ptr++].charAt(ch);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
97	[BUG]  [BUGGY]  int  ptr  =  negative?  -1  :  -1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  -1  :  -1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  -1  :  -1;	  int    ptr    =    negative?    _inputPtr    :    -1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
98	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputPtr  +  1  :  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputPtr  +  1  :  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputPtr  +  1  :  1;	  int    ptr    =    negative?    _inputPtr    :    1;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
99	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd.length  :  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd.length  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd.length  :  0;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
100	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  ch);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  ch);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _reader.read(_inputBuffer,  0,  ch);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
101	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  _inputPtr);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  _inputPtr);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _reader.read(_inputBuffer,  0,  _inputPtr);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
102	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  0);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  0);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _reader.read(_inputBuffer,  0,  0);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
103	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(buf,  negative);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char[]  buf  =  _reader.getChars(buf,  negative);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char[]  buf  =  _reader.getChars(buf,  negative);	  char[]    buf    =    _reader.getChars(ch);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
104	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  ==  0)?  0  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  ==  0)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  ==  0)?  0  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    0)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	32	None	replace
105	[BUG]  [BUGGY]  char  ptr  =  negative?  0  :  _inputPtr  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  0  :  _inputPtr  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  0  :  _inputPtr  +  1;	  char    ptr    =    negative?    0    :    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
106	[BUG]  [BUGGY]  char  ptr  =  negative?  0  :  _inputPtr-1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  0  :  _inputPtr-1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  0  :  _inputPtr-1;	  char    ptr    =    negative?    0    :    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
107	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  -1  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  -1  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  -1  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
108	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[_inputPtr++];	  char    ptr    =    _inputPtr-1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
109	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[0];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[0];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[0];	  char    ptr    =    _inputPtr-1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
110	[BUG]  [BUGGY]  int  ptr  =(negative?  0  :  _inputEnd);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(negative?  0  :  _inputEnd);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(negative?  0  :  _inputEnd);	  int    ptr    =(negative?    0    :    negative);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
111	[BUG]  [BUGGY]  char  ptr  =  negative?  0  :  negative;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  0  :  negative;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  0  :  negative;	  char    ptr    =    negative;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
112	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputEnd  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputEnd  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputEnd  :  _inputBuffer[_inputPtr++];	  char    ptr    =    negative;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
113	[BUG]  [BUGGY]  char  ptr  =  negative?  _inputBuffer[_inputPtr++]  :  ch;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  negative?  _inputBuffer[_inputPtr++]  :  ch;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  negative?  _inputBuffer[_inputPtr++]  :  ch;	  char    ptr    =    negative;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
114	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[ptr++]  +  1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputPtr-1  :  _inputBuffer[ptr++]  +  1;	  int    ptr    =    negative?    _inputPtr-1    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
115	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ch,  _inputBuffer,  _inputLen);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char[]  buf  =  _reader.getChars(ch,  _inputBuffer,  _inputLen);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char[]  buf  =  _reader.getChars(ch,  _inputBuffer,  _inputLen);	  char[]    buf    =    _reader.getChars(ch);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
116	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ch,  _inputBuffer,  _inputPtr);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char[]  buf  =  _reader.getChars(ch,  _inputBuffer,  _inputPtr);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char[]  buf  =  _reader.getChars(ch,  _inputBuffer,  _inputPtr);	  char[]    buf    =    _reader.getChars(ch);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
117	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ch,  _inputBuffer,  ptr);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char[]  buf  =  _reader.getChars(ch,  _inputBuffer,  ptr);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char[]  buf  =  _reader.getChars(ch,  _inputBuffer,  ptr);	  char[]    buf    =    _reader.getChars(ch);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
118	[BUG]  [BUGGY]  char  ptr  =  ch  ==  INT_QUOTE;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  ch  ==  INT_QUOTE;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  ch  ==  INT_QUOTE;	  char    ptr    =    ch;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
119	[BUG]  [BUGGY]  char  ptr  =  ch  ==  INT_CHAR;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =  ch  ==  INT_CHAR;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =  ch  ==  INT_CHAR;	  char    ptr    =    ch;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
120	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  -1  :  _inputBuffer[_inputPtr++].length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  -1  :  _inputBuffer[_inputPtr++].length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  -1  :  _inputBuffer[_inputPtr++].length;	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++].length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
121	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd  :  -1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd  :  -1;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd  :  -1;	  int    ptr    =    negative?    _inputPtr    :    -1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
122	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd.length  :  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd.length  :  _inputBuffer.length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd.length  :  _inputBuffer.length;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
123	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd.length  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd.length  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd.length  :  _inputBuffer[ptr++];	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
124	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd.length  :  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd.length  :  _inputBuffer[ptr++].length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd.length  :  _inputBuffer[ptr++].length;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
125	[BUG]  [BUGGY]  int  ptr  =  positive?  _inputEnd  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  positive?  _inputEnd  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  positive?  _inputEnd  :  _inputBuffer[ptr++];	  int    ptr    =    negative?    _inputEnd    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	34	None	replace
126	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputPtr  :  Integer.MIN_VALUE;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputPtr  :  Integer.MIN_VALUE;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputPtr  :  Integer.MIN_VALUE;	  int    ptr    =    negative?    _inputPtr    :    1;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
127	[BUG]  [BUGGY]  int  ptr  =  negative?  _inputEnd-1  :  _inputBuffer[ptr++].length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  negative?  _inputEnd-1  :  _inputBuffer[ptr++].length();  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  negative?  _inputEnd-1  :  _inputBuffer[ptr++].length();	  int    ptr    =    _inputEnd-1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
128	[BUG]  [BUGGY]  char  ptr  =(_inputPtr  <  0)?  0  :  _inputBuffer[_inputPtr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =(_inputPtr  <  0)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =(_inputPtr  <  0)?  0  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    0)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	32	None	replace
129	[BUG]  [BUGGY]  int  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  negative);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  negative);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  negative);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
130	[BUG]  [BUGGY]  int  ptr  =  positive?  _inputBuffer.length  :  0;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  positive?  _inputBuffer.length  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  positive?  _inputBuffer.length  :  0;	  int    ptr    =    negative?    _inputBuffer.length    :    0;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
131	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length  -  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputBuffer.length  -  2;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputBuffer.length  -  2;	  int    ptr    =    _inputBuffer.length-1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
132	[BUG]  [BUGGY]  int  ptr  =  _inputEnd?  _inputPtr-1  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _inputEnd?  _inputPtr-1  :  _inputBuffer[ptr++];  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _inputEnd?  _inputPtr-1  :  _inputBuffer[ptr++];	  int    ptr    =    negative?    _inputPtr-1    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
133	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].intValue();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].intValue();  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _inputBuffer[ptr++].intValue();	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
134	[BUG]  [BUGGY]  char  ptr  =(ch  ==  INT_CHAR)?  negative  :  ch;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  char  ptr  =(ch  ==  INT_CHAR)?  negative  :  ch;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	char  ptr  =(ch  ==  INT_CHAR)?  negative  :  ch;	  char    ptr    =    negative;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
135	[BUG]  [BUGGY]  int  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr,  negative);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr,  negative);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr,  negative);	  int    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
136	[BUG]  [BUGGY]  int  ptr  =(_reader!=  null)?  _reader.readInt()  :  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =(_reader!=  null)?  _reader.readInt()  :  _inputBuffer.length;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =(_reader!=  null)?  _reader.readInt()  :  _inputBuffer.length;	  int    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
137	[BUG]  [BUGGY]  int  ptr  =  positive?  0  :  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  int  ptr  =  positive?  0  :  0;  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	int  ptr  =  positive?  0  :  0;	  int    ptr    =    negative?    0    :    0;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
138	[BUG]  [BUGGY]  String  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++].toString();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  String  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++].toString();  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	String  ptr  =  negative?  _inputPtr  :  _inputBuffer[ptr++].toString();	  String    ptr    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
139	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readInt(DEFAULT_VALUE_NUMBER_INT,  negative);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  Integer  ptr  =  _reader.readInt(DEFAULT_VALUE_NUMBER_INT,  negative);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _reader.readInt(DEFAULT_VALUE_NUMBER_INT,  negative);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
140	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readInt(DEFAULT_VALUE_NUMBER_INT,  DEFAULT_VALUE_NUMBER_INT);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  Integer  ptr  =  _reader.readInt(DEFAULT_VALUE_NUMBER_INT,  DEFAULT_VALUE_NUMBER_INT);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _reader.readInt(DEFAULT_VALUE_NUMBER_INT,  DEFAULT_VALUE_NUMBER_INT);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
141	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readInt(DEFAULT_VALUE_PREFIX,  DEFAULT_VALUE_PREFIX);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);      [BUGGY]  Integer  ptr  =  _reader.readInt(DEFAULT_VALUE_PREFIX,  DEFAULT_VALUE_PREFIX);  [BUGGY]      int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	Integer  ptr  =  _reader.readInt(DEFAULT_VALUE_PREFIX,  DEFAULT_VALUE_PREFIX);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
