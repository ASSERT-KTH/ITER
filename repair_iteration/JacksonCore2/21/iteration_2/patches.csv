bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  expLen);	  _textBuffer.resetWithCapacity(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
2	[BUG]  [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  len,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  len,  expLen);	  _textBuffer.resetWithCapacity(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
3	[BUG]  [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  len  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  len  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  len  +  1);	  _textBuffer.resetWithCapacity(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  len,  expLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  len,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    len,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  fractLen,  len);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  fractLen,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  fractLen,  len);	  _textBuffer.resetWithShared(_inputBuffer,    len,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
6	[BUG]  [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  expLen);	  _textBuffer.resetWithFloatingPoint(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
7	[BUG]  [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  len,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  len,  expLen);	  _textBuffer.resetWithFloatingPoint(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  endPtr);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  endPtr);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  endPtr);	  _textBuffer.resetWithFloatingPoint(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  Integer  intLen  =  _inputBuffer[len-1];  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  intLen  =  _inputBuffer[len-1];  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  intLen  =  _inputBuffer[len-1];	  Integer    intLen    =    _inputBuffer[len];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
10	[BUG]  [BUGGY]  Integer  intLen  =  _inputBuffer[len  +  1];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  intLen  =  _inputBuffer[len  +  1];  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  intLen  =  _inputBuffer[len  +  1];	  Integer    intLen    =    _inputBuffer[len];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
11	[BUG]  [BUGGY]  Integer  intLen  =  _inputBuffer[len++];  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  intLen  =  _inputBuffer[len++];  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  intLen  =  _inputBuffer[len++];	  Integer    intLen    =    _inputBuffer[len];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
12	[BUG]  [BUGGY]  Integer  intLen  =  _inputBuffer[len]  &  0xff;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  intLen  =  _inputBuffer[len]  &  0xff;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  intLen  =  _inputBuffer[len]  &  0xff;	  Integer    intLen    =    _inputBuffer[len];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr,  len);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr,  len);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    endPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
14	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr,  expLen  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr,  expLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    endPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
15	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen,  fractLen  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen,  fractLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  outputEnd  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  outputEnd  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  outputEnd  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  outputLen  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  outputLen  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  outputLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  int  len  =  _parseNumber2(len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  len  =  _parseNumber2(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  len  =  _parseNumber2(len);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  int  len  =  _parseNumber2(len,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  len  =  _parseNumber2(len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  len  =  _parseNumber2(len,  expLen);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
20	[BUG]  [BUGGY]  int  fractLen  =  _parseNumber2(len);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _parseNumber2(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _parseNumber2(len);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  int  expLen  =  _parseNumber2(len);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  expLen  =  _parseNumber2(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  expLen  =  _parseNumber2(len);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  0,  len,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  0,  len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  0,  len,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
23	[BUG]  [BUGGY]  int  fractLen  =  _symbols.length  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _symbols.length  -  1;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _symbols.length  -  1;	  int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
24	[BUG]  [BUGGY]  int  fractLen  =  _symbols.length  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _symbols.length  +  1;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _symbols.length  +  1;	  int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
25	[BUG]  [BUGGY]  int  fractLen  =  _symbols.length  -  2;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _symbols.length  -  2;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _symbols.length  -  2;	  int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
26	[BUG]  [BUGGY]  int  fractLen  =  _symbols.length  +  len;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _symbols.length  +  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _symbols.length  +  len;	  int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
27	[BUG]  [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  len,  expLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  len,  expLen);	  _textBuffer.resetWithSeparator(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
28	[BUG]  [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  expLen);	  _textBuffer.resetWithSeparator(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
29	[BUG]  [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  len  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  len  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  len  +  1);	  _textBuffer.resetWithSeparator(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
30	[BUG]  [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  fractLen,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  fractLen,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  fractLen,  len);	  _textBuffer.resetWithSeparator(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
31	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer[len  +  1];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer[len  +  1];  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer[len  +  1];	  int    fractLen    =    _inputBuffer[len];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer[len-1];  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer[len-1];  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer[len-1];	  int    fractLen    =    _inputBuffer[len];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer[len++];  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer[len++];  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer[len++];	  int    fractLen    =    _inputBuffer[len];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  expLen  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  expLen  -  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  expLen  -  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    +    1,    expLen);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  expLen,  fractLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  expLen,  fractLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  expLen,  fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    +    1,    expLen);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  negative);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  negative);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  negative);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    +    1,    expLen);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  0,  len  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  0,  len  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  0,  len  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  Integer  negative  =  _parseInt(ch);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  negative  =  _parseInt(ch);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  negative  =  _parseInt(ch);	  Integer    negative    =    _parseInt(len);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
39	[BUG]  [BUGGY]  Integer  negative  =  _parseInt(ch,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  negative  =  _parseInt(ch,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  negative  =  _parseInt(ch,  len);	  Integer    negative    =    _parseInt(len);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
40	[BUG]  [BUGGY]  int  negative  =  _parseInt(len);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negative  =  _parseInt(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negative  =  _parseInt(len);	  Integer    negative    =    _parseInt(len);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
41	[BUG]  [BUGGY]  Integer  fractLen  =  _parseInt(len);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  fractLen  =  _parseInt(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  fractLen  =  _parseInt(len);	  Integer    negative    =    _parseInt(len);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
42	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  fractLen,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  fractLen,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    expLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  outputEnd,  fractLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  outputEnd,  fractLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  outputEnd,  fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    expLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  len,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  len,  expLen);	  _textBuffer.resetWithSegmented(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
45	[BUG]  [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  expLen);	  _textBuffer.resetWithSegmented(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
46	[BUG]  [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  fractLen,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  fractLen,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  fractLen,  len);	  _textBuffer.resetWithSegmented(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
47	[BUG]  [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  0,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  0,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  0,  len);	  _textBuffer.resetWithSegmented(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
48	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  endPtr,  len,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  endPtr,  len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  endPtr,  len,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    endPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  endPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  endPtr,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  endPtr,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    endPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  *  2);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  *  2);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  *  2);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    *    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
52	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  -  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  -  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    *    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
53	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  *  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  *  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    *    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
54	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  -  1,  expLen  *  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  -  1,  expLen  *  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  -  1,  expLen  *  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    *    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
55	[BUG]  [BUGGY]  int  negativeLen  =  _inputBuffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negativeLen  =  _inputBuffer.length  -  1;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negativeLen  =  _inputBuffer.length  -  1;	  int    negativeLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
56	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  len  =  _inputBuffer.length;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  len  =  _inputBuffer.length;	  int    negativeLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
57	[BUG]  [BUGGY]  int  negativeLen  =  _inputBuffer.length  -  len;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negativeLen  =  _inputBuffer.length  -  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negativeLen  =  _inputBuffer.length  -  len;	  int    negativeLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
58	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  len  =  _inputBuffer.length()  +  1;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  len  =  _inputBuffer.length()  +  1;	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
59	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  len  =  _inputBuffer.length()  -  1;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  len  =  _inputBuffer.length()  -  1;	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length()  *  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  len  =  _inputBuffer.length()  *  2;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  len  =  _inputBuffer.length()  *  2;	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  int[]  fractLen  =  _symbols.get(ch,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int[]  fractLen  =  _symbols.get(ch,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int[]  fractLen  =  _symbols.get(ch,  len);	  int[]    fractLen    =    _symbols.get(ch);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
62	[BUG]  [BUGGY]  int[]  fractLen  =  _symbols.get(ch,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int[]  fractLen  =  _symbols.get(ch,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int[]  fractLen  =  _symbols.get(ch,  expLen);	  int[]    fractLen    =    _symbols.get(ch);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
63	[BUG]  [BUGGY]  int[]  fractLen  =  _symbols.get(len);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int[]  fractLen  =  _symbols.get(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int[]  fractLen  =  _symbols.get(len);	  int[]    fractLen    =    _symbols.get(ch);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
64	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  1;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length  -  1;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  len;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length  -  len;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
66	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  +  len;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length  +  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length  +  len;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
67	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  2;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  2;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length  -  2;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
68	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length()  +  len;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length()  +  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length()  +  len;	  int    fractLen    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length()  -  1;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length()  -  1;	  int    fractLen    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
70	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length()  +  1;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length()  +  1;	  int    fractLen    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
71	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr,  fractLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr,  fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  endPtr);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  endPtr);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  endPtr);	  _textBuffer.resetWithCapacity(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
73	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  len);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    expLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
74	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr  *  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr  *  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr  *  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    *    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
75	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  *  4);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  *  4);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  *  4);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    *    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
76	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length()  *  len;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length()  *  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length()  *  len;	  int    fractLen    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  0,  len  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  0,  len  -  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  0,  len  -  1);	  _textBuffer.resetWithShared(_inputBuffer,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
78	[BUG]  [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  len  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  len  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  len  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
79	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  fractLen  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  fractLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  len,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  len,  fractLen,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  len,  fractLen,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    len,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
82	[BUG]  [BUGGY]  Integer  negative  =  _parseInt(len,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  negative  =  _parseInt(len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  negative  =  _parseInt(len,  expLen);	  Integer    negative    =    _parseInt(len);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
83	[BUG]  [BUGGY]  Integer  negative  =  _parseInt(intLen);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  negative  =  _parseInt(intLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  negative  =  _parseInt(intLen);	  Integer    negative    =    _parseInt(len);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
84	[BUG]  [BUGGY]  int  negativeLen  =  _parseNumber2(len,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negativeLen  =  _parseNumber2(len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negativeLen  =  _parseNumber2(len,  expLen);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
85	[BUG]  [BUGGY]  int  negativeLen  =  _parseNumber1(len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negativeLen  =  _parseNumber1(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negativeLen  =  _parseNumber1(len);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
86	[BUG]  [BUGGY]  int  negativeLen  =  _parseNumber2(negative);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negativeLen  =  _parseNumber2(negative);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negativeLen  =  _parseNumber2(negative);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  int  negativeLen  =  _parseNumber(len,  expLen);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negativeLen  =  _parseNumber(len,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negativeLen  =  _parseNumber(len,  expLen);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
88	[BUG]  [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  endPtr,  len);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  endPtr,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  endPtr,  len);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    endPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
89	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  endPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  endPtr,  fractLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  endPtr,  fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    endPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
90	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  endPtr,  len  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  endPtr,  len  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  endPtr,  len  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    endPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
91	[BUG]  [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  endPtr,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  endPtr,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithFloatingPoint(_inputBuffer,  endPtr,  len);	  _textBuffer.resetWithShared(_inputBuffer,    endPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
92	[BUG]  [BUGGY]  int  fractLen  =  len;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  len;	  int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
93	[BUG]  [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  fractLen);	  _textBuffer.resetWithSegmented(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
94	[BUG]  [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  endPtr);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  endPtr);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  endPtr);	  _textBuffer.resetWithSegmented(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
95	[BUG]  [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  len  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  len  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  len  +  1);	  _textBuffer.resetWithFloatingPoint(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
96	[BUG]  [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithFloatingPoint(_inputBuffer,  startPtr,  fractLen);	  _textBuffer.resetWithFloatingPoint(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
97	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr  +  1,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr  +  1,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  endPtr  +  1,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    +    1,    expLen);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  +  1,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  +  1,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  +  1,  len);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    +    1,    expLen);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
99	[BUG]  [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSeparator(_inputBuffer,  startPtr,  fractLen);	  _textBuffer.resetWithSeparator(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
100	[BUG]  [BUGGY]  int  negativeLen  =  _inputBuffer.length  +  len;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negativeLen  =  _inputBuffer.length  +  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negativeLen  =  _inputBuffer.length  +  len;	  int    negativeLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
101	[BUG]  [BUGGY]  int  negativeLen  =  _inputBuffer.length  -  2;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negativeLen  =  _inputBuffer.length  -  2;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negativeLen  =  _inputBuffer.length  -  2;	  int    negativeLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
102	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen,  fractLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen,  fractLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen,  fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
103	[BUG]  [BUGGY]  int  fractLen  =  len.length;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  len.length;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  len.length;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
104	[BUG]  [BUGGY]  int  intLen  =  _parseNumber2(len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  intLen  =  _parseNumber2(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  intLen  =  _parseNumber2(len);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
105	[BUG]  [BUGGY]  int  int  negativeLen  =  _parseNumber2(len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  int  negativeLen  =  _parseNumber2(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  int  negativeLen  =  _parseNumber2(len);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
106	[BUG]  [BUGGY]  int  negativeLen  =  _parseNumber(len);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  negativeLen  =  _parseNumber(len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  negativeLen  =  _parseNumber(len);	  int    negativeLen    =    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
107	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen,  fractLen,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen,  fractLen,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len,    expLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
108	[BUG]  [BUGGY]  Integer  intLen  =  _inputBuffer.length[len];  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  Integer  intLen  =  _inputBuffer.length[len];  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	Integer  intLen  =  _inputBuffer.length[len];	  Integer    intLen    =    _inputBuffer[len];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
109	[BUG]  [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  endPtr,  len);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  endPtr,  len);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  endPtr,  len);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    endPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
110	[BUG]  [BUGGY]  int[]  fractLen  =(_symbols!=  null)?  _symbols.get(ch):  _symbols.get(ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int[]  fractLen  =(_symbols!=  null)?  _symbols.get(ch):  _symbols.get(ch);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int[]  fractLen  =(_symbols!=  null)?  _symbols.get(ch):  _symbols.get(ch);	  int[]    fractLen    =    _symbols.get(ch);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
111	[BUG]  [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  fractLen,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithSegmented(_inputBuffer,  startPtr,  fractLen,  expLen);	  _textBuffer.resetWithSegmented(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
112	[BUG]  [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithCapacity(_inputBuffer,  startPtr,  fractLen);	  _textBuffer.resetWithCapacity(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
113	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  startPtr;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  startPtr;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length  -  startPtr;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
114	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length()  -  len;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer.length()  -  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer.length()  -  len;	  int    fractLen    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
115	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer[len  +  len];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _inputBuffer[len  +  len];  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _inputBuffer[len  +  len];	  int    fractLen    =    _inputBuffer[len];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
116	[BUG]  [BUGGY]  int  fractLen  =  _symbols.length  -  len;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  fractLen  =  _symbols.length  -  len;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  fractLen  =  _symbols.length  -  len;	  int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
117	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen  +  1,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen  +  1,  expLen);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen  +  1,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    +    1,    expLen);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
118	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  expLen  +  1);  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1,  expLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len    +    1,    expLen);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
119	[BUG]  [BUGGY]  int  int  negativeLen  =  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;      [BUGGY]  int  int  negativeLen  =  _inputBuffer.length;  [BUGGY]      return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	int  int  negativeLen  =  _inputBuffer.length;	  int    negativeLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
